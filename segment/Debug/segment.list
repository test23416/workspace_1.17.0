
segment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001678  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001850  08001850  00002850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001860  08001860  0000301c  2**0
                  CONTENTS
  4 .ARM          00000000  08001860  08001860  0000301c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001860  08001860  0000301c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001860  08001860  00002860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001864  08001864  00002864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08001868  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000001c  08001884  0000301c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08001884  0000303c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000301c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004769  00000000  00000000  0000304c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010f3  00000000  00000000  000077b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c0  00000000  00000000  000088a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000433  00000000  00000000  00008e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000231e1  00000000  00000000  0000929b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005d29  00000000  00000000  0002c47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dee1d  00000000  00000000  000321a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110fc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001544  00000000  00000000  00111008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0011254c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001838 	.word	0x08001838

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000020 	.word	0x20000020
 8000214:	08001838 	.word	0x08001838

08000218 <set_segment_direct>:
		0x3F,0x06,0x5B,0x4F,
		0x66,0x6D,0x7D,0x07,
		0x7F,0x67,0x77,0x7C,
		0x39,0x5E,0x79,0x71
};
void set_segment_direct(uint8_t segs){
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, segs & (1<<0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f003 0301 	and.w	r3, r3, #1
 8000228:	b2db      	uxtb	r3, r3
 800022a:	461a      	mov	r2, r3
 800022c:	2101      	movs	r1, #1
 800022e:	482a      	ldr	r0, [pc, #168]	@ (80002d8 <set_segment_direct+0xc0>)
 8000230:	f000 fd14 	bl	8000c5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, segs & (1<<1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	105b      	asrs	r3, r3, #1
 8000238:	b2db      	uxtb	r3, r3
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	b2db      	uxtb	r3, r3
 8000240:	461a      	mov	r2, r3
 8000242:	2102      	movs	r1, #2
 8000244:	4824      	ldr	r0, [pc, #144]	@ (80002d8 <set_segment_direct+0xc0>)
 8000246:	f000 fd09 	bl	8000c5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, segs & (1<<2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	109b      	asrs	r3, r3, #2
 800024e:	b2db      	uxtb	r3, r3
 8000250:	f003 0301 	and.w	r3, r3, #1
 8000254:	b2db      	uxtb	r3, r3
 8000256:	461a      	mov	r2, r3
 8000258:	2104      	movs	r1, #4
 800025a:	481f      	ldr	r0, [pc, #124]	@ (80002d8 <set_segment_direct+0xc0>)
 800025c:	f000 fcfe 	bl	8000c5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, segs & (1<<3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	10db      	asrs	r3, r3, #3
 8000264:	b2db      	uxtb	r3, r3
 8000266:	f003 0301 	and.w	r3, r3, #1
 800026a:	b2db      	uxtb	r3, r3
 800026c:	461a      	mov	r2, r3
 800026e:	2108      	movs	r1, #8
 8000270:	4819      	ldr	r0, [pc, #100]	@ (80002d8 <set_segment_direct+0xc0>)
 8000272:	f000 fcf3 	bl	8000c5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, segs & (1<<4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	111b      	asrs	r3, r3, #4
 800027a:	b2db      	uxtb	r3, r3
 800027c:	f003 0301 	and.w	r3, r3, #1
 8000280:	b2db      	uxtb	r3, r3
 8000282:	461a      	mov	r2, r3
 8000284:	2110      	movs	r1, #16
 8000286:	4814      	ldr	r0, [pc, #80]	@ (80002d8 <set_segment_direct+0xc0>)
 8000288:	f000 fce8 	bl	8000c5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, segs & (1<<5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	115b      	asrs	r3, r3, #5
 8000290:	b2db      	uxtb	r3, r3
 8000292:	f003 0301 	and.w	r3, r3, #1
 8000296:	b2db      	uxtb	r3, r3
 8000298:	461a      	mov	r2, r3
 800029a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800029e:	480e      	ldr	r0, [pc, #56]	@ (80002d8 <set_segment_direct+0xc0>)
 80002a0:	f000 fcdc 	bl	8000c5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, segs & (1<<6) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	119b      	asrs	r3, r3, #6
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	461a      	mov	r2, r3
 80002b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002b6:	4808      	ldr	r0, [pc, #32]	@ (80002d8 <set_segment_direct+0xc0>)
 80002b8:	f000 fcd0 	bl	8000c5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, segs & (1<<7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	09db      	lsrs	r3, r3, #7
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	461a      	mov	r2, r3
 80002c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002c8:	4803      	ldr	r0, [pc, #12]	@ (80002d8 <set_segment_direct+0xc0>)
 80002ca:	f000 fcc7 	bl	8000c5c <HAL_GPIO_WritePin>
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	48001000 	.word	0x48001000

080002dc <display>:
void display(int number) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	if(number>=16)return;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b0f      	cmp	r3, #15
 80002e8:	dc07      	bgt.n	80002fa <display+0x1e>
	set_segment_direct(code[number]);
 80002ea:	4a06      	ldr	r2, [pc, #24]	@ (8000304 <display+0x28>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4413      	add	r3, r2
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff90 	bl	8000218 <set_segment_direct>
 80002f8:	e000      	b.n	80002fc <display+0x20>
	if(number>=16)return;
 80002fa:	bf00      	nop
}
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	20000000 	.word	0x20000000

08000308 <set_digit>:

void set_digit(int8_t which)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DIG0_GPIO_Port, DIG0_Pin, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000318:	481f      	ldr	r0, [pc, #124]	@ (8000398 <set_digit+0x90>)
 800031a:	f000 fc9f 	bl	8000c5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIG1_GPIO_Port, DIG1_Pin, GPIO_PIN_RESET);
 800031e:	2200      	movs	r2, #0
 8000320:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000324:	481c      	ldr	r0, [pc, #112]	@ (8000398 <set_digit+0x90>)
 8000326:	f000 fc99 	bl	8000c5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIG2_GPIO_Port, DIG2_Pin, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	2101      	movs	r1, #1
 800032e:	481a      	ldr	r0, [pc, #104]	@ (8000398 <set_digit+0x90>)
 8000330:	f000 fc94 	bl	8000c5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIG3_GPIO_Port, DIG3_Pin, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	2102      	movs	r1, #2
 8000338:	4817      	ldr	r0, [pc, #92]	@ (8000398 <set_digit+0x90>)
 800033a:	f000 fc8f 	bl	8000c5c <HAL_GPIO_WritePin>
  switch (which)
 800033e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000342:	2b03      	cmp	r3, #3
 8000344:	d824      	bhi.n	8000390 <set_digit+0x88>
 8000346:	a201      	add	r2, pc, #4	@ (adr r2, 800034c <set_digit+0x44>)
 8000348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800034c:	0800035d 	.word	0x0800035d
 8000350:	0800036b 	.word	0x0800036b
 8000354:	08000379 	.word	0x08000379
 8000358:	08000385 	.word	0x08000385
  {
  case 0:HAL_GPIO_WritePin(DIG0_GPIO_Port, DIG0_Pin, GPIO_PIN_SET);break;
 800035c:	2201      	movs	r2, #1
 800035e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000362:	480d      	ldr	r0, [pc, #52]	@ (8000398 <set_digit+0x90>)
 8000364:	f000 fc7a 	bl	8000c5c <HAL_GPIO_WritePin>
 8000368:	e012      	b.n	8000390 <set_digit+0x88>
  case 1:HAL_GPIO_WritePin(DIG1_GPIO_Port, DIG1_Pin, GPIO_PIN_SET);break;
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000370:	4809      	ldr	r0, [pc, #36]	@ (8000398 <set_digit+0x90>)
 8000372:	f000 fc73 	bl	8000c5c <HAL_GPIO_WritePin>
 8000376:	e00b      	b.n	8000390 <set_digit+0x88>
  case 2:HAL_GPIO_WritePin(DIG2_GPIO_Port, DIG2_Pin, GPIO_PIN_SET);break;
 8000378:	2201      	movs	r2, #1
 800037a:	2101      	movs	r1, #1
 800037c:	4806      	ldr	r0, [pc, #24]	@ (8000398 <set_digit+0x90>)
 800037e:	f000 fc6d 	bl	8000c5c <HAL_GPIO_WritePin>
 8000382:	e005      	b.n	8000390 <set_digit+0x88>
  case 3:HAL_GPIO_WritePin(DIG3_GPIO_Port, DIG3_Pin, GPIO_PIN_SET);break;
 8000384:	2201      	movs	r2, #1
 8000386:	2102      	movs	r1, #2
 8000388:	4803      	ldr	r0, [pc, #12]	@ (8000398 <set_digit+0x90>)
 800038a:	f000 fc67 	bl	8000c5c <HAL_GPIO_WritePin>
 800038e:	bf00      	nop
  }
}
 8000390:	bf00      	nop
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	48000c00 	.word	0x48000c00

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a2:	f000 f962 	bl	800066a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a6:	f000 f827 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003aa:	f000 f865 	bl	8000478 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  int delay = 0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60bb      	str	r3, [r7, #8]
  int period = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60fb      	str	r3, [r7, #12]
  uint8_t numbers[]={10,3,2,1};
 80003b6:	4b0f      	ldr	r3, [pc, #60]	@ (80003f4 <main+0x58>)
 80003b8:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	set_digit(-1);
 80003ba:	f04f 30ff 	mov.w	r0, #4294967295
 80003be:	f7ff ffa3 	bl	8000308 <set_digit>
  	display(numbers[period]);
 80003c2:	1d3a      	adds	r2, r7, #4
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	4413      	add	r3, r2
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ff86 	bl	80002dc <display>
  	set_digit(period);
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	b25b      	sxtb	r3, r3
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff ff97 	bl	8000308 <set_digit>
  	HAL_Delay(delay);
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 f9b5 	bl	800074c <HAL_Delay>

  	++period;
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	3301      	adds	r3, #1
 80003e6:	60fb      	str	r3, [r7, #12]
  	if(period == 4)
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	2b04      	cmp	r3, #4
 80003ec:	d1e5      	bne.n	80003ba <main+0x1e>
  		period = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60fb      	str	r3, [r7, #12]
  	set_digit(-1);
 80003f2:	e7e2      	b.n	80003ba <main+0x1e>
 80003f4:	0102030a 	.word	0x0102030a

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b094      	sub	sp, #80	@ 0x50
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0318 	add.w	r3, r7, #24
 8000402:	2238      	movs	r2, #56	@ 0x38
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f001 f9ea 	bl	80017e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800041a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800041e:	f000 fc35 	bl	8000c8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000422:	2302      	movs	r3, #2
 8000424:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000426:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800042a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042c:	2340      	movs	r3, #64	@ 0x40
 800042e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000430:	2300      	movs	r3, #0
 8000432:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000434:	f107 0318 	add.w	r3, r7, #24
 8000438:	4618      	mov	r0, r3
 800043a:	f000 fcdb 	bl	8000df4 <HAL_RCC_OscConfig>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000444:	f000 f87c 	bl	8000540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000448:	230f      	movs	r3, #15
 800044a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800044c:	2301      	movs	r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000454:	2300      	movs	r3, #0
 8000456:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	2100      	movs	r1, #0
 8000460:	4618      	mov	r0, r3
 8000462:	f000 ffd9 	bl	8001418 <HAL_RCC_ClockConfig>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800046c:	f000 f868 	bl	8000540 <Error_Handler>
  }
}
 8000470:	bf00      	nop
 8000472:	3750      	adds	r7, #80	@ 0x50
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047e:	f107 030c 	add.w	r3, r7, #12
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800048e:	4b29      	ldr	r3, [pc, #164]	@ (8000534 <MX_GPIO_Init+0xbc>)
 8000490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000492:	4a28      	ldr	r2, [pc, #160]	@ (8000534 <MX_GPIO_Init+0xbc>)
 8000494:	f043 0310 	orr.w	r3, r3, #16
 8000498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800049a:	4b26      	ldr	r3, [pc, #152]	@ (8000534 <MX_GPIO_Init+0xbc>)
 800049c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800049e:	f003 0310 	and.w	r3, r3, #16
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a6:	4b23      	ldr	r3, [pc, #140]	@ (8000534 <MX_GPIO_Init+0xbc>)
 80004a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004aa:	4a22      	ldr	r2, [pc, #136]	@ (8000534 <MX_GPIO_Init+0xbc>)
 80004ac:	f043 0308 	orr.w	r3, r3, #8
 80004b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004b2:	4b20      	ldr	r3, [pc, #128]	@ (8000534 <MX_GPIO_Init+0xbc>)
 80004b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004b6:	f003 0308 	and.w	r3, r3, #8
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	4b1d      	ldr	r3, [pc, #116]	@ (8000534 <MX_GPIO_Init+0xbc>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000534 <MX_GPIO_Init+0xbc>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000534 <MX_GPIO_Init+0xbc>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
 80004d6:	2200      	movs	r2, #0
 80004d8:	f240 711f 	movw	r1, #1823	@ 0x71f
 80004dc:	4816      	ldr	r0, [pc, #88]	@ (8000538 <MX_GPIO_Init+0xc0>)
 80004de:	f000 fbbd 	bl	8000c5c <HAL_GPIO_WritePin>
                          |SEG6_Pin|SEG7_Pin|SEG0_Pin|SEG1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIG0_Pin|DIG1_Pin|DIG2_Pin|DIG3_Pin, GPIO_PIN_RESET);
 80004e2:	2200      	movs	r2, #0
 80004e4:	f24c 0103 	movw	r1, #49155	@ 0xc003
 80004e8:	4814      	ldr	r0, [pc, #80]	@ (800053c <MX_GPIO_Init+0xc4>)
 80004ea:	f000 fbb7 	bl	8000c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin SEG7_Pin SEG0_Pin SEG1_Pin */
  GPIO_InitStruct.Pin = SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
 80004ee:	f240 731f 	movw	r3, #1823	@ 0x71f
 80004f2:	60fb      	str	r3, [r7, #12]
                          |SEG6_Pin|SEG7_Pin|SEG0_Pin|SEG1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f4:	2301      	movs	r3, #1
 80004f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	4619      	mov	r1, r3
 8000506:	480c      	ldr	r0, [pc, #48]	@ (8000538 <MX_GPIO_Init+0xc0>)
 8000508:	f000 fa26 	bl	8000958 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG0_Pin DIG1_Pin DIG2_Pin DIG3_Pin */
  GPIO_InitStruct.Pin = DIG0_Pin|DIG1_Pin|DIG2_Pin|DIG3_Pin;
 800050c:	f24c 0303 	movw	r3, #49155	@ 0xc003
 8000510:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000512:	2301      	movs	r3, #1
 8000514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051a:	2300      	movs	r3, #0
 800051c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800051e:	f107 030c 	add.w	r3, r7, #12
 8000522:	4619      	mov	r1, r3
 8000524:	4805      	ldr	r0, [pc, #20]	@ (800053c <MX_GPIO_Init+0xc4>)
 8000526:	f000 fa17 	bl	8000958 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800052a:	bf00      	nop
 800052c:	3720      	adds	r7, #32
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000
 8000538:	48001000 	.word	0x48001000
 800053c:	48000c00 	.word	0x48000c00

08000540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000544:	b672      	cpsid	i
}
 8000546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <Error_Handler+0x8>

0800054c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000552:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <HAL_MspInit+0x44>)
 8000554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000556:	4a0e      	ldr	r2, [pc, #56]	@ (8000590 <HAL_MspInit+0x44>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6613      	str	r3, [r2, #96]	@ 0x60
 800055e:	4b0c      	ldr	r3, [pc, #48]	@ (8000590 <HAL_MspInit+0x44>)
 8000560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056a:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <HAL_MspInit+0x44>)
 800056c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800056e:	4a08      	ldr	r2, [pc, #32]	@ (8000590 <HAL_MspInit+0x44>)
 8000570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000574:	6593      	str	r3, [r2, #88]	@ 0x58
 8000576:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <HAL_MspInit+0x44>)
 8000578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800057a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000582:	f000 fc27 	bl	8000dd4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000

08000594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <NMI_Handler+0x4>

0800059c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <HardFault_Handler+0x4>

080005a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <MemManage_Handler+0x4>

080005ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <BusFault_Handler+0x4>

080005b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <UsageFault_Handler+0x4>

080005bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ea:	f000 f891 	bl	8000710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005f8:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <SystemInit+0x20>)
 80005fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005fe:	4a05      	ldr	r2, [pc, #20]	@ (8000614 <SystemInit+0x20>)
 8000600:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000604:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000618:	480d      	ldr	r0, [pc, #52]	@ (8000650 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800061a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800061c:	f7ff ffea 	bl	80005f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	480c      	ldr	r0, [pc, #48]	@ (8000654 <LoopForever+0x6>)
  ldr r1, =_edata
 8000622:	490d      	ldr	r1, [pc, #52]	@ (8000658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000624:	4a0d      	ldr	r2, [pc, #52]	@ (800065c <LoopForever+0xe>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a0a      	ldr	r2, [pc, #40]	@ (8000660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000638:	4c0a      	ldr	r4, [pc, #40]	@ (8000664 <LoopForever+0x16>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000646:	f001 f8d3 	bl	80017f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800064a:	f7ff fea7 	bl	800039c <main>

0800064e <LoopForever>:

LoopForever:
    b LoopForever
 800064e:	e7fe      	b.n	800064e <LoopForever>
  ldr   r0, =_estack
 8000650:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000658:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800065c:	08001868 	.word	0x08001868
  ldr r2, =_sbss
 8000660:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000664:	2000003c 	.word	0x2000003c

08000668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC1_2_IRQHandler>

0800066a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000670:	2300      	movs	r3, #0
 8000672:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000674:	2003      	movs	r0, #3
 8000676:	f000 f93d 	bl	80008f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800067a:	200f      	movs	r0, #15
 800067c:	f000 f80e 	bl	800069c <HAL_InitTick>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	71fb      	strb	r3, [r7, #7]
 800068a:	e001      	b.n	8000690 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800068c:	f7ff ff5e 	bl	800054c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000690:	79fb      	ldrb	r3, [r7, #7]

}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006a4:	2300      	movs	r3, #0
 80006a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80006a8:	4b16      	ldr	r3, [pc, #88]	@ (8000704 <HAL_InitTick+0x68>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d022      	beq.n	80006f6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006b0:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <HAL_InitTick+0x6c>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <HAL_InitTick+0x68>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80006c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 f93a 	bl	800093e <HAL_SYSTICK_Config>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d10f      	bne.n	80006f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b0f      	cmp	r3, #15
 80006d4:	d809      	bhi.n	80006ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006d6:	2200      	movs	r2, #0
 80006d8:	6879      	ldr	r1, [r7, #4]
 80006da:	f04f 30ff 	mov.w	r0, #4294967295
 80006de:	f000 f914 	bl	800090a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006e2:	4a0a      	ldr	r2, [pc, #40]	@ (800070c <HAL_InitTick+0x70>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	e007      	b.n	80006fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	73fb      	strb	r3, [r7, #15]
 80006ee:	e004      	b.n	80006fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006f0:	2301      	movs	r3, #1
 80006f2:	73fb      	strb	r3, [r7, #15]
 80006f4:	e001      	b.n	80006fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000018 	.word	0x20000018
 8000708:	20000010 	.word	0x20000010
 800070c:	20000014 	.word	0x20000014

08000710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000714:	4b05      	ldr	r3, [pc, #20]	@ (800072c <HAL_IncTick+0x1c>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b05      	ldr	r3, [pc, #20]	@ (8000730 <HAL_IncTick+0x20>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4413      	add	r3, r2
 800071e:	4a03      	ldr	r2, [pc, #12]	@ (800072c <HAL_IncTick+0x1c>)
 8000720:	6013      	str	r3, [r2, #0]
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	20000038 	.word	0x20000038
 8000730:	20000018 	.word	0x20000018

08000734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return uwTick;
 8000738:	4b03      	ldr	r3, [pc, #12]	@ (8000748 <HAL_GetTick+0x14>)
 800073a:	681b      	ldr	r3, [r3, #0]
}
 800073c:	4618      	mov	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	20000038 	.word	0x20000038

0800074c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000754:	f7ff ffee 	bl	8000734 <HAL_GetTick>
 8000758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000764:	d004      	beq.n	8000770 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <HAL_Delay+0x40>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	4413      	add	r3, r2
 800076e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000770:	bf00      	nop
 8000772:	f7ff ffdf 	bl	8000734 <HAL_GetTick>
 8000776:	4602      	mov	r2, r0
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	68fa      	ldr	r2, [r7, #12]
 800077e:	429a      	cmp	r2, r3
 8000780:	d8f7      	bhi.n	8000772 <HAL_Delay+0x26>
  {
  }
}
 8000782:	bf00      	nop
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000018 	.word	0x20000018

08000790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a0:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <__NVIC_SetPriorityGrouping+0x44>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a6:	68ba      	ldr	r2, [r7, #8]
 80007a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007ac:	4013      	ands	r3, r2
 80007ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007c2:	4a04      	ldr	r2, [pc, #16]	@ (80007d4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	60d3      	str	r3, [r2, #12]
}
 80007c8:	bf00      	nop
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007dc:	4b04      	ldr	r3, [pc, #16]	@ (80007f0 <__NVIC_GetPriorityGrouping+0x18>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	0a1b      	lsrs	r3, r3, #8
 80007e2:	f003 0307 	and.w	r3, r3, #7
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	6039      	str	r1, [r7, #0]
 80007fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000804:	2b00      	cmp	r3, #0
 8000806:	db0a      	blt.n	800081e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	b2da      	uxtb	r2, r3
 800080c:	490c      	ldr	r1, [pc, #48]	@ (8000840 <__NVIC_SetPriority+0x4c>)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	0112      	lsls	r2, r2, #4
 8000814:	b2d2      	uxtb	r2, r2
 8000816:	440b      	add	r3, r1
 8000818:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800081c:	e00a      	b.n	8000834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4908      	ldr	r1, [pc, #32]	@ (8000844 <__NVIC_SetPriority+0x50>)
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	f003 030f 	and.w	r3, r3, #15
 800082a:	3b04      	subs	r3, #4
 800082c:	0112      	lsls	r2, r2, #4
 800082e:	b2d2      	uxtb	r2, r2
 8000830:	440b      	add	r3, r1
 8000832:	761a      	strb	r2, [r3, #24]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000e100 	.word	0xe000e100
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000848:	b480      	push	{r7}
 800084a:	b089      	sub	sp, #36	@ 0x24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	f1c3 0307 	rsb	r3, r3, #7
 8000862:	2b04      	cmp	r3, #4
 8000864:	bf28      	it	cs
 8000866:	2304      	movcs	r3, #4
 8000868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3304      	adds	r3, #4
 800086e:	2b06      	cmp	r3, #6
 8000870:	d902      	bls.n	8000878 <NVIC_EncodePriority+0x30>
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3b03      	subs	r3, #3
 8000876:	e000      	b.n	800087a <NVIC_EncodePriority+0x32>
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	f04f 32ff 	mov.w	r2, #4294967295
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	43da      	mvns	r2, r3
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	401a      	ands	r2, r3
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000890:	f04f 31ff 	mov.w	r1, #4294967295
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	43d9      	mvns	r1, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	4313      	orrs	r3, r2
         );
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3724      	adds	r7, #36	@ 0x24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
	...

080008b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008c0:	d301      	bcc.n	80008c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00f      	b.n	80008e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c6:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <SysTick_Config+0x40>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ce:	210f      	movs	r1, #15
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	f7ff ff8e 	bl	80007f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d8:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <SysTick_Config+0x40>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008de:	4b04      	ldr	r3, [pc, #16]	@ (80008f0 <SysTick_Config+0x40>)
 80008e0:	2207      	movs	r2, #7
 80008e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	e000e010 	.word	0xe000e010

080008f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff47 	bl	8000790 <__NVIC_SetPriorityGrouping>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b086      	sub	sp, #24
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000918:	f7ff ff5e 	bl	80007d8 <__NVIC_GetPriorityGrouping>
 800091c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	68b9      	ldr	r1, [r7, #8]
 8000922:	6978      	ldr	r0, [r7, #20]
 8000924:	f7ff ff90 	bl	8000848 <NVIC_EncodePriority>
 8000928:	4602      	mov	r2, r0
 800092a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff5f 	bl	80007f4 <__NVIC_SetPriority>
}
 8000936:	bf00      	nop
 8000938:	3718      	adds	r7, #24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ffb2 	bl	80008b0 <SysTick_Config>
 800094c:	4603      	mov	r3, r0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000958:	b480      	push	{r7}
 800095a:	b087      	sub	sp, #28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000966:	e15a      	b.n	8000c1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	2101      	movs	r1, #1
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	fa01 f303 	lsl.w	r3, r1, r3
 8000974:	4013      	ands	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2b00      	cmp	r3, #0
 800097c:	f000 814c 	beq.w	8000c18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 0303 	and.w	r3, r3, #3
 8000988:	2b01      	cmp	r3, #1
 800098a:	d005      	beq.n	8000998 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000994:	2b02      	cmp	r3, #2
 8000996:	d130      	bne.n	80009fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	2203      	movs	r2, #3
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4013      	ands	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	68da      	ldr	r2, [r3, #12]
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4313      	orrs	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009ce:	2201      	movs	r2, #1
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4013      	ands	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	091b      	lsrs	r3, r3, #4
 80009e4:	f003 0201 	and.w	r2, r3, #1
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f003 0303 	and.w	r3, r3, #3
 8000a02:	2b03      	cmp	r3, #3
 8000a04:	d017      	beq.n	8000a36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	2203      	movs	r2, #3
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43db      	mvns	r3, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	689a      	ldr	r2, [r3, #8]
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f003 0303 	and.w	r3, r3, #3
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d123      	bne.n	8000a8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	08da      	lsrs	r2, r3, #3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3208      	adds	r2, #8
 8000a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	220f      	movs	r2, #15
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4013      	ands	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	691a      	ldr	r2, [r3, #16]
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	f003 0307 	and.w	r3, r3, #7
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	08da      	lsrs	r2, r3, #3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3208      	adds	r2, #8
 8000a84:	6939      	ldr	r1, [r7, #16]
 8000a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	2203      	movs	r2, #3
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f003 0203 	and.w	r2, r3, #3
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f000 80a6 	beq.w	8000c18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000acc:	4b5b      	ldr	r3, [pc, #364]	@ (8000c3c <HAL_GPIO_Init+0x2e4>)
 8000ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ad0:	4a5a      	ldr	r2, [pc, #360]	@ (8000c3c <HAL_GPIO_Init+0x2e4>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ad8:	4b58      	ldr	r3, [pc, #352]	@ (8000c3c <HAL_GPIO_Init+0x2e4>)
 8000ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ae4:	4a56      	ldr	r2, [pc, #344]	@ (8000c40 <HAL_GPIO_Init+0x2e8>)
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	089b      	lsrs	r3, r3, #2
 8000aea:	3302      	adds	r3, #2
 8000aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	f003 0303 	and.w	r3, r3, #3
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	220f      	movs	r2, #15
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	43db      	mvns	r3, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b0e:	d01f      	beq.n	8000b50 <HAL_GPIO_Init+0x1f8>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a4c      	ldr	r2, [pc, #304]	@ (8000c44 <HAL_GPIO_Init+0x2ec>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d019      	beq.n	8000b4c <HAL_GPIO_Init+0x1f4>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a4b      	ldr	r2, [pc, #300]	@ (8000c48 <HAL_GPIO_Init+0x2f0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d013      	beq.n	8000b48 <HAL_GPIO_Init+0x1f0>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a4a      	ldr	r2, [pc, #296]	@ (8000c4c <HAL_GPIO_Init+0x2f4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d00d      	beq.n	8000b44 <HAL_GPIO_Init+0x1ec>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a49      	ldr	r2, [pc, #292]	@ (8000c50 <HAL_GPIO_Init+0x2f8>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d007      	beq.n	8000b40 <HAL_GPIO_Init+0x1e8>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a48      	ldr	r2, [pc, #288]	@ (8000c54 <HAL_GPIO_Init+0x2fc>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d101      	bne.n	8000b3c <HAL_GPIO_Init+0x1e4>
 8000b38:	2305      	movs	r3, #5
 8000b3a:	e00a      	b.n	8000b52 <HAL_GPIO_Init+0x1fa>
 8000b3c:	2306      	movs	r3, #6
 8000b3e:	e008      	b.n	8000b52 <HAL_GPIO_Init+0x1fa>
 8000b40:	2304      	movs	r3, #4
 8000b42:	e006      	b.n	8000b52 <HAL_GPIO_Init+0x1fa>
 8000b44:	2303      	movs	r3, #3
 8000b46:	e004      	b.n	8000b52 <HAL_GPIO_Init+0x1fa>
 8000b48:	2302      	movs	r3, #2
 8000b4a:	e002      	b.n	8000b52 <HAL_GPIO_Init+0x1fa>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e000      	b.n	8000b52 <HAL_GPIO_Init+0x1fa>
 8000b50:	2300      	movs	r3, #0
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	f002 0203 	and.w	r2, r2, #3
 8000b58:	0092      	lsls	r2, r2, #2
 8000b5a:	4093      	lsls	r3, r2
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b62:	4937      	ldr	r1, [pc, #220]	@ (8000c40 <HAL_GPIO_Init+0x2e8>)
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	089b      	lsrs	r3, r3, #2
 8000b68:	3302      	adds	r3, #2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b70:	4b39      	ldr	r3, [pc, #228]	@ (8000c58 <HAL_GPIO_Init+0x300>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d003      	beq.n	8000b94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b94:	4a30      	ldr	r2, [pc, #192]	@ (8000c58 <HAL_GPIO_Init+0x300>)
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c58 <HAL_GPIO_Init+0x300>)
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bbe:	4a26      	ldr	r2, [pc, #152]	@ (8000c58 <HAL_GPIO_Init+0x300>)
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000bc4:	4b24      	ldr	r3, [pc, #144]	@ (8000c58 <HAL_GPIO_Init+0x300>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000be8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c58 <HAL_GPIO_Init+0x300>)
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000bee:	4b1a      	ldr	r3, [pc, #104]	@ (8000c58 <HAL_GPIO_Init+0x300>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c12:	4a11      	ldr	r2, [pc, #68]	@ (8000c58 <HAL_GPIO_Init+0x300>)
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	fa22 f303 	lsr.w	r3, r2, r3
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f47f ae9d 	bne.w	8000968 <HAL_GPIO_Init+0x10>
  }
}
 8000c2e:	bf00      	nop
 8000c30:	bf00      	nop
 8000c32:	371c      	adds	r7, #28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010000 	.word	0x40010000
 8000c44:	48000400 	.word	0x48000400
 8000c48:	48000800 	.word	0x48000800
 8000c4c:	48000c00 	.word	0x48000c00
 8000c50:	48001000 	.word	0x48001000
 8000c54:	48001400 	.word	0x48001400
 8000c58:	40010400 	.word	0x40010400

08000c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	807b      	strh	r3, [r7, #2]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c6c:	787b      	ldrb	r3, [r7, #1]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c72:	887a      	ldrh	r2, [r7, #2]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c78:	e002      	b.n	8000c80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c7a:	887a      	ldrh	r2, [r7, #2]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d141      	bne.n	8000d1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c9a:	4b4b      	ldr	r3, [pc, #300]	@ (8000dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ca6:	d131      	bne.n	8000d0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ca8:	4b47      	ldr	r3, [pc, #284]	@ (8000dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cae:	4a46      	ldr	r2, [pc, #280]	@ (8000dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000cb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb8:	4b43      	ldr	r3, [pc, #268]	@ (8000dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000cc0:	4a41      	ldr	r2, [pc, #260]	@ (8000dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cc8:	4b40      	ldr	r3, [pc, #256]	@ (8000dcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2232      	movs	r2, #50	@ 0x32
 8000cce:	fb02 f303 	mul.w	r3, r2, r3
 8000cd2:	4a3f      	ldr	r2, [pc, #252]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd8:	0c9b      	lsrs	r3, r3, #18
 8000cda:	3301      	adds	r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cde:	e002      	b.n	8000ce6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ce6:	4b38      	ldr	r3, [pc, #224]	@ (8000dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cf2:	d102      	bne.n	8000cfa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1f2      	bne.n	8000ce0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cfa:	4b33      	ldr	r3, [pc, #204]	@ (8000dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d06:	d158      	bne.n	8000dba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	e057      	b.n	8000dbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d12:	4a2d      	ldr	r2, [pc, #180]	@ (8000dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000d1c:	e04d      	b.n	8000dba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d24:	d141      	bne.n	8000daa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d26:	4b28      	ldr	r3, [pc, #160]	@ (8000dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d32:	d131      	bne.n	8000d98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d34:	4b24      	ldr	r3, [pc, #144]	@ (8000dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d3a:	4a23      	ldr	r2, [pc, #140]	@ (8000dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d44:	4b20      	ldr	r3, [pc, #128]	@ (8000dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d4c:	4a1e      	ldr	r2, [pc, #120]	@ (8000dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d54:	4b1d      	ldr	r3, [pc, #116]	@ (8000dcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2232      	movs	r2, #50	@ 0x32
 8000d5a:	fb02 f303 	mul.w	r3, r2, r3
 8000d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d60:	fba2 2303 	umull	r2, r3, r2, r3
 8000d64:	0c9b      	lsrs	r3, r3, #18
 8000d66:	3301      	adds	r3, #1
 8000d68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d6a:	e002      	b.n	8000d72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d72:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d7e:	d102      	bne.n	8000d86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1f2      	bne.n	8000d6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d86:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d92:	d112      	bne.n	8000dba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	e011      	b.n	8000dbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d98:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000da0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000da4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000da8:	e007      	b.n	8000dba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000daa:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000db2:	4a05      	ldr	r2, [pc, #20]	@ (8000dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000db4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000db8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	40007000 	.word	0x40007000
 8000dcc:	20000010 	.word	0x20000010
 8000dd0:	431bde83 	.word	0x431bde83

08000dd4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000dd8:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	4a04      	ldr	r2, [pc, #16]	@ (8000df0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000dde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de2:	6093      	str	r3, [r2, #8]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40007000 	.word	0x40007000

08000df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e2fe      	b.n	8001404 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d075      	beq.n	8000efe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e12:	4b97      	ldr	r3, [pc, #604]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f003 030c 	and.w	r3, r3, #12
 8000e1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e1c:	4b94      	ldr	r3, [pc, #592]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	2b0c      	cmp	r3, #12
 8000e2a:	d102      	bne.n	8000e32 <HAL_RCC_OscConfig+0x3e>
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d002      	beq.n	8000e38 <HAL_RCC_OscConfig+0x44>
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d10b      	bne.n	8000e50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e38:	4b8d      	ldr	r3, [pc, #564]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d05b      	beq.n	8000efc <HAL_RCC_OscConfig+0x108>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d157      	bne.n	8000efc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e2d9      	b.n	8001404 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e58:	d106      	bne.n	8000e68 <HAL_RCC_OscConfig+0x74>
 8000e5a:	4b85      	ldr	r3, [pc, #532]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a84      	ldr	r2, [pc, #528]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	e01d      	b.n	8000ea4 <HAL_RCC_OscConfig+0xb0>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e70:	d10c      	bne.n	8000e8c <HAL_RCC_OscConfig+0x98>
 8000e72:	4b7f      	ldr	r3, [pc, #508]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a7e      	ldr	r2, [pc, #504]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	4b7c      	ldr	r3, [pc, #496]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a7b      	ldr	r2, [pc, #492]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	e00b      	b.n	8000ea4 <HAL_RCC_OscConfig+0xb0>
 8000e8c:	4b78      	ldr	r3, [pc, #480]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a77      	ldr	r2, [pc, #476]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	4b75      	ldr	r3, [pc, #468]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a74      	ldr	r2, [pc, #464]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d013      	beq.n	8000ed4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eac:	f7ff fc42 	bl	8000734 <HAL_GetTick>
 8000eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eb4:	f7ff fc3e 	bl	8000734 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b64      	cmp	r3, #100	@ 0x64
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e29e      	b.n	8001404 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ec6:	4b6a      	ldr	r3, [pc, #424]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f0      	beq.n	8000eb4 <HAL_RCC_OscConfig+0xc0>
 8000ed2:	e014      	b.n	8000efe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fc2e 	bl	8000734 <HAL_GetTick>
 8000ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000edc:	f7ff fc2a 	bl	8000734 <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b64      	cmp	r3, #100	@ 0x64
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e28a      	b.n	8001404 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000eee:	4b60      	ldr	r3, [pc, #384]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1f0      	bne.n	8000edc <HAL_RCC_OscConfig+0xe8>
 8000efa:	e000      	b.n	8000efe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d075      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f0a:	4b59      	ldr	r3, [pc, #356]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f003 030c 	and.w	r3, r3, #12
 8000f12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f14:	4b56      	ldr	r3, [pc, #344]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	2b0c      	cmp	r3, #12
 8000f22:	d102      	bne.n	8000f2a <HAL_RCC_OscConfig+0x136>
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d002      	beq.n	8000f30 <HAL_RCC_OscConfig+0x13c>
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d11f      	bne.n	8000f70 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f30:	4b4f      	ldr	r3, [pc, #316]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d005      	beq.n	8000f48 <HAL_RCC_OscConfig+0x154>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e25d      	b.n	8001404 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f48:	4b49      	ldr	r3, [pc, #292]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	061b      	lsls	r3, r3, #24
 8000f56:	4946      	ldr	r1, [pc, #280]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f5c:	4b45      	ldr	r3, [pc, #276]	@ (8001074 <HAL_RCC_OscConfig+0x280>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fb9b 	bl	800069c <HAL_InitTick>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d043      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e249      	b.n	8001404 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d023      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f78:	4b3d      	ldr	r3, [pc, #244]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a3c      	ldr	r2, [pc, #240]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000f7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f84:	f7ff fbd6 	bl	8000734 <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f8c:	f7ff fbd2 	bl	8000734 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e232      	b.n	8001404 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f9e:	4b34      	ldr	r3, [pc, #208]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f0      	beq.n	8000f8c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000faa:	4b31      	ldr	r3, [pc, #196]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	061b      	lsls	r3, r3, #24
 8000fb8:	492d      	ldr	r1, [pc, #180]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	604b      	str	r3, [r1, #4]
 8000fbe:	e01a      	b.n	8000ff6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a2a      	ldr	r2, [pc, #168]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000fc6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fbb2 	bl	8000734 <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fd4:	f7ff fbae 	bl	8000734 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e20e      	b.n	8001404 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fe6:	4b22      	ldr	r3, [pc, #136]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f0      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x1e0>
 8000ff2:	e000      	b.n	8000ff6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ff4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d041      	beq.n	8001086 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d01c      	beq.n	8001044 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800100a:	4b19      	ldr	r3, [pc, #100]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 800100c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001010:	4a17      	ldr	r2, [pc, #92]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800101a:	f7ff fb8b 	bl	8000734 <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001022:	f7ff fb87 	bl	8000734 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e1e7      	b.n	8001404 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001034:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8001036:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d0ef      	beq.n	8001022 <HAL_RCC_OscConfig+0x22e>
 8001042:	e020      	b.n	8001086 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001044:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 8001046:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800104a:	4a09      	ldr	r2, [pc, #36]	@ (8001070 <HAL_RCC_OscConfig+0x27c>)
 800104c:	f023 0301 	bic.w	r3, r3, #1
 8001050:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001054:	f7ff fb6e 	bl	8000734 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800105a:	e00d      	b.n	8001078 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800105c:	f7ff fb6a 	bl	8000734 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d906      	bls.n	8001078 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e1ca      	b.n	8001404 <HAL_RCC_OscConfig+0x610>
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000
 8001074:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001078:	4b8c      	ldr	r3, [pc, #560]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 800107a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1ea      	bne.n	800105c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 80a6 	beq.w	80011e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001098:	4b84      	ldr	r3, [pc, #528]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 800109a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <HAL_RCC_OscConfig+0x2b4>
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <HAL_RCC_OscConfig+0x2b6>
 80010a8:	2300      	movs	r3, #0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00d      	beq.n	80010ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	4b7f      	ldr	r3, [pc, #508]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b2:	4a7e      	ldr	r2, [pc, #504]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ba:	4b7c      	ldr	r3, [pc, #496]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 80010bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010c6:	2301      	movs	r3, #1
 80010c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ca:	4b79      	ldr	r3, [pc, #484]	@ (80012b0 <HAL_RCC_OscConfig+0x4bc>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d118      	bne.n	8001108 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010d6:	4b76      	ldr	r3, [pc, #472]	@ (80012b0 <HAL_RCC_OscConfig+0x4bc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a75      	ldr	r2, [pc, #468]	@ (80012b0 <HAL_RCC_OscConfig+0x4bc>)
 80010dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010e2:	f7ff fb27 	bl	8000734 <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ea:	f7ff fb23 	bl	8000734 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e183      	b.n	8001404 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010fc:	4b6c      	ldr	r3, [pc, #432]	@ (80012b0 <HAL_RCC_OscConfig+0x4bc>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0f0      	beq.n	80010ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d108      	bne.n	8001122 <HAL_RCC_OscConfig+0x32e>
 8001110:	4b66      	ldr	r3, [pc, #408]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 8001112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001116:	4a65      	ldr	r2, [pc, #404]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001120:	e024      	b.n	800116c <HAL_RCC_OscConfig+0x378>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	2b05      	cmp	r3, #5
 8001128:	d110      	bne.n	800114c <HAL_RCC_OscConfig+0x358>
 800112a:	4b60      	ldr	r3, [pc, #384]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 800112c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001130:	4a5e      	ldr	r2, [pc, #376]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 8001132:	f043 0304 	orr.w	r3, r3, #4
 8001136:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800113a:	4b5c      	ldr	r3, [pc, #368]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 800113c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001140:	4a5a      	ldr	r2, [pc, #360]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800114a:	e00f      	b.n	800116c <HAL_RCC_OscConfig+0x378>
 800114c:	4b57      	ldr	r3, [pc, #348]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 800114e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001152:	4a56      	ldr	r2, [pc, #344]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 8001154:	f023 0301 	bic.w	r3, r3, #1
 8001158:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800115c:	4b53      	ldr	r3, [pc, #332]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 800115e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001162:	4a52      	ldr	r2, [pc, #328]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 8001164:	f023 0304 	bic.w	r3, r3, #4
 8001168:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d016      	beq.n	80011a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001174:	f7ff fade 	bl	8000734 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800117a:	e00a      	b.n	8001192 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800117c:	f7ff fada 	bl	8000734 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800118a:	4293      	cmp	r3, r2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e138      	b.n	8001404 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001192:	4b46      	ldr	r3, [pc, #280]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 8001194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0ed      	beq.n	800117c <HAL_RCC_OscConfig+0x388>
 80011a0:	e015      	b.n	80011ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a2:	f7ff fac7 	bl	8000734 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011a8:	e00a      	b.n	80011c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011aa:	f7ff fac3 	bl	8000734 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e121      	b.n	8001404 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011c0:	4b3a      	ldr	r3, [pc, #232]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 80011c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1ed      	bne.n	80011aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80011ce:	7ffb      	ldrb	r3, [r7, #31]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d105      	bne.n	80011e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d4:	4b35      	ldr	r3, [pc, #212]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 80011d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d8:	4a34      	ldr	r2, [pc, #208]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 80011da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0320 	and.w	r3, r3, #32
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d03c      	beq.n	8001266 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d01c      	beq.n	800122e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011f4:	4b2d      	ldr	r3, [pc, #180]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 80011f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011fa:	4a2c      	ldr	r2, [pc, #176]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001204:	f7ff fa96 	bl	8000734 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800120c:	f7ff fa92 	bl	8000734 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e0f2      	b.n	8001404 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800121e:	4b23      	ldr	r3, [pc, #140]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 8001220:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0ef      	beq.n	800120c <HAL_RCC_OscConfig+0x418>
 800122c:	e01b      	b.n	8001266 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800122e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 8001230:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001234:	4a1d      	ldr	r2, [pc, #116]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 8001236:	f023 0301 	bic.w	r3, r3, #1
 800123a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123e:	f7ff fa79 	bl	8000734 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001246:	f7ff fa75 	bl	8000734 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e0d5      	b.n	8001404 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 800125a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1ef      	bne.n	8001246 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 80c9 	beq.w	8001402 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001270:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	2b0c      	cmp	r3, #12
 800127a:	f000 8083 	beq.w	8001384 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d15e      	bne.n	8001344 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a08      	ldr	r2, [pc, #32]	@ (80012ac <HAL_RCC_OscConfig+0x4b8>)
 800128c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001292:	f7ff fa4f 	bl	8000734 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001298:	e00c      	b.n	80012b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800129a:	f7ff fa4b 	bl	8000734 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d905      	bls.n	80012b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e0ab      	b.n	8001404 <HAL_RCC_OscConfig+0x610>
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012b4:	4b55      	ldr	r3, [pc, #340]	@ (800140c <HAL_RCC_OscConfig+0x618>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1ec      	bne.n	800129a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c0:	4b52      	ldr	r3, [pc, #328]	@ (800140c <HAL_RCC_OscConfig+0x618>)
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	4b52      	ldr	r3, [pc, #328]	@ (8001410 <HAL_RCC_OscConfig+0x61c>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6a11      	ldr	r1, [r2, #32]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80012d0:	3a01      	subs	r2, #1
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	4311      	orrs	r1, r2
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80012da:	0212      	lsls	r2, r2, #8
 80012dc:	4311      	orrs	r1, r2
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80012e2:	0852      	lsrs	r2, r2, #1
 80012e4:	3a01      	subs	r2, #1
 80012e6:	0552      	lsls	r2, r2, #21
 80012e8:	4311      	orrs	r1, r2
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80012ee:	0852      	lsrs	r2, r2, #1
 80012f0:	3a01      	subs	r2, #1
 80012f2:	0652      	lsls	r2, r2, #25
 80012f4:	4311      	orrs	r1, r2
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80012fa:	06d2      	lsls	r2, r2, #27
 80012fc:	430a      	orrs	r2, r1
 80012fe:	4943      	ldr	r1, [pc, #268]	@ (800140c <HAL_RCC_OscConfig+0x618>)
 8001300:	4313      	orrs	r3, r2
 8001302:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001304:	4b41      	ldr	r3, [pc, #260]	@ (800140c <HAL_RCC_OscConfig+0x618>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a40      	ldr	r2, [pc, #256]	@ (800140c <HAL_RCC_OscConfig+0x618>)
 800130a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800130e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001310:	4b3e      	ldr	r3, [pc, #248]	@ (800140c <HAL_RCC_OscConfig+0x618>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4a3d      	ldr	r2, [pc, #244]	@ (800140c <HAL_RCC_OscConfig+0x618>)
 8001316:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800131a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131c:	f7ff fa0a 	bl	8000734 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff fa06 	bl	8000734 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e066      	b.n	8001404 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001336:	4b35      	ldr	r3, [pc, #212]	@ (800140c <HAL_RCC_OscConfig+0x618>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0x530>
 8001342:	e05e      	b.n	8001402 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001344:	4b31      	ldr	r3, [pc, #196]	@ (800140c <HAL_RCC_OscConfig+0x618>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a30      	ldr	r2, [pc, #192]	@ (800140c <HAL_RCC_OscConfig+0x618>)
 800134a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800134e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff f9f0 	bl	8000734 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001358:	f7ff f9ec 	bl	8000734 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e04c      	b.n	8001404 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800136a:	4b28      	ldr	r3, [pc, #160]	@ (800140c <HAL_RCC_OscConfig+0x618>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001376:	4b25      	ldr	r3, [pc, #148]	@ (800140c <HAL_RCC_OscConfig+0x618>)
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	4924      	ldr	r1, [pc, #144]	@ (800140c <HAL_RCC_OscConfig+0x618>)
 800137c:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <HAL_RCC_OscConfig+0x620>)
 800137e:	4013      	ands	r3, r2
 8001380:	60cb      	str	r3, [r1, #12]
 8001382:	e03e      	b.n	8001402 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d101      	bne.n	8001390 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e039      	b.n	8001404 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001390:	4b1e      	ldr	r3, [pc, #120]	@ (800140c <HAL_RCC_OscConfig+0x618>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f003 0203 	and.w	r2, r3, #3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d12c      	bne.n	80013fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ae:	3b01      	subs	r3, #1
 80013b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d123      	bne.n	80013fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d11b      	bne.n	80013fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d113      	bne.n	80013fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e0:	085b      	lsrs	r3, r3, #1
 80013e2:	3b01      	subs	r3, #1
 80013e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d109      	bne.n	80013fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013f4:	085b      	lsrs	r3, r3, #1
 80013f6:	3b01      	subs	r3, #1
 80013f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d001      	beq.n	8001402 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3720      	adds	r7, #32
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40021000 	.word	0x40021000
 8001410:	019f800c 	.word	0x019f800c
 8001414:	feeefffc 	.word	0xfeeefffc

08001418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e11e      	b.n	800166e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001430:	4b91      	ldr	r3, [pc, #580]	@ (8001678 <HAL_RCC_ClockConfig+0x260>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 030f 	and.w	r3, r3, #15
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d910      	bls.n	8001460 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143e:	4b8e      	ldr	r3, [pc, #568]	@ (8001678 <HAL_RCC_ClockConfig+0x260>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 020f 	bic.w	r2, r3, #15
 8001446:	498c      	ldr	r1, [pc, #560]	@ (8001678 <HAL_RCC_ClockConfig+0x260>)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800144e:	4b8a      	ldr	r3, [pc, #552]	@ (8001678 <HAL_RCC_ClockConfig+0x260>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d001      	beq.n	8001460 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e106      	b.n	800166e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d073      	beq.n	8001554 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b03      	cmp	r3, #3
 8001472:	d129      	bne.n	80014c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001474:	4b81      	ldr	r3, [pc, #516]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e0f4      	b.n	800166e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001484:	f000 f966 	bl	8001754 <RCC_GetSysClockFreqFromPLLSource>
 8001488:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4a7c      	ldr	r2, [pc, #496]	@ (8001680 <HAL_RCC_ClockConfig+0x268>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d93f      	bls.n	8001512 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001492:	4b7a      	ldr	r3, [pc, #488]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d009      	beq.n	80014b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d033      	beq.n	8001512 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d12f      	bne.n	8001512 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80014b2:	4b72      	ldr	r3, [pc, #456]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014ba:	4a70      	ldr	r2, [pc, #448]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80014c2:	2380      	movs	r3, #128	@ 0x80
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	e024      	b.n	8001512 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d107      	bne.n	80014e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d0:	4b6a      	ldr	r3, [pc, #424]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d109      	bne.n	80014f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0c6      	b.n	800166e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e0:	4b66      	ldr	r3, [pc, #408]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0be      	b.n	800166e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80014f0:	f000 f8ce 	bl	8001690 <HAL_RCC_GetSysClockFreq>
 80014f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4a61      	ldr	r2, [pc, #388]	@ (8001680 <HAL_RCC_ClockConfig+0x268>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d909      	bls.n	8001512 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80014fe:	4b5f      	ldr	r3, [pc, #380]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001506:	4a5d      	ldr	r2, [pc, #372]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 8001508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800150c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800150e:	2380      	movs	r3, #128	@ 0x80
 8001510:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001512:	4b5a      	ldr	r3, [pc, #360]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f023 0203 	bic.w	r2, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4957      	ldr	r1, [pc, #348]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 8001520:	4313      	orrs	r3, r2
 8001522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001524:	f7ff f906 	bl	8000734 <HAL_GetTick>
 8001528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	e00a      	b.n	8001542 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800152c:	f7ff f902 	bl	8000734 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153a:	4293      	cmp	r3, r2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e095      	b.n	800166e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	4b4e      	ldr	r3, [pc, #312]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 020c 	and.w	r2, r3, #12
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	429a      	cmp	r2, r3
 8001552:	d1eb      	bne.n	800152c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d023      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800156c:	4b43      	ldr	r3, [pc, #268]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	4a42      	ldr	r2, [pc, #264]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 8001572:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001576:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	2b00      	cmp	r3, #0
 8001582:	d007      	beq.n	8001594 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001584:	4b3d      	ldr	r3, [pc, #244]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800158c:	4a3b      	ldr	r2, [pc, #236]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 800158e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001592:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001594:	4b39      	ldr	r3, [pc, #228]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	4936      	ldr	r1, [pc, #216]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	608b      	str	r3, [r1, #8]
 80015a6:	e008      	b.n	80015ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	2b80      	cmp	r3, #128	@ 0x80
 80015ac:	d105      	bne.n	80015ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80015ae:	4b33      	ldr	r3, [pc, #204]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	4a32      	ldr	r2, [pc, #200]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 80015b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80015b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001678 <HAL_RCC_ClockConfig+0x260>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d21d      	bcs.n	8001604 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001678 <HAL_RCC_ClockConfig+0x260>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 020f 	bic.w	r2, r3, #15
 80015d0:	4929      	ldr	r1, [pc, #164]	@ (8001678 <HAL_RCC_ClockConfig+0x260>)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015d8:	f7ff f8ac 	bl	8000734 <HAL_GetTick>
 80015dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e0:	f7ff f8a8 	bl	8000734 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e03b      	b.n	800166e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f6:	4b20      	ldr	r3, [pc, #128]	@ (8001678 <HAL_RCC_ClockConfig+0x260>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d1ed      	bne.n	80015e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d008      	beq.n	8001622 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001610:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	4917      	ldr	r1, [pc, #92]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 800161e:	4313      	orrs	r3, r2
 8001620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	d009      	beq.n	8001642 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800162e:	4b13      	ldr	r3, [pc, #76]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	490f      	ldr	r1, [pc, #60]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 800163e:	4313      	orrs	r3, r2
 8001640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001642:	f000 f825 	bl	8001690 <HAL_RCC_GetSysClockFreq>
 8001646:	4602      	mov	r2, r0
 8001648:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <HAL_RCC_ClockConfig+0x264>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	091b      	lsrs	r3, r3, #4
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	490c      	ldr	r1, [pc, #48]	@ (8001684 <HAL_RCC_ClockConfig+0x26c>)
 8001654:	5ccb      	ldrb	r3, [r1, r3]
 8001656:	f003 031f 	and.w	r3, r3, #31
 800165a:	fa22 f303 	lsr.w	r3, r2, r3
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <HAL_RCC_ClockConfig+0x270>)
 8001660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <HAL_RCC_ClockConfig+0x274>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff f818 	bl	800069c <HAL_InitTick>
 800166c:	4603      	mov	r3, r0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40022000 	.word	0x40022000
 800167c:	40021000 	.word	0x40021000
 8001680:	04c4b400 	.word	0x04c4b400
 8001684:	08001850 	.word	0x08001850
 8001688:	20000010 	.word	0x20000010
 800168c:	20000014 	.word	0x20000014

08001690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001696:	4b2c      	ldr	r3, [pc, #176]	@ (8001748 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d102      	bne.n	80016a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016a2:	4b2a      	ldr	r3, [pc, #168]	@ (800174c <HAL_RCC_GetSysClockFreq+0xbc>)
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	e047      	b.n	8001738 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80016a8:	4b27      	ldr	r3, [pc, #156]	@ (8001748 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 030c 	and.w	r3, r3, #12
 80016b0:	2b08      	cmp	r3, #8
 80016b2:	d102      	bne.n	80016ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016b4:	4b26      	ldr	r3, [pc, #152]	@ (8001750 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	e03e      	b.n	8001738 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80016ba:	4b23      	ldr	r3, [pc, #140]	@ (8001748 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b0c      	cmp	r3, #12
 80016c4:	d136      	bne.n	8001734 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016c6:	4b20      	ldr	r3, [pc, #128]	@ (8001748 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001748 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3301      	adds	r3, #1
 80016dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d10c      	bne.n	80016fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001750 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ec:	4a16      	ldr	r2, [pc, #88]	@ (8001748 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ee:	68d2      	ldr	r2, [r2, #12]
 80016f0:	0a12      	lsrs	r2, r2, #8
 80016f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80016f6:	fb02 f303 	mul.w	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
      break;
 80016fc:	e00c      	b.n	8001718 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016fe:	4a13      	ldr	r2, [pc, #76]	@ (800174c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	4a10      	ldr	r2, [pc, #64]	@ (8001748 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001708:	68d2      	ldr	r2, [r2, #12]
 800170a:	0a12      	lsrs	r2, r2, #8
 800170c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001710:	fb02 f303 	mul.w	r3, r2, r3
 8001714:	617b      	str	r3, [r7, #20]
      break;
 8001716:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001718:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <HAL_RCC_GetSysClockFreq+0xb8>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0e5b      	lsrs	r3, r3, #25
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	3301      	adds	r3, #1
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	e001      	b.n	8001738 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001738:	693b      	ldr	r3, [r7, #16]
}
 800173a:	4618      	mov	r0, r3
 800173c:	371c      	adds	r7, #28
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	00f42400 	.word	0x00f42400
 8001750:	007a1200 	.word	0x007a1200

08001754 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800175a:	4b1e      	ldr	r3, [pc, #120]	@ (80017d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001764:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	3301      	adds	r3, #1
 8001770:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	2b03      	cmp	r3, #3
 8001776:	d10c      	bne.n	8001792 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001778:	4a17      	ldr	r2, [pc, #92]	@ (80017d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001780:	4a14      	ldr	r2, [pc, #80]	@ (80017d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001782:	68d2      	ldr	r2, [r2, #12]
 8001784:	0a12      	lsrs	r2, r2, #8
 8001786:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800178a:	fb02 f303 	mul.w	r3, r2, r3
 800178e:	617b      	str	r3, [r7, #20]
    break;
 8001790:	e00c      	b.n	80017ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001792:	4a12      	ldr	r2, [pc, #72]	@ (80017dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	4a0e      	ldr	r2, [pc, #56]	@ (80017d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800179c:	68d2      	ldr	r2, [r2, #12]
 800179e:	0a12      	lsrs	r2, r2, #8
 80017a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017a4:	fb02 f303 	mul.w	r3, r2, r3
 80017a8:	617b      	str	r3, [r7, #20]
    break;
 80017aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017ac:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0e5b      	lsrs	r3, r3, #25
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	3301      	adds	r3, #1
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80017c6:	687b      	ldr	r3, [r7, #4]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	371c      	adds	r7, #28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40021000 	.word	0x40021000
 80017d8:	007a1200 	.word	0x007a1200
 80017dc:	00f42400 	.word	0x00f42400

080017e0 <memset>:
 80017e0:	4402      	add	r2, r0
 80017e2:	4603      	mov	r3, r0
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d100      	bne.n	80017ea <memset+0xa>
 80017e8:	4770      	bx	lr
 80017ea:	f803 1b01 	strb.w	r1, [r3], #1
 80017ee:	e7f9      	b.n	80017e4 <memset+0x4>

080017f0 <__libc_init_array>:
 80017f0:	b570      	push	{r4, r5, r6, lr}
 80017f2:	4d0d      	ldr	r5, [pc, #52]	@ (8001828 <__libc_init_array+0x38>)
 80017f4:	4c0d      	ldr	r4, [pc, #52]	@ (800182c <__libc_init_array+0x3c>)
 80017f6:	1b64      	subs	r4, r4, r5
 80017f8:	10a4      	asrs	r4, r4, #2
 80017fa:	2600      	movs	r6, #0
 80017fc:	42a6      	cmp	r6, r4
 80017fe:	d109      	bne.n	8001814 <__libc_init_array+0x24>
 8001800:	4d0b      	ldr	r5, [pc, #44]	@ (8001830 <__libc_init_array+0x40>)
 8001802:	4c0c      	ldr	r4, [pc, #48]	@ (8001834 <__libc_init_array+0x44>)
 8001804:	f000 f818 	bl	8001838 <_init>
 8001808:	1b64      	subs	r4, r4, r5
 800180a:	10a4      	asrs	r4, r4, #2
 800180c:	2600      	movs	r6, #0
 800180e:	42a6      	cmp	r6, r4
 8001810:	d105      	bne.n	800181e <__libc_init_array+0x2e>
 8001812:	bd70      	pop	{r4, r5, r6, pc}
 8001814:	f855 3b04 	ldr.w	r3, [r5], #4
 8001818:	4798      	blx	r3
 800181a:	3601      	adds	r6, #1
 800181c:	e7ee      	b.n	80017fc <__libc_init_array+0xc>
 800181e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001822:	4798      	blx	r3
 8001824:	3601      	adds	r6, #1
 8001826:	e7f2      	b.n	800180e <__libc_init_array+0x1e>
 8001828:	08001860 	.word	0x08001860
 800182c:	08001860 	.word	0x08001860
 8001830:	08001860 	.word	0x08001860
 8001834:	08001864 	.word	0x08001864

08001838 <_init>:
 8001838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183a:	bf00      	nop
 800183c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800183e:	bc08      	pop	{r3}
 8001840:	469e      	mov	lr, r3
 8001842:	4770      	bx	lr

08001844 <_fini>:
 8001844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001846:	bf00      	nop
 8001848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800184a:	bc08      	pop	{r3}
 800184c:	469e      	mov	lr, r3
 800184e:	4770      	bx	lr
