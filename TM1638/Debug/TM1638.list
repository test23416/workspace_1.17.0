
TM1638.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020c0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002298  08002298  00003298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022a8  080022a8  00004020  2**0
                  CONTENTS
  4 .ARM          00000000  080022a8  080022a8  00004020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022a8  080022a8  00004020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022a8  080022a8  000032a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022ac  080022ac  000032ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  080022b0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000020  080022d0  00004020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  080022d0  000040dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004cda  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000120e  00000000  00000000  00008d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  00009f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000474  00000000  00000000  0000a548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023224  00000000  00000000  0000a9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000635f  00000000  00000000  0002dbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000defa7  00000000  00000000  00033f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112ee6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016b8  00000000  00000000  00112f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001145e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002280 	.word	0x08002280

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08002280 	.word	0x08002280

08000218 <tm1638_SendData>:
    GPIO_TypeDef *stb_port;
    uint16_t clk_pin, dio_pin, stb_pin;
} TM1638;

void tm1638_SendData(TM1638 *tm, uint8_t Data)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	460b      	mov	r3, r1
 8000222:	70fb      	strb	r3, [r7, #3]
    uint8_t ByteData[8] = {0};
 8000224:	2300      	movs	r3, #0
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	2300      	movs	r3, #0
 800022a:	613b      	str	r3, [r7, #16]
    // convert data to bit array
    for (uint8_t j = 0; j < 8; j++)
 800022c:	2300      	movs	r3, #0
 800022e:	75fb      	strb	r3, [r7, #23]
 8000230:	e012      	b.n	8000258 <tm1638_SendData+0x40>
    {
        ByteData[j] = (Data & (0x01 << j)) && 1;
 8000232:	78fa      	ldrb	r2, [r7, #3]
 8000234:	7dfb      	ldrb	r3, [r7, #23]
 8000236:	fa42 f303 	asr.w	r3, r2, r3
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	2b00      	cmp	r3, #0
 8000240:	bf14      	ite	ne
 8000242:	2301      	movne	r3, #1
 8000244:	2300      	moveq	r3, #0
 8000246:	b2da      	uxtb	r2, r3
 8000248:	7dfb      	ldrb	r3, [r7, #23]
 800024a:	3318      	adds	r3, #24
 800024c:	443b      	add	r3, r7
 800024e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t j = 0; j < 8; j++)
 8000252:	7dfb      	ldrb	r3, [r7, #23]
 8000254:	3301      	adds	r3, #1
 8000256:	75fb      	strb	r3, [r7, #23]
 8000258:	7dfb      	ldrb	r3, [r7, #23]
 800025a:	2b07      	cmp	r3, #7
 800025c:	d9e9      	bls.n	8000232 <tm1638_SendData+0x1a>
    }
    // send bit array
    for (int8_t j = 0; j < 8; j++)
 800025e:	2300      	movs	r3, #0
 8000260:	75bb      	strb	r3, [r7, #22]
 8000262:	e02e      	b.n	80002c2 <tm1638_SendData+0xaa>
    {
    	HAL_GPIO_WritePin(tm->clk_port, tm->clk_pin, GPIO_PIN_RESET);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	6818      	ldr	r0, [r3, #0]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	899b      	ldrh	r3, [r3, #12]
 800026c:	2200      	movs	r2, #0
 800026e:	4619      	mov	r1, r3
 8000270:	f001 fa28 	bl	80016c4 <HAL_GPIO_WritePin>
        if (ByteData[j] == GPIO_PIN_SET)
 8000274:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000278:	3318      	adds	r3, #24
 800027a:	443b      	add	r3, r7
 800027c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d108      	bne.n	8000296 <tm1638_SendData+0x7e>
        {
        	HAL_GPIO_WritePin(tm->dio_port, tm->dio_pin, GPIO_PIN_SET);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	6858      	ldr	r0, [r3, #4]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	89db      	ldrh	r3, [r3, #14]
 800028c:	2201      	movs	r2, #1
 800028e:	4619      	mov	r1, r3
 8000290:	f001 fa18 	bl	80016c4 <HAL_GPIO_WritePin>
 8000294:	e007      	b.n	80002a6 <tm1638_SendData+0x8e>
        }
        else
        {
        	HAL_GPIO_WritePin(tm->dio_port, tm->dio_pin, GPIO_PIN_RESET);
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	6858      	ldr	r0, [r3, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	89db      	ldrh	r3, [r3, #14]
 800029e:	2200      	movs	r2, #0
 80002a0:	4619      	mov	r1, r3
 80002a2:	f001 fa0f 	bl	80016c4 <HAL_GPIO_WritePin>
        }
        HAL_GPIO_WritePin(tm->clk_port, tm->clk_pin, GPIO_PIN_SET);
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	6818      	ldr	r0, [r3, #0]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	899b      	ldrh	r3, [r3, #12]
 80002ae:	2201      	movs	r2, #1
 80002b0:	4619      	mov	r1, r3
 80002b2:	f001 fa07 	bl	80016c4 <HAL_GPIO_WritePin>
    for (int8_t j = 0; j < 8; j++)
 80002b6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	3301      	adds	r3, #1
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	75bb      	strb	r3, [r7, #22]
 80002c2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80002c6:	2b07      	cmp	r3, #7
 80002c8:	ddcc      	ble.n	8000264 <tm1638_SendData+0x4c>
    }
}
 80002ca:	bf00      	nop
 80002cc:	bf00      	nop
 80002ce:	3718      	adds	r7, #24
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <tm1638_SendCommand>:
void tm1638_SendCommand(TM1638 *tm, uint8_t Data){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	460b      	mov	r3, r1
 80002de:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_SET);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	6898      	ldr	r0, [r3, #8]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	8a1b      	ldrh	r3, [r3, #16]
 80002e8:	2201      	movs	r2, #1
 80002ea:	4619      	mov	r1, r3
 80002ec:	f001 f9ea 	bl	80016c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_RESET);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6898      	ldr	r0, [r3, #8]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	8a1b      	ldrh	r3, [r3, #16]
 80002f8:	2200      	movs	r2, #0
 80002fa:	4619      	mov	r1, r3
 80002fc:	f001 f9e2 	bl	80016c4 <HAL_GPIO_WritePin>
	tm1638_SendData(tm, Data);
 8000300:	78fb      	ldrb	r3, [r7, #3]
 8000302:	4619      	mov	r1, r3
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f7ff ff87 	bl	8000218 <tm1638_SendData>
	HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_SET);
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	6898      	ldr	r0, [r3, #8]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	8a1b      	ldrh	r3, [r3, #16]
 8000312:	2201      	movs	r2, #1
 8000314:	4619      	mov	r1, r3
 8000316:	f001 f9d5 	bl	80016c4 <HAL_GPIO_WritePin>
}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}

08000322 <tm1638_SendAddress>:
void tm1638_SendAddress(TM1638 *tm, uint8_t Data, uint8_t address){
 8000322:	b580      	push	{r7, lr}
 8000324:	b082      	sub	sp, #8
 8000326:	af00      	add	r7, sp, #0
 8000328:	6078      	str	r0, [r7, #4]
 800032a:	460b      	mov	r3, r1
 800032c:	70fb      	strb	r3, [r7, #3]
 800032e:	4613      	mov	r3, r2
 8000330:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_SET);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	6898      	ldr	r0, [r3, #8]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	8a1b      	ldrh	r3, [r3, #16]
 800033a:	2201      	movs	r2, #1
 800033c:	4619      	mov	r1, r3
 800033e:	f001 f9c1 	bl	80016c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_RESET);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	6898      	ldr	r0, [r3, #8]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	8a1b      	ldrh	r3, [r3, #16]
 800034a:	2200      	movs	r2, #0
 800034c:	4619      	mov	r1, r3
 800034e:	f001 f9b9 	bl	80016c4 <HAL_GPIO_WritePin>
	tm1638_SendData(tm, address);
 8000352:	78bb      	ldrb	r3, [r7, #2]
 8000354:	4619      	mov	r1, r3
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	f7ff ff5e 	bl	8000218 <tm1638_SendData>
	tm1638_SendData(tm, Data);
 800035c:	78fb      	ldrb	r3, [r7, #3]
 800035e:	4619      	mov	r1, r3
 8000360:	6878      	ldr	r0, [r7, #4]
 8000362:	f7ff ff59 	bl	8000218 <tm1638_SendData>
	HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_SET);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	6898      	ldr	r0, [r3, #8]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	8a1b      	ldrh	r3, [r3, #16]
 800036e:	2201      	movs	r2, #1
 8000370:	4619      	mov	r1, r3
 8000372:	f001 f9a7 	bl	80016c4 <HAL_GPIO_WritePin>
}
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}

0800037e <tm1638_segInit>:

//something else

void tm1638_segInit(TM1638 *tm){
 800037e:	b580      	push	{r7, lr}
 8000380:	b082      	sub	sp, #8
 8000382:	af00      	add	r7, sp, #0
 8000384:	6078      	str	r0, [r7, #4]
	tm1638_SendCommand(tm, DATA_SET);
 8000386:	2144      	movs	r1, #68	@ 0x44
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	f7ff ffa3 	bl	80002d4 <tm1638_SendCommand>
	tm1638_SendAddress(tm, 0x00, 0xC8);
 800038e:	22c8      	movs	r2, #200	@ 0xc8
 8000390:	2100      	movs	r1, #0
 8000392:	6878      	ldr	r0, [r7, #4]
 8000394:	f7ff ffc5 	bl	8000322 <tm1638_SendAddress>
	tm1638_SendAddress(tm, 0x00, 0xC9);
 8000398:	22c9      	movs	r2, #201	@ 0xc9
 800039a:	2100      	movs	r1, #0
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f7ff ffc0 	bl	8000322 <tm1638_SendAddress>
	tm1638_SendAddress(tm, 0x00, 0xCA);
 80003a2:	22ca      	movs	r2, #202	@ 0xca
 80003a4:	2100      	movs	r1, #0
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	f7ff ffbb 	bl	8000322 <tm1638_SendAddress>
	tm1638_SendAddress(tm, 0x00, 0xCB);
 80003ac:	22cb      	movs	r2, #203	@ 0xcb
 80003ae:	2100      	movs	r1, #0
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ffb6 	bl	8000322 <tm1638_SendAddress>
	tm1638_SendAddress(tm, 0x00, 0xCC);
 80003b6:	22cc      	movs	r2, #204	@ 0xcc
 80003b8:	2100      	movs	r1, #0
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f7ff ffb1 	bl	8000322 <tm1638_SendAddress>
	tm1638_SendAddress(tm, 0x00, 0xCD);
 80003c0:	22cd      	movs	r2, #205	@ 0xcd
 80003c2:	2100      	movs	r1, #0
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff ffac 	bl	8000322 <tm1638_SendAddress>
	tm1638_SendAddress(tm, 0x00, 0xCE);
 80003ca:	22ce      	movs	r2, #206	@ 0xce
 80003cc:	2100      	movs	r1, #0
 80003ce:	6878      	ldr	r0, [r7, #4]
 80003d0:	f7ff ffa7 	bl	8000322 <tm1638_SendAddress>
	tm1638_SendAddress(tm, 0x00, 0xCF);
 80003d4:	22cf      	movs	r2, #207	@ 0xcf
 80003d6:	2100      	movs	r1, #0
 80003d8:	6878      	ldr	r0, [r7, #4]
 80003da:	f7ff ffa2 	bl	8000322 <tm1638_SendAddress>
	tm1638_SendCommand(tm, 0x80);
 80003de:	2180      	movs	r1, #128	@ 0x80
 80003e0:	6878      	ldr	r0, [r7, #4]
 80003e2:	f7ff ff77 	bl	80002d4 <tm1638_SendCommand>
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <tm1638_display>:
void tm1638_display(TM1638 *tm, uint8_t *numbers){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	6039      	str	r1, [r7, #0]
	tm1638_SendCommand(tm, DATA_SET);
 80003fa:	2144      	movs	r1, #68	@ 0x44
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f7ff ff69 	bl	80002d4 <tm1638_SendCommand>
	tm1638_SendAddress(tm, code[numbers[3]], 0xC0);
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	3303      	adds	r3, #3
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	461a      	mov	r2, r3
 800040a:	4b21      	ldr	r3, [pc, #132]	@ (8000490 <tm1638_display+0xa0>)
 800040c:	5c9b      	ldrb	r3, [r3, r2]
 800040e:	22c0      	movs	r2, #192	@ 0xc0
 8000410:	4619      	mov	r1, r3
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	f7ff ff85 	bl	8000322 <tm1638_SendAddress>
	tm1638_SendAddress(tm, 0x00, 0xC1);
 8000418:	22c1      	movs	r2, #193	@ 0xc1
 800041a:	2100      	movs	r1, #0
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	f7ff ff80 	bl	8000322 <tm1638_SendAddress>
	tm1638_SendAddress(tm, code[numbers[2]], 0xC2);
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	3302      	adds	r3, #2
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	461a      	mov	r2, r3
 800042a:	4b19      	ldr	r3, [pc, #100]	@ (8000490 <tm1638_display+0xa0>)
 800042c:	5c9b      	ldrb	r3, [r3, r2]
 800042e:	22c2      	movs	r2, #194	@ 0xc2
 8000430:	4619      	mov	r1, r3
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f7ff ff75 	bl	8000322 <tm1638_SendAddress>
	tm1638_SendAddress(tm, 0x00, 0xC3);
 8000438:	22c3      	movs	r2, #195	@ 0xc3
 800043a:	2100      	movs	r1, #0
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f7ff ff70 	bl	8000322 <tm1638_SendAddress>
	tm1638_SendAddress(tm, code[numbers[1]], 0xC4);
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	3301      	adds	r3, #1
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	461a      	mov	r2, r3
 800044a:	4b11      	ldr	r3, [pc, #68]	@ (8000490 <tm1638_display+0xa0>)
 800044c:	5c9b      	ldrb	r3, [r3, r2]
 800044e:	22c4      	movs	r2, #196	@ 0xc4
 8000450:	4619      	mov	r1, r3
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f7ff ff65 	bl	8000322 <tm1638_SendAddress>
	tm1638_SendAddress(tm, 0x00, 0xC5);
 8000458:	22c5      	movs	r2, #197	@ 0xc5
 800045a:	2100      	movs	r1, #0
 800045c:	6878      	ldr	r0, [r7, #4]
 800045e:	f7ff ff60 	bl	8000322 <tm1638_SendAddress>
	tm1638_SendAddress(tm, code[numbers[0]], 0xC6);
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	461a      	mov	r2, r3
 8000468:	4b09      	ldr	r3, [pc, #36]	@ (8000490 <tm1638_display+0xa0>)
 800046a:	5c9b      	ldrb	r3, [r3, r2]
 800046c:	22c6      	movs	r2, #198	@ 0xc6
 800046e:	4619      	mov	r1, r3
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f7ff ff56 	bl	8000322 <tm1638_SendAddress>
	tm1638_SendAddress(tm, 0x00, 0xC7);
 8000476:	22c7      	movs	r2, #199	@ 0xc7
 8000478:	2100      	movs	r1, #0
 800047a:	6878      	ldr	r0, [r7, #4]
 800047c:	f7ff ff51 	bl	8000322 <tm1638_SendAddress>
	tm1638_SendCommand(tm, 0x8B);
 8000480:	218b      	movs	r1, #139	@ 0x8b
 8000482:	6878      	ldr	r0, [r7, #4]
 8000484:	f7ff ff26 	bl	80002d4 <tm1638_SendCommand>
}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000000 	.word	0x20000000

08000494 <tm1638_ReadKey>:
//Read key function
int tm1638_ReadKey(TM1638 *tm){
 8000494:	b580      	push	{r7, lr}
 8000496:	b0b4      	sub	sp, #208	@ 0xd0
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]
 80004aa:	611a      	str	r2, [r3, #16]
	int a[32] = {0,0,0};
 80004ac:	f107 0308 	add.w	r3, r7, #8
 80004b0:	2280      	movs	r2, #128	@ 0x80
 80004b2:	2100      	movs	r1, #0
 80004b4:	4618      	mov	r0, r3
 80004b6:	f001 feb7 	bl	8002228 <memset>
	HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_SET);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6898      	ldr	r0, [r3, #8]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	8a1b      	ldrh	r3, [r3, #16]
 80004c2:	2201      	movs	r2, #1
 80004c4:	4619      	mov	r1, r3
 80004c6:	f001 f8fd 	bl	80016c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_RESET);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	6898      	ldr	r0, [r3, #8]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	8a1b      	ldrh	r3, [r3, #16]
 80004d2:	2200      	movs	r2, #0
 80004d4:	4619      	mov	r1, r3
 80004d6:	f001 f8f5 	bl	80016c4 <HAL_GPIO_WritePin>
	tm1638_SendData(tm, DATA_READ);
 80004da:	2142      	movs	r1, #66	@ 0x42
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f7ff fe9b 	bl	8000218 <tm1638_SendData>

	int key = -1;
 80004e2:	f04f 33ff 	mov.w	r3, #4294967295
 80004e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

  GPIO_InitStruct.Pin = tm->dio_pin;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	89db      	ldrh	r3, [r3, #14]
 80004ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f2:	2300      	movs	r3, #0
 80004f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HAL_GPIO_Init(tm->dio_port, &GPIO_InitStruct);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8000500:	4611      	mov	r1, r2
 8000502:	4618      	mov	r0, r3
 8000504:	f000 ff44 	bl	8001390 <HAL_GPIO_Init>
	//pause for more than 1 us
  for(int i=0;i<4;++i){
 8000508:	2300      	movs	r3, #0
 800050a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800050e:	e03f      	b.n	8000590 <tm1638_ReadKey+0xfc>
  	HAL_GPIO_WritePin(tm->clk_port, tm->clk_pin, GPIO_PIN_SET);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	6818      	ldr	r0, [r3, #0]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	899b      	ldrh	r3, [r3, #12]
 8000518:	2201      	movs	r2, #1
 800051a:	4619      	mov	r1, r3
 800051c:	f001 f8d2 	bl	80016c4 <HAL_GPIO_WritePin>
  	for(int j=0;j<8;++j){
 8000520:	2300      	movs	r3, #0
 8000522:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000526:	e02a      	b.n	800057e <tm1638_ReadKey+0xea>
  		HAL_GPIO_WritePin(tm->clk_port, tm->clk_pin, GPIO_PIN_SET);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	6818      	ldr	r0, [r3, #0]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	899b      	ldrh	r3, [r3, #12]
 8000530:	2201      	movs	r2, #1
 8000532:	4619      	mov	r1, r3
 8000534:	f001 f8c6 	bl	80016c4 <HAL_GPIO_WritePin>
  		a[i * 8 + j] = HAL_GPIO_ReadPin(tm->dio_port, tm->dio_pin);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	685a      	ldr	r2, [r3, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	89db      	ldrh	r3, [r3, #14]
 8000540:	4619      	mov	r1, r3
 8000542:	4610      	mov	r0, r2
 8000544:	f001 f8a6 	bl	8001694 <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	4619      	mov	r1, r3
 800054c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000550:	00da      	lsls	r2, r3, #3
 8000552:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000556:	4413      	add	r3, r2
 8000558:	460a      	mov	r2, r1
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	33d0      	adds	r3, #208	@ 0xd0
 800055e:	443b      	add	r3, r7
 8000560:	f843 2cc8 	str.w	r2, [r3, #-200]
  		HAL_GPIO_WritePin(tm->clk_port, tm->clk_pin, GPIO_PIN_RESET);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	6818      	ldr	r0, [r3, #0]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	899b      	ldrh	r3, [r3, #12]
 800056c:	2200      	movs	r2, #0
 800056e:	4619      	mov	r1, r3
 8000570:	f001 f8a8 	bl	80016c4 <HAL_GPIO_WritePin>
  	for(int j=0;j<8;++j){
 8000574:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000578:	3301      	adds	r3, #1
 800057a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800057e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000582:	2b07      	cmp	r3, #7
 8000584:	ddd0      	ble.n	8000528 <tm1638_ReadKey+0x94>
  for(int i=0;i<4;++i){
 8000586:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800058a:	3301      	adds	r3, #1
 800058c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000590:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000594:	2b03      	cmp	r3, #3
 8000596:	ddbb      	ble.n	8000510 <tm1638_ReadKey+0x7c>
  	}
  }
	HAL_GPIO_WritePin(tm->clk_port, tm->clk_pin, GPIO_PIN_SET);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	6818      	ldr	r0, [r3, #0]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	899b      	ldrh	r3, [r3, #12]
 80005a0:	2201      	movs	r2, #1
 80005a2:	4619      	mov	r1, r3
 80005a4:	f001 f88e 	bl	80016c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_SET);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6898      	ldr	r0, [r3, #8]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	8a1b      	ldrh	r3, [r3, #16]
 80005b0:	2201      	movs	r2, #1
 80005b2:	4619      	mov	r1, r3
 80005b4:	f001 f886 	bl	80016c4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(tm->stb_port, tm->stb_pin, GPIO_PIN_SET);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6898      	ldr	r0, [r3, #8]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	8a1b      	ldrh	r3, [r3, #16]
 80005c0:	2201      	movs	r2, #1
 80005c2:	4619      	mov	r1, r3
 80005c4:	f001 f87e 	bl	80016c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HAL_GPIO_Init(tm->dio_port, &GPIO_InitStruct);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80005d6:	4611      	mov	r1, r2
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fed9 	bl	8001390 <HAL_GPIO_Init>

	for(int k=0;k<4;k++){
 80005de:	2300      	movs	r3, #0
 80005e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80005e4:	e04a      	b.n	800067c <tm1638_ReadKey+0x1e8>
		if(a[k*8+1]!=previous_numbers[k]){
 80005e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80005ea:	00db      	lsls	r3, r3, #3
 80005ec:	3301      	adds	r3, #1
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	33d0      	adds	r3, #208	@ 0xd0
 80005f2:	443b      	add	r3, r7
 80005f4:	f853 2cc8 	ldr.w	r2, [r3, #-200]
 80005f8:	49cd      	ldr	r1, [pc, #820]	@ (8000930 <tm1638_ReadKey+0x49c>)
 80005fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80005fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000602:	429a      	cmp	r2, r3
 8000604:	d02f      	beq.n	8000666 <tm1638_ReadKey+0x1d2>
			counter_numbers[k]++;
 8000606:	4acb      	ldr	r2, [pc, #812]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 8000608:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800060c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000610:	1c5a      	adds	r2, r3, #1
 8000612:	49c8      	ldr	r1, [pc, #800]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 8000614:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(counter_numbers[k] == 10){
 800061c:	4ac5      	ldr	r2, [pc, #788]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 800061e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000626:	2b0a      	cmp	r3, #10
 8000628:	d123      	bne.n	8000672 <tm1638_ReadKey+0x1de>
				previous_numbers[k] = a[k*8+1];
 800062a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	3301      	adds	r3, #1
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	33d0      	adds	r3, #208	@ 0xd0
 8000636:	443b      	add	r3, r7
 8000638:	f853 2cc8 	ldr.w	r2, [r3, #-200]
 800063c:	49bc      	ldr	r1, [pc, #752]	@ (8000930 <tm1638_ReadKey+0x49c>)
 800063e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(a[k*8+1])key=k;
 8000646:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800064a:	00db      	lsls	r3, r3, #3
 800064c:	3301      	adds	r3, #1
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	33d0      	adds	r3, #208	@ 0xd0
 8000652:	443b      	add	r3, r7
 8000654:	f853 3cc8 	ldr.w	r3, [r3, #-200]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00a      	beq.n	8000672 <tm1638_ReadKey+0x1de>
 800065c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000660:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000664:	e005      	b.n	8000672 <tm1638_ReadKey+0x1de>
			}
		}else counter_numbers[k]=0;
 8000666:	4ab3      	ldr	r2, [pc, #716]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 8000668:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800066c:	2100      	movs	r1, #0
 800066e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int k=0;k<4;k++){
 8000672:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000676:	3301      	adds	r3, #1
 8000678:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800067c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000680:	2b03      	cmp	r3, #3
 8000682:	ddb0      	ble.n	80005e6 <tm1638_ReadKey+0x152>
	}
	for(int k=0;k<4;k++){
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800068a:	e04d      	b.n	8000728 <tm1638_ReadKey+0x294>
		if(a[k*8+5]!=previous_numbers[k]){
 800068c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	3305      	adds	r3, #5
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	33d0      	adds	r3, #208	@ 0xd0
 8000698:	443b      	add	r3, r7
 800069a:	f853 2cc8 	ldr.w	r2, [r3, #-200]
 800069e:	49a4      	ldr	r1, [pc, #656]	@ (8000930 <tm1638_ReadKey+0x49c>)
 80006a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80006a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d031      	beq.n	8000710 <tm1638_ReadKey+0x27c>
			counter_numbers[k+4]++;
 80006ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80006b0:	3304      	adds	r3, #4
 80006b2:	4aa0      	ldr	r2, [pc, #640]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 80006b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006b8:	3201      	adds	r2, #1
 80006ba:	499e      	ldr	r1, [pc, #632]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 80006bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(counter_numbers[k+4] == 10){
 80006c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80006c4:	3304      	adds	r3, #4
 80006c6:	4a9b      	ldr	r2, [pc, #620]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 80006c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006cc:	2b0a      	cmp	r3, #10
 80006ce:	d126      	bne.n	800071e <tm1638_ReadKey+0x28a>
				previous_numbers[k+4] = a[k*8+5];
 80006d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	3305      	adds	r3, #5
 80006d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80006dc:	3204      	adds	r2, #4
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	33d0      	adds	r3, #208	@ 0xd0
 80006e2:	443b      	add	r3, r7
 80006e4:	f853 3cc8 	ldr.w	r3, [r3, #-200]
 80006e8:	4991      	ldr	r1, [pc, #580]	@ (8000930 <tm1638_ReadKey+0x49c>)
 80006ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
					if(a[k*8+5])key=k+4;
 80006ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	3305      	adds	r3, #5
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	33d0      	adds	r3, #208	@ 0xd0
 80006fa:	443b      	add	r3, r7
 80006fc:	f853 3cc8 	ldr.w	r3, [r3, #-200]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d00c      	beq.n	800071e <tm1638_ReadKey+0x28a>
 8000704:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000708:	3304      	adds	r3, #4
 800070a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800070e:	e006      	b.n	800071e <tm1638_ReadKey+0x28a>
			}
		}else counter_numbers[k+4]=0;
 8000710:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000714:	3304      	adds	r3, #4
 8000716:	4a87      	ldr	r2, [pc, #540]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 8000718:	2100      	movs	r1, #0
 800071a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int k=0;k<4;k++){
 800071e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000722:	3301      	adds	r3, #1
 8000724:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000728:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800072c:	2b03      	cmp	r3, #3
 800072e:	ddad      	ble.n	800068c <tm1638_ReadKey+0x1f8>
	}
	//***************************************
	for(int row=3 ;row<5;row++){
 8000730:	2303      	movs	r3, #3
 8000732:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000736:	e0c9      	b.n	80008cc <tm1638_ReadKey+0x438>
		set_keyboard_row(row);
 8000738:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 800073c:	f000 f9c4 	bl	8000ac8 <set_keyboard_row>
  	int a = HAL_GPIO_ReadPin(KC0_GPIO_Port, KC0_Pin);
 8000740:	2108      	movs	r1, #8
 8000742:	487d      	ldr	r0, [pc, #500]	@ (8000938 <tm1638_ReadKey+0x4a4>)
 8000744:	f000 ffa6 	bl	8001694 <HAL_GPIO_ReadPin>
 8000748:	4603      	mov	r3, r0
 800074a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  	int b = HAL_GPIO_ReadPin(KC1_GPIO_Port, KC1_Pin);
 800074e:	2140      	movs	r1, #64	@ 0x40
 8000750:	4879      	ldr	r0, [pc, #484]	@ (8000938 <tm1638_ReadKey+0x4a4>)
 8000752:	f000 ff9f 	bl	8001694 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  	int c = HAL_GPIO_ReadPin(KC2_GPIO_Port, KC2_Pin);
 800075c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000760:	4876      	ldr	r0, [pc, #472]	@ (800093c <tm1638_ReadKey+0x4a8>)
 8000762:	f000 ff97 	bl	8001694 <HAL_GPIO_ReadPin>
 8000766:	4603      	mov	r3, r0
 8000768:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  	int aa = row*3+1;
 800076c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8000770:	4613      	mov	r3, r2
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	4413      	add	r3, r2
 8000776:	3301      	adds	r3, #1
 8000778:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  	int bb = row*3+2;
 800077c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	3302      	adds	r3, #2
 8000788:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  	int cc = row*3+3;
 800078c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000790:	1c5a      	adds	r2, r3, #1
 8000792:	4613      	mov	r3, r2
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	4413      	add	r3, r2
 8000798:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  	if(a != previous_numbers[aa]){
 800079c:	4a64      	ldr	r2, [pc, #400]	@ (8000930 <tm1638_ReadKey+0x49c>)
 800079e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80007a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d021      	beq.n	80007f2 <tm1638_ReadKey+0x35e>
  		counter_numbers[aa]+=1;
 80007ae:	4a61      	ldr	r2, [pc, #388]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 80007b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80007b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	495e      	ldr	r1, [pc, #376]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 80007bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80007c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		if(counter_numbers[aa] == 10){
 80007c4:	4a5b      	ldr	r2, [pc, #364]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 80007c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80007ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ce:	2b0a      	cmp	r3, #10
 80007d0:	d115      	bne.n	80007fe <tm1638_ReadKey+0x36a>
  			previous_numbers[aa] = a;
 80007d2:	4957      	ldr	r1, [pc, #348]	@ (8000930 <tm1638_ReadKey+0x49c>)
 80007d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80007d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80007dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  				if(a)key= aa;
 80007e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d00a      	beq.n	80007fe <tm1638_ReadKey+0x36a>
 80007e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80007ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80007f0:	e005      	b.n	80007fe <tm1638_ReadKey+0x36a>
  		}
  	}else counter_numbers[aa]=0;
 80007f2:	4a50      	ldr	r2, [pc, #320]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 80007f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80007f8:	2100      	movs	r1, #0
 80007fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

  	if(b != previous_numbers[bb]){
 80007fe:	4a4c      	ldr	r2, [pc, #304]	@ (8000930 <tm1638_ReadKey+0x49c>)
 8000800:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000808:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800080c:	429a      	cmp	r2, r3
 800080e:	d021      	beq.n	8000854 <tm1638_ReadKey+0x3c0>
  		counter_numbers[bb]+=1;
 8000810:	4a48      	ldr	r2, [pc, #288]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 8000812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	4945      	ldr	r1, [pc, #276]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 800081e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		if(counter_numbers[bb] == 10){
 8000826:	4a43      	ldr	r2, [pc, #268]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 8000828:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800082c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000830:	2b0a      	cmp	r3, #10
 8000832:	d115      	bne.n	8000860 <tm1638_ReadKey+0x3cc>
  			previous_numbers[bb] = b;
 8000834:	493e      	ldr	r1, [pc, #248]	@ (8000930 <tm1638_ReadKey+0x49c>)
 8000836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800083a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800083e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  				if(b)key = bb;
 8000842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000846:	2b00      	cmp	r3, #0
 8000848:	d00a      	beq.n	8000860 <tm1638_ReadKey+0x3cc>
 800084a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800084e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000852:	e005      	b.n	8000860 <tm1638_ReadKey+0x3cc>
  		}
  	}else counter_numbers[bb]=0;
 8000854:	4a37      	ldr	r2, [pc, #220]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 8000856:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800085a:	2100      	movs	r1, #0
 800085c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

  	if(c != previous_numbers[cc]){
 8000860:	4a33      	ldr	r2, [pc, #204]	@ (8000930 <tm1638_ReadKey+0x49c>)
 8000862:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800086a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800086e:	429a      	cmp	r2, r3
 8000870:	d021      	beq.n	80008b6 <tm1638_ReadKey+0x422>
  		counter_numbers[cc]+=1;
 8000872:	4a30      	ldr	r2, [pc, #192]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 8000874:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800087c:	1c5a      	adds	r2, r3, #1
 800087e:	492d      	ldr	r1, [pc, #180]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 8000880:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		if(counter_numbers[cc] == 10){
 8000888:	4a2a      	ldr	r2, [pc, #168]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 800088a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800088e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000892:	2b0a      	cmp	r3, #10
 8000894:	d115      	bne.n	80008c2 <tm1638_ReadKey+0x42e>
  			previous_numbers[cc] = c;
 8000896:	4926      	ldr	r1, [pc, #152]	@ (8000930 <tm1638_ReadKey+0x49c>)
 8000898:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800089c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80008a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  				if(c)key = cc;
 80008a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d00a      	beq.n	80008c2 <tm1638_ReadKey+0x42e>
 80008ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80008b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80008b4:	e005      	b.n	80008c2 <tm1638_ReadKey+0x42e>
  		}
  	}else counter_numbers[cc]=0;
 80008b6:	4a1f      	ldr	r2, [pc, #124]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 80008b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80008bc:	2100      	movs	r1, #0
 80008be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int row=3 ;row<5;row++){
 80008c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80008c6:	3301      	adds	r3, #1
 80008c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80008cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	f77f af31 	ble.w	8000738 <tm1638_ReadKey+0x2a4>
	}
	// 16th button pullup mode
	int temp = HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin);
 80008d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008da:	4819      	ldr	r0, [pc, #100]	@ (8000940 <tm1638_ReadKey+0x4ac>)
 80008dc:	f000 feda 	bl	8001694 <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	if(temp != previous_numbers[16]){
 80008e6:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <tm1638_ReadKey+0x49c>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d014      	beq.n	800091c <tm1638_ReadKey+0x488>
		counter_numbers[16]+=1;
 80008f2:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f6:	3301      	adds	r3, #1
 80008f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 80008fa:	6413      	str	r3, [r2, #64]	@ 0x40
		if(counter_numbers[16]==10){
 80008fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000900:	2b0a      	cmp	r3, #10
 8000902:	d10e      	bne.n	8000922 <tm1638_ReadKey+0x48e>
			previous_numbers[16] = temp;
 8000904:	4a0a      	ldr	r2, [pc, #40]	@ (8000930 <tm1638_ReadKey+0x49c>)
 8000906:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800090a:	6413      	str	r3, [r2, #64]	@ 0x40
			if(!temp)key= 16;
 800090c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000910:	2b00      	cmp	r3, #0
 8000912:	d106      	bne.n	8000922 <tm1638_ReadKey+0x48e>
 8000914:	2310      	movs	r3, #16
 8000916:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800091a:	e002      	b.n	8000922 <tm1638_ReadKey+0x48e>
		}
	}else counter_numbers[16] = 0;
 800091c:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <tm1638_ReadKey+0x4a0>)
 800091e:	2200      	movs	r2, #0
 8000920:	641a      	str	r2, [r3, #64]	@ 0x40

  return key;
 8000922:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
}
 8000926:	4618      	mov	r0, r3
 8000928:	37d0      	adds	r7, #208	@ 0xd0
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000003c 	.word	0x2000003c
 8000934:	20000080 	.word	0x20000080
 8000938:	48000c00 	.word	0x48000c00
 800093c:	48000400 	.word	0x48000400
 8000940:	48000800 	.word	0x48000800

08000944 <rezero>:
//**********************************************
void rezero(uint8_t *numbers){
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	numbers[0]=0;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
	numbers[1]=17;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3301      	adds	r3, #1
 8000956:	2211      	movs	r2, #17
 8000958:	701a      	strb	r2, [r3, #0]
	numbers[2]=17;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3302      	adds	r3, #2
 800095e:	2211      	movs	r2, #17
 8000960:	701a      	strb	r2, [r3, #0]
	numbers[3]=17;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3303      	adds	r3, #3
 8000966:	2211      	movs	r2, #17
 8000968:	701a      	strb	r2, [r3, #0]
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <num_to_array>:
void num_to_array(int num, uint8_t *numbers){
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
	if(!num)rezero(numbers);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d102      	bne.n	800098e <num_to_array+0x16>
 8000988:	6838      	ldr	r0, [r7, #0]
 800098a:	f7ff ffdb 	bl	8000944 <rezero>
	int count = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
	while(num){
 8000992:	e01b      	b.n	80009cc <num_to_array+0x54>
		numbers[count] = num %10;
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	4b17      	ldr	r3, [pc, #92]	@ (80009f4 <num_to_array+0x7c>)
 8000998:	fb83 1302 	smull	r1, r3, r3, r2
 800099c:	1099      	asrs	r1, r3, #2
 800099e:	17d3      	asrs	r3, r2, #31
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	460b      	mov	r3, r1
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	440b      	add	r3, r1
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	1ad1      	subs	r1, r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	4413      	add	r3, r2
 80009b2:	b2ca      	uxtb	r2, r1
 80009b4:	701a      	strb	r2, [r3, #0]
		num = num /10;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a0e      	ldr	r2, [pc, #56]	@ (80009f4 <num_to_array+0x7c>)
 80009ba:	fb82 1203 	smull	r1, r2, r2, r3
 80009be:	1092      	asrs	r2, r2, #2
 80009c0:	17db      	asrs	r3, r3, #31
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	607b      	str	r3, [r7, #4]
		count++;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	3301      	adds	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
	while(num){
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d1e0      	bne.n	8000994 <num_to_array+0x1c>
	}
	for(;count<=3;count++){
 80009d2:	e007      	b.n	80009e4 <num_to_array+0x6c>
		numbers[count]=17;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	683a      	ldr	r2, [r7, #0]
 80009d8:	4413      	add	r3, r2
 80009da:	2211      	movs	r2, #17
 80009dc:	701a      	strb	r2, [r3, #0]
	for(;count<=3;count++){
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	3301      	adds	r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	ddf4      	ble.n	80009d4 <num_to_array+0x5c>
	}
}
 80009ea:	bf00      	nop
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	66666667 	.word	0x66666667

080009f8 <power>:
int power(int n){
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	int res = 1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
	while(n){
 8000a04:	e008      	b.n	8000a18 <power+0x20>
		res*=10;
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	4413      	add	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	60fb      	str	r3, [r7, #12]
		n--;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
	while(n){
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1f3      	bne.n	8000a06 <power+0xe>
	}
	return res;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <array_to_num>:
int array_to_num(uint8_t *numbers){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
	int result = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
	while(numbers[i]!=17 && i<4){
 8000a3c:	e00f      	b.n	8000a5e <array_to_num+0x32>
		result += power(i)*numbers[i];
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f7ff ffda 	bl	80009f8 <power>
 8000a44:	4601      	mov	r1, r0
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	fb01 f303 	mul.w	r3, r1, r3
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	4413      	add	r3, r2
 8000a56:	60bb      	str	r3, [r7, #8]
		i++;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	60fb      	str	r3, [r7, #12]
	while(numbers[i]!=17 && i<4){
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b11      	cmp	r3, #17
 8000a68:	d002      	beq.n	8000a70 <array_to_num+0x44>
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2b03      	cmp	r3, #3
 8000a6e:	dde6      	ble.n	8000a3e <array_to_num+0x12>
	}
	return result;
 8000a70:	68bb      	ldr	r3, [r7, #8]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <init_all>:
int oper = 0;
int result = 0;
bool is_start = true;
bool can_calculate = false;

void init_all(){
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
	operand_1 = 0;
 8000a80:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <init_all+0x34>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
	operand_2 = 0;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <init_all+0x38>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
	oper=0;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <init_all+0x3c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
	result = 0;
 8000a92:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <init_all+0x40>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
	is_start = true;
 8000a98:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <init_all+0x44>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
	can_calculate = false;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <init_all+0x48>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	200000c4 	.word	0x200000c4
 8000ab4:	200000c8 	.word	0x200000c8
 8000ab8:	200000cc 	.word	0x200000cc
 8000abc:	200000d0 	.word	0x200000d0
 8000ac0:	20000012 	.word	0x20000012
 8000ac4:	200000d4 	.word	0x200000d4

08000ac8 <set_keyboard_row>:
//**********************************************
void set_keyboard_row(int8_t which)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	4825      	ldr	r0, [pc, #148]	@ (8000b6c <set_keyboard_row+0xa4>)
 8000ad8:	f000 fdf4 	bl	80016c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2102      	movs	r1, #2
 8000ae0:	4822      	ldr	r0, [pc, #136]	@ (8000b6c <set_keyboard_row+0xa4>)
 8000ae2:	f000 fdef 	bl	80016c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2104      	movs	r1, #4
 8000aea:	4820      	ldr	r0, [pc, #128]	@ (8000b6c <set_keyboard_row+0xa4>)
 8000aec:	f000 fdea 	bl	80016c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2108      	movs	r1, #8
 8000af4:	481d      	ldr	r0, [pc, #116]	@ (8000b6c <set_keyboard_row+0xa4>)
 8000af6:	f000 fde5 	bl	80016c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2110      	movs	r1, #16
 8000afe:	481b      	ldr	r0, [pc, #108]	@ (8000b6c <set_keyboard_row+0xa4>)
 8000b00:	f000 fde0 	bl	80016c4 <HAL_GPIO_WritePin>
  switch (which)
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b04      	cmp	r3, #4
 8000b0a:	d82b      	bhi.n	8000b64 <set_keyboard_row+0x9c>
 8000b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b14 <set_keyboard_row+0x4c>)
 8000b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b12:	bf00      	nop
 8000b14:	08000b29 	.word	0x08000b29
 8000b18:	08000b35 	.word	0x08000b35
 8000b1c:	08000b41 	.word	0x08000b41
 8000b20:	08000b4d 	.word	0x08000b4d
 8000b24:	08000b59 	.word	0x08000b59
  {
  case 0:HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);break;
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	480f      	ldr	r0, [pc, #60]	@ (8000b6c <set_keyboard_row+0xa4>)
 8000b2e:	f000 fdc9 	bl	80016c4 <HAL_GPIO_WritePin>
 8000b32:	e017      	b.n	8000b64 <set_keyboard_row+0x9c>
  case 1:HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);break;
 8000b34:	2201      	movs	r2, #1
 8000b36:	2102      	movs	r1, #2
 8000b38:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <set_keyboard_row+0xa4>)
 8000b3a:	f000 fdc3 	bl	80016c4 <HAL_GPIO_WritePin>
 8000b3e:	e011      	b.n	8000b64 <set_keyboard_row+0x9c>
  case 2:HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);break;
 8000b40:	2201      	movs	r2, #1
 8000b42:	2104      	movs	r1, #4
 8000b44:	4809      	ldr	r0, [pc, #36]	@ (8000b6c <set_keyboard_row+0xa4>)
 8000b46:	f000 fdbd 	bl	80016c4 <HAL_GPIO_WritePin>
 8000b4a:	e00b      	b.n	8000b64 <set_keyboard_row+0x9c>
  case 3:HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);break;
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2108      	movs	r1, #8
 8000b50:	4806      	ldr	r0, [pc, #24]	@ (8000b6c <set_keyboard_row+0xa4>)
 8000b52:	f000 fdb7 	bl	80016c4 <HAL_GPIO_WritePin>
 8000b56:	e005      	b.n	8000b64 <set_keyboard_row+0x9c>
  case 4:HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);break;
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	4803      	ldr	r0, [pc, #12]	@ (8000b6c <set_keyboard_row+0xa4>)
 8000b5e:	f000 fdb1 	bl	80016c4 <HAL_GPIO_WritePin>
 8000b62:	bf00      	nop
  }
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	48001000 	.word	0x48001000

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	@ 0x28
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b76:	f000 fa94 	bl	80010a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7a:	f000 f927 	bl	8000dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f000 f965 	bl	8000e4c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  TM1638 TM;
  TM.clk_port= CLK_GPIO_Port;
 8000b82:	4b8a      	ldr	r3, [pc, #552]	@ (8000dac <main+0x23c>)
 8000b84:	60bb      	str	r3, [r7, #8]
  TM.clk_pin = CLK_Pin;
 8000b86:	2304      	movs	r3, #4
 8000b88:	82bb      	strh	r3, [r7, #20]
  TM.stb_port= STB_GPIO_Port;
 8000b8a:	4b88      	ldr	r3, [pc, #544]	@ (8000dac <main+0x23c>)
 8000b8c:	613b      	str	r3, [r7, #16]
  TM.stb_pin = STB_Pin;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	833b      	strh	r3, [r7, #24]
  TM.dio_port= DIO_GPIO_Port;
 8000b92:	4b86      	ldr	r3, [pc, #536]	@ (8000dac <main+0x23c>)
 8000b94:	60fb      	str	r3, [r7, #12]
  TM.dio_pin = DIO_Pin;
 8000b96:	2308      	movs	r3, #8
 8000b98:	82fb      	strh	r3, [r7, #22]

  uint8_t numbers[]={0,17,17,17};
 8000b9a:	4b85      	ldr	r3, [pc, #532]	@ (8000db0 <main+0x240>)
 8000b9c:	607b      	str	r3, [r7, #4]

  tm1638_segInit(&TM);
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fbeb 	bl	800037e <tm1638_segInit>

  //int delay =0;
  int period = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	if(!period){
 8000bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d107      	bne.n	8000bc2 <main+0x52>
  		tm1638_display(&TM, numbers);
 8000bb2:	1d3a      	adds	r2, r7, #4
 8000bb4:	f107 0308 	add.w	r3, r7, #8
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fc18 	bl	80003f0 <tm1638_display>
 8000bc0:	e0ef      	b.n	8000da2 <main+0x232>
  	}
  	else{
  		int read = tm1638_ReadKey(&TM);
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fc64 	bl	8000494 <tm1638_ReadKey>
 8000bcc:	61f8      	str	r0, [r7, #28]
  		//int read = ReadKeyboard();
  	if(read != -1){
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd4:	f000 80e5 	beq.w	8000da2 <main+0x232>

  		if((1<=read && read<=9 )|| read ==11){
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	dd02      	ble.n	8000be4 <main+0x74>
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	2b09      	cmp	r3, #9
 8000be2:	dd02      	ble.n	8000bea <main+0x7a>
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	2b0b      	cmp	r3, #11
 8000be8:	d137      	bne.n	8000c5a <main+0xea>
				if(numbers[3]!=17){HAL_Delay(499);rezero(numbers);init_all();}
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b11      	cmp	r3, #17
 8000bee:	d00a      	beq.n	8000c06 <main+0x96>
 8000bf0:	f240 10f3 	movw	r0, #499	@ 0x1f3
 8000bf4:	f000 fac6 	bl	8001184 <HAL_Delay>
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fea2 	bl	8000944 <rezero>
 8000c00:	f7ff ff3c 	bl	8000a7c <init_all>
 8000c04:	e0cc      	b.n	8000da0 <main+0x230>
				else{
					for(int i = 2;i>=0;i--){
 8000c06:	2302      	movs	r3, #2
 8000c08:	623b      	str	r3, [r7, #32]
 8000c0a:	e00c      	b.n	8000c26 <main+0xb6>
						numbers[i+1]=numbers[i];
 8000c0c:	6a3b      	ldr	r3, [r7, #32]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	1d39      	adds	r1, r7, #4
 8000c12:	6a3a      	ldr	r2, [r7, #32]
 8000c14:	440a      	add	r2, r1
 8000c16:	7812      	ldrb	r2, [r2, #0]
 8000c18:	3328      	adds	r3, #40	@ 0x28
 8000c1a:	443b      	add	r3, r7
 8000c1c:	f803 2c24 	strb.w	r2, [r3, #-36]
					for(int i = 2;i>=0;i--){
 8000c20:	6a3b      	ldr	r3, [r7, #32]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	623b      	str	r3, [r7, #32]
 8000c26:	6a3b      	ldr	r3, [r7, #32]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	daef      	bge.n	8000c0c <main+0x9c>
					}
					numbers[0] = (read == 11) ? 0 : read;
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	2b0b      	cmp	r3, #11
 8000c30:	d002      	beq.n	8000c38 <main+0xc8>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	e000      	b.n	8000c3a <main+0xca>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	713b      	strb	r3, [r7, #4]
					if(is_start){
 8000c3c:	4b5d      	ldr	r3, [pc, #372]	@ (8000db4 <main+0x244>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f000 80ad 	beq.w	8000da0 <main+0x230>
						numbers[1]=17;
 8000c46:	2311      	movs	r3, #17
 8000c48:	717b      	strb	r3, [r7, #5]
						if(read!=11)is_start = false;
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	2b0b      	cmp	r3, #11
 8000c4e:	f000 80a7 	beq.w	8000da0 <main+0x230>
 8000c52:	4b58      	ldr	r3, [pc, #352]	@ (8000db4 <main+0x244>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
				if(numbers[3]!=17){HAL_Delay(499);rezero(numbers);init_all();}
 8000c58:	e0a2      	b.n	8000da0 <main+0x230>
					}
				}
  		}

  		else if(read == 10){
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	2b0a      	cmp	r3, #10
 8000c5e:	d106      	bne.n	8000c6e <main+0xfe>
  			rezero(numbers);
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fe6e 	bl	8000944 <rezero>
  			init_all();
 8000c68:	f7ff ff08 	bl	8000a7c <init_all>
 8000c6c:	e099      	b.n	8000da2 <main+0x232>
  		}

  		else if(read == 12 && can_calculate){
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	2b0c      	cmp	r3, #12
 8000c72:	d17a      	bne.n	8000d6a <main+0x1fa>
 8000c74:	4b50      	ldr	r3, [pc, #320]	@ (8000db8 <main+0x248>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d076      	beq.n	8000d6a <main+0x1fa>
  			operand_2 = array_to_num(numbers);
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fed4 	bl	8000a2c <array_to_num>
 8000c84:	4603      	mov	r3, r0
 8000c86:	4a4d      	ldr	r2, [pc, #308]	@ (8000dbc <main+0x24c>)
 8000c88:	6013      	str	r3, [r2, #0]
  			switch(oper){
 8000c8a:	4b4d      	ldr	r3, [pc, #308]	@ (8000dc0 <main+0x250>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	3b0d      	subs	r3, #13
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d82d      	bhi.n	8000cf0 <main+0x180>
 8000c94:	a201      	add	r2, pc, #4	@ (adr r2, 8000c9c <main+0x12c>)
 8000c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c9a:	bf00      	nop
 8000c9c:	08000cad 	.word	0x08000cad
 8000ca0:	08000cbd 	.word	0x08000cbd
 8000ca4:	08000ccd 	.word	0x08000ccd
 8000ca8:	08000cdf 	.word	0x08000cdf
  				case 13 :result = operand_1 + operand_2;break;
 8000cac:	4b45      	ldr	r3, [pc, #276]	@ (8000dc4 <main+0x254>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b42      	ldr	r3, [pc, #264]	@ (8000dbc <main+0x24c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a44      	ldr	r2, [pc, #272]	@ (8000dc8 <main+0x258>)
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	e019      	b.n	8000cf0 <main+0x180>
  				case 14 :result = operand_1 - operand_2;break;
 8000cbc:	4b41      	ldr	r3, [pc, #260]	@ (8000dc4 <main+0x254>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b3e      	ldr	r3, [pc, #248]	@ (8000dbc <main+0x24c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	4a40      	ldr	r2, [pc, #256]	@ (8000dc8 <main+0x258>)
 8000cc8:	6013      	str	r3, [r2, #0]
 8000cca:	e011      	b.n	8000cf0 <main+0x180>
  				case 15 :result = operand_1 * operand_2;break;
 8000ccc:	4b3d      	ldr	r3, [pc, #244]	@ (8000dc4 <main+0x254>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a3a      	ldr	r2, [pc, #232]	@ (8000dbc <main+0x24c>)
 8000cd2:	6812      	ldr	r2, [r2, #0]
 8000cd4:	fb02 f303 	mul.w	r3, r2, r3
 8000cd8:	4a3b      	ldr	r2, [pc, #236]	@ (8000dc8 <main+0x258>)
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	e008      	b.n	8000cf0 <main+0x180>
  				case 16 :result = operand_1 / operand_2;break;
 8000cde:	4b39      	ldr	r3, [pc, #228]	@ (8000dc4 <main+0x254>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	4b36      	ldr	r3, [pc, #216]	@ (8000dbc <main+0x24c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cea:	4a37      	ldr	r2, [pc, #220]	@ (8000dc8 <main+0x258>)
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	bf00      	nop
  			}
  			if(0<result && result<10000){
 8000cf0:	4b35      	ldr	r3, [pc, #212]	@ (8000dc8 <main+0x258>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	dd0d      	ble.n	8000d14 <main+0x1a4>
 8000cf8:	4b33      	ldr	r3, [pc, #204]	@ (8000dc8 <main+0x258>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000d00:	4293      	cmp	r3, r2
 8000d02:	dc07      	bgt.n	8000d14 <main+0x1a4>
  				num_to_array(result, numbers);
 8000d04:	4b30      	ldr	r3, [pc, #192]	@ (8000dc8 <main+0x258>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	1d3a      	adds	r2, r7, #4
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fe33 	bl	8000978 <num_to_array>
 8000d12:	e027      	b.n	8000d64 <main+0x1f4>
  			}
  			else if(result <0 && result >=-999){
 8000d14:	4b2c      	ldr	r3, [pc, #176]	@ (8000dc8 <main+0x258>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	da1f      	bge.n	8000d5c <main+0x1ec>
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc8 <main+0x258>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8000d24:	dd1a      	ble.n	8000d5c <main+0x1ec>
  				num_to_array(-result, numbers);
 8000d26:	4b28      	ldr	r3, [pc, #160]	@ (8000dc8 <main+0x258>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	425b      	negs	r3, r3
 8000d2c:	1d3a      	adds	r2, r7, #4
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fe21 	bl	8000978 <num_to_array>
  				if(result<-99)numbers[3]=16;
 8000d36:	4b24      	ldr	r3, [pc, #144]	@ (8000dc8 <main+0x258>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8000d3e:	da02      	bge.n	8000d46 <main+0x1d6>
 8000d40:	2310      	movs	r3, #16
 8000d42:	71fb      	strb	r3, [r7, #7]
 8000d44:	e00e      	b.n	8000d64 <main+0x1f4>
  				else if(result<-9)numbers[2]=16;
 8000d46:	4b20      	ldr	r3, [pc, #128]	@ (8000dc8 <main+0x258>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f113 0f09 	cmn.w	r3, #9
 8000d4e:	da02      	bge.n	8000d56 <main+0x1e6>
 8000d50:	2310      	movs	r3, #16
 8000d52:	71bb      	strb	r3, [r7, #6]
  				if(result<-99)numbers[3]=16;
 8000d54:	e006      	b.n	8000d64 <main+0x1f4>
  				else numbers[1]=16;
 8000d56:	2310      	movs	r3, #16
 8000d58:	717b      	strb	r3, [r7, #5]
  				if(result<-99)numbers[3]=16;
 8000d5a:	e003      	b.n	8000d64 <main+0x1f4>
  			}
  			else{rezero(numbers);}
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fdf0 	bl	8000944 <rezero>
  				init_all();
 8000d64:	f7ff fe8a 	bl	8000a7c <init_all>
 8000d68:	e01b      	b.n	8000da2 <main+0x232>
  		}

  		else if(13<=read && read<=16){
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	2b0c      	cmp	r3, #12
 8000d6e:	dd18      	ble.n	8000da2 <main+0x232>
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	2b10      	cmp	r3, #16
 8000d74:	dc15      	bgt.n	8000da2 <main+0x232>
  			oper = read;
 8000d76:	4a12      	ldr	r2, [pc, #72]	@ (8000dc0 <main+0x250>)
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	6013      	str	r3, [r2, #0]
  			operand_1 = array_to_num(numbers);
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fe54 	bl	8000a2c <array_to_num>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc4 <main+0x254>)
 8000d88:	6013      	str	r3, [r2, #0]
  			can_calculate = true;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000db8 <main+0x248>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
  			rezero(numbers);
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fdd6 	bl	8000944 <rezero>
  			is_start = true;
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <main+0x244>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
 8000d9e:	e000      	b.n	8000da2 <main+0x232>
				if(numbers[3]!=17){HAL_Delay(499);rezero(numbers);init_all();}
 8000da0:	bf00      	nop
  		}

  	}
  	}
  	period = 1- period;
 8000da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da4:	f1c3 0301 	rsb	r3, r3, #1
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
  	if(!period){
 8000daa:	e6ff      	b.n	8000bac <main+0x3c>
 8000dac:	48000800 	.word	0x48000800
 8000db0:	11111100 	.word	0x11111100
 8000db4:	20000012 	.word	0x20000012
 8000db8:	200000d4 	.word	0x200000d4
 8000dbc:	200000c8 	.word	0x200000c8
 8000dc0:	200000cc 	.word	0x200000cc
 8000dc4:	200000c4 	.word	0x200000c4
 8000dc8:	200000d0 	.word	0x200000d0

08000dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b094      	sub	sp, #80	@ 0x50
 8000dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd2:	f107 0318 	add.w	r3, r7, #24
 8000dd6:	2238      	movs	r2, #56	@ 0x38
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 fa24 	bl	8002228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000df2:	f000 fc7f 	bl	80016f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e00:	2340      	movs	r3, #64	@ 0x40
 8000e02:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e08:	f107 0318 	add.w	r3, r7, #24
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fd15 	bl	800183c <HAL_RCC_OscConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e18:	f000 f8ae 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e20:	2301      	movs	r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 f813 	bl	8001e60 <HAL_RCC_ClockConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000e40:	f000 f89a 	bl	8000f78 <Error_Handler>
  }
}
 8000e44:	bf00      	nop
 8000e46:	3750      	adds	r7, #80	@ 0x50
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	@ 0x28
 8000e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e62:	4b40      	ldr	r3, [pc, #256]	@ (8000f64 <MX_GPIO_Init+0x118>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e66:	4a3f      	ldr	r2, [pc, #252]	@ (8000f64 <MX_GPIO_Init+0x118>)
 8000e68:	f043 0310 	orr.w	r3, r3, #16
 8000e6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e6e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f64 <MX_GPIO_Init+0x118>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e72:	f003 0310 	and.w	r3, r3, #16
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f64 <MX_GPIO_Init+0x118>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7e:	4a39      	ldr	r2, [pc, #228]	@ (8000f64 <MX_GPIO_Init+0x118>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e86:	4b37      	ldr	r3, [pc, #220]	@ (8000f64 <MX_GPIO_Init+0x118>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e92:	4b34      	ldr	r3, [pc, #208]	@ (8000f64 <MX_GPIO_Init+0x118>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	4a33      	ldr	r2, [pc, #204]	@ (8000f64 <MX_GPIO_Init+0x118>)
 8000e98:	f043 0308 	orr.w	r3, r3, #8
 8000e9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9e:	4b31      	ldr	r3, [pc, #196]	@ (8000f64 <MX_GPIO_Init+0x118>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	f003 0308 	and.w	r3, r3, #8
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	4b2e      	ldr	r3, [pc, #184]	@ (8000f64 <MX_GPIO_Init+0x118>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	4a2d      	ldr	r2, [pc, #180]	@ (8000f64 <MX_GPIO_Init+0x118>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f64 <MX_GPIO_Init+0x118>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG0_Pin
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	211f      	movs	r1, #31
 8000ec6:	4828      	ldr	r0, [pc, #160]	@ (8000f68 <MX_GPIO_Init+0x11c>)
 8000ec8:	f000 fbfc 	bl	80016c4 <HAL_GPIO_WritePin>
                          |SEG1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STB_Pin|CLK_Pin|DIO_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	210e      	movs	r1, #14
 8000ed0:	4826      	ldr	r0, [pc, #152]	@ (8000f6c <MX_GPIO_Init+0x120>)
 8000ed2:	f000 fbf7 	bl	80016c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG2_Pin SEG3_Pin SEG4_Pin SEG0_Pin
                           SEG1_Pin */
  GPIO_InitStruct.Pin = SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG0_Pin
 8000ed6:	231f      	movs	r3, #31
 8000ed8:	617b      	str	r3, [r7, #20]
                          |SEG1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	481e      	ldr	r0, [pc, #120]	@ (8000f68 <MX_GPIO_Init+0x11c>)
 8000eee:	f000 fa4f 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW3_Pin */
  GPIO_InitStruct.Pin = SW3_Pin;
 8000ef2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	4819      	ldr	r0, [pc, #100]	@ (8000f6c <MX_GPIO_Init+0x120>)
 8000f08:	f000 fa42 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : STB_Pin CLK_Pin DIO_Pin */
  GPIO_InitStruct.Pin = STB_Pin|CLK_Pin|DIO_Pin;
 8000f0c:	230e      	movs	r3, #14
 8000f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	4812      	ldr	r0, [pc, #72]	@ (8000f6c <MX_GPIO_Init+0x120>)
 8000f24:	f000 fa34 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC1_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC1_Pin;
 8000f28:	2348      	movs	r3, #72	@ 0x48
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480d      	ldr	r0, [pc, #52]	@ (8000f70 <MX_GPIO_Init+0x124>)
 8000f3c:	f000 fa28 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : KC2_Pin */
  GPIO_InitStruct.Pin = KC2_Pin;
 8000f40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KC2_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4807      	ldr	r0, [pc, #28]	@ (8000f74 <MX_GPIO_Init+0x128>)
 8000f56:	f000 fa1b 	bl	8001390 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	@ 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000
 8000f68:	48001000 	.word	0x48001000
 8000f6c:	48000800 	.word	0x48000800
 8000f70:	48000c00 	.word	0x48000c00
 8000f74:	48000400 	.word	0x48000400

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <Error_Handler+0x8>

08000f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f96:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa6:	4a08      	ldr	r2, [pc, #32]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001022:	f000 f891 	bl	8001148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <SystemInit+0x20>)
 8001032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001036:	4a05      	ldr	r2, [pc, #20]	@ (800104c <SystemInit+0x20>)
 8001038:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800103c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	  ldr   r0, =_estack
 8001050:	480d      	ldr	r0, [pc, #52]	@ (8001088 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001052:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001054:	f7ff ffea 	bl	800102c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001058:	480c      	ldr	r0, [pc, #48]	@ (800108c <LoopForever+0x6>)
  ldr r1, =_edata
 800105a:	490d      	ldr	r1, [pc, #52]	@ (8001090 <LoopForever+0xa>)
  ldr r2, =_sidata
 800105c:	4a0d      	ldr	r2, [pc, #52]	@ (8001094 <LoopForever+0xe>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001060:	e002      	b.n	8001068 <LoopCopyDataInit>

08001062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001066:	3304      	adds	r3, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800106c:	d3f9      	bcc.n	8001062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106e:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001070:	4c0a      	ldr	r4, [pc, #40]	@ (800109c <LoopForever+0x16>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001074:	e001      	b.n	800107a <LoopFillZerobss>

08001076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001078:	3204      	adds	r2, #4

0800107a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800107c:	d3fb      	bcc.n	8001076 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800107e:	f001 f8db 	bl	8002238 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001082:	f7ff fd75 	bl	8000b70 <main>

08001086 <LoopForever>:

LoopForever:
    b LoopForever
 8001086:	e7fe      	b.n	8001086 <LoopForever>
	  ldr   r0, =_estack
 8001088:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800108c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001090:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001094:	080022b0 	.word	0x080022b0
  ldr r2, =_sbss
 8001098:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800109c:	200000dc 	.word	0x200000dc

080010a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC1_2_IRQHandler>

080010a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f000 f93d 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010b2:	200f      	movs	r0, #15
 80010b4:	f000 f80e 	bl	80010d4 <HAL_InitTick>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	e001      	b.n	80010c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010c4:	f7ff ff5e 	bl	8000f84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c8:	79fb      	ldrb	r3, [r7, #7]

}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <HAL_InitTick+0x68>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d022      	beq.n	800112e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010e8:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <HAL_InitTick+0x6c>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <HAL_InitTick+0x68>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80010f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f93a 	bl	8001376 <HAL_SYSTICK_Config>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d10f      	bne.n	8001128 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b0f      	cmp	r3, #15
 800110c:	d809      	bhi.n	8001122 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110e:	2200      	movs	r2, #0
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	f04f 30ff 	mov.w	r0, #4294967295
 8001116:	f000 f914 	bl	8001342 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800111a:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <HAL_InitTick+0x70>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	e007      	b.n	8001132 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	e004      	b.n	8001132 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
 800112c:	e001      	b.n	8001132 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001132:	7bfb      	ldrb	r3, [r7, #15]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	2000001c 	.word	0x2000001c
 8001140:	20000014 	.word	0x20000014
 8001144:	20000018 	.word	0x20000018

08001148 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <HAL_IncTick+0x1c>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <HAL_IncTick+0x20>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4413      	add	r3, r2
 8001156:	4a03      	ldr	r2, [pc, #12]	@ (8001164 <HAL_IncTick+0x1c>)
 8001158:	6013      	str	r3, [r2, #0]
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	200000d8 	.word	0x200000d8
 8001168:	2000001c 	.word	0x2000001c

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	@ (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	200000d8 	.word	0x200000d8

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff ffee 	bl	800116c <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d004      	beq.n	80011a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <HAL_Delay+0x40>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	4413      	add	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a8:	bf00      	nop
 80011aa:	f7ff ffdf 	bl	800116c <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d8f7      	bhi.n	80011aa <HAL_Delay+0x26>
  {
  }
}
 80011ba:	bf00      	nop
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2000001c 	.word	0x2000001c

080011c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e4:	4013      	ands	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fa:	4a04      	ldr	r2, [pc, #16]	@ (800120c <__NVIC_SetPriorityGrouping+0x44>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	60d3      	str	r3, [r2, #12]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001214:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <__NVIC_GetPriorityGrouping+0x18>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	0a1b      	lsrs	r3, r3, #8
 800121a:	f003 0307 	and.w	r3, r3, #7
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	@ (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	@ (800127c <__NVIC_SetPriority+0x50>)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	@ 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	@ 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f7ff ff8e 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	@ (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff47 	bl	80011c8 <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff5e 	bl	8001210 <__NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff90 	bl	8001280 <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5f 	bl	800122c <__NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ffb2 	bl	80012e8 <SysTick_Config>
 8001384:	4603      	mov	r3, r0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001390:	b480      	push	{r7}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800139e:	e15a      	b.n	8001656 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	2101      	movs	r1, #1
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	4013      	ands	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 814c 	beq.w	8001650 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d005      	beq.n	80013d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d130      	bne.n	8001432 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	2203      	movs	r2, #3
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001406:	2201      	movs	r2, #1
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	091b      	lsrs	r3, r3, #4
 800141c:	f003 0201 	and.w	r2, r3, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	2b03      	cmp	r3, #3
 800143c:	d017      	beq.n	800146e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d123      	bne.n	80014c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	08da      	lsrs	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3208      	adds	r2, #8
 8001482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001486:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	220f      	movs	r2, #15
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	691a      	ldr	r2, [r3, #16]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	08da      	lsrs	r2, r3, #3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3208      	adds	r2, #8
 80014bc:	6939      	ldr	r1, [r7, #16]
 80014be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	2203      	movs	r2, #3
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 0203 	and.w	r2, r3, #3
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 80a6 	beq.w	8001650 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001504:	4b5b      	ldr	r3, [pc, #364]	@ (8001674 <HAL_GPIO_Init+0x2e4>)
 8001506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001508:	4a5a      	ldr	r2, [pc, #360]	@ (8001674 <HAL_GPIO_Init+0x2e4>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001510:	4b58      	ldr	r3, [pc, #352]	@ (8001674 <HAL_GPIO_Init+0x2e4>)
 8001512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800151c:	4a56      	ldr	r2, [pc, #344]	@ (8001678 <HAL_GPIO_Init+0x2e8>)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	3302      	adds	r3, #2
 8001524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001528:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	220f      	movs	r2, #15
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001546:	d01f      	beq.n	8001588 <HAL_GPIO_Init+0x1f8>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a4c      	ldr	r2, [pc, #304]	@ (800167c <HAL_GPIO_Init+0x2ec>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d019      	beq.n	8001584 <HAL_GPIO_Init+0x1f4>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a4b      	ldr	r2, [pc, #300]	@ (8001680 <HAL_GPIO_Init+0x2f0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d013      	beq.n	8001580 <HAL_GPIO_Init+0x1f0>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a4a      	ldr	r2, [pc, #296]	@ (8001684 <HAL_GPIO_Init+0x2f4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d00d      	beq.n	800157c <HAL_GPIO_Init+0x1ec>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a49      	ldr	r2, [pc, #292]	@ (8001688 <HAL_GPIO_Init+0x2f8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d007      	beq.n	8001578 <HAL_GPIO_Init+0x1e8>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a48      	ldr	r2, [pc, #288]	@ (800168c <HAL_GPIO_Init+0x2fc>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d101      	bne.n	8001574 <HAL_GPIO_Init+0x1e4>
 8001570:	2305      	movs	r3, #5
 8001572:	e00a      	b.n	800158a <HAL_GPIO_Init+0x1fa>
 8001574:	2306      	movs	r3, #6
 8001576:	e008      	b.n	800158a <HAL_GPIO_Init+0x1fa>
 8001578:	2304      	movs	r3, #4
 800157a:	e006      	b.n	800158a <HAL_GPIO_Init+0x1fa>
 800157c:	2303      	movs	r3, #3
 800157e:	e004      	b.n	800158a <HAL_GPIO_Init+0x1fa>
 8001580:	2302      	movs	r3, #2
 8001582:	e002      	b.n	800158a <HAL_GPIO_Init+0x1fa>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <HAL_GPIO_Init+0x1fa>
 8001588:	2300      	movs	r3, #0
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	f002 0203 	and.w	r2, r2, #3
 8001590:	0092      	lsls	r2, r2, #2
 8001592:	4093      	lsls	r3, r2
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800159a:	4937      	ldr	r1, [pc, #220]	@ (8001678 <HAL_GPIO_Init+0x2e8>)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	3302      	adds	r3, #2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015a8:	4b39      	ldr	r3, [pc, #228]	@ (8001690 <HAL_GPIO_Init+0x300>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015cc:	4a30      	ldr	r2, [pc, #192]	@ (8001690 <HAL_GPIO_Init+0x300>)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001690 <HAL_GPIO_Init+0x300>)
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	43db      	mvns	r3, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015f6:	4a26      	ldr	r2, [pc, #152]	@ (8001690 <HAL_GPIO_Init+0x300>)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80015fc:	4b24      	ldr	r3, [pc, #144]	@ (8001690 <HAL_GPIO_Init+0x300>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001620:	4a1b      	ldr	r2, [pc, #108]	@ (8001690 <HAL_GPIO_Init+0x300>)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001626:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <HAL_GPIO_Init+0x300>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800164a:	4a11      	ldr	r2, [pc, #68]	@ (8001690 <HAL_GPIO_Init+0x300>)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	fa22 f303 	lsr.w	r3, r2, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	f47f ae9d 	bne.w	80013a0 <HAL_GPIO_Init+0x10>
  }
}
 8001666:	bf00      	nop
 8001668:	bf00      	nop
 800166a:	371c      	adds	r7, #28
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	40021000 	.word	0x40021000
 8001678:	40010000 	.word	0x40010000
 800167c:	48000400 	.word	0x48000400
 8001680:	48000800 	.word	0x48000800
 8001684:	48000c00 	.word	0x48000c00
 8001688:	48001000 	.word	0x48001000
 800168c:	48001400 	.word	0x48001400
 8001690:	40010400 	.word	0x40010400

08001694 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691a      	ldr	r2, [r3, #16]
 80016a4:	887b      	ldrh	r3, [r7, #2]
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016ac:	2301      	movs	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
 80016b0:	e001      	b.n	80016b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]
 80016d0:	4613      	mov	r3, r2
 80016d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016d4:	787b      	ldrb	r3, [r7, #1]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016da:	887a      	ldrh	r2, [r7, #2]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d141      	bne.n	8001786 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001702:	4b4b      	ldr	r3, [pc, #300]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800170a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800170e:	d131      	bne.n	8001774 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001710:	4b47      	ldr	r3, [pc, #284]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001716:	4a46      	ldr	r2, [pc, #280]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800171c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001720:	4b43      	ldr	r3, [pc, #268]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001728:	4a41      	ldr	r2, [pc, #260]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800172a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800172e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001730:	4b40      	ldr	r3, [pc, #256]	@ (8001834 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2232      	movs	r2, #50	@ 0x32
 8001736:	fb02 f303 	mul.w	r3, r2, r3
 800173a:	4a3f      	ldr	r2, [pc, #252]	@ (8001838 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	0c9b      	lsrs	r3, r3, #18
 8001742:	3301      	adds	r3, #1
 8001744:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001746:	e002      	b.n	800174e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	3b01      	subs	r3, #1
 800174c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800174e:	4b38      	ldr	r3, [pc, #224]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800175a:	d102      	bne.n	8001762 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f2      	bne.n	8001748 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001762:	4b33      	ldr	r3, [pc, #204]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800176a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800176e:	d158      	bne.n	8001822 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e057      	b.n	8001824 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001774:	4b2e      	ldr	r3, [pc, #184]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800177a:	4a2d      	ldr	r2, [pc, #180]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001780:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001784:	e04d      	b.n	8001822 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800178c:	d141      	bne.n	8001812 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800178e:	4b28      	ldr	r3, [pc, #160]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800179a:	d131      	bne.n	8001800 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800179c:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800179e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017a2:	4a23      	ldr	r2, [pc, #140]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ac:	4b20      	ldr	r3, [pc, #128]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001834 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2232      	movs	r2, #50	@ 0x32
 80017c2:	fb02 f303 	mul.w	r3, r2, r3
 80017c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001838 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017c8:	fba2 2303 	umull	r2, r3, r2, r3
 80017cc:	0c9b      	lsrs	r3, r3, #18
 80017ce:	3301      	adds	r3, #1
 80017d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017d2:	e002      	b.n	80017da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017da:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017e6:	d102      	bne.n	80017ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f2      	bne.n	80017d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017fa:	d112      	bne.n	8001822 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e011      	b.n	8001824 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001806:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001810:	e007      	b.n	8001822 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001812:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800181a:	4a05      	ldr	r2, [pc, #20]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001820:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	40007000 	.word	0x40007000
 8001834:	20000014 	.word	0x20000014
 8001838:	431bde83 	.word	0x431bde83

0800183c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e2fe      	b.n	8001e4c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d075      	beq.n	8001946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800185a:	4b97      	ldr	r3, [pc, #604]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001864:	4b94      	ldr	r3, [pc, #592]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	2b0c      	cmp	r3, #12
 8001872:	d102      	bne.n	800187a <HAL_RCC_OscConfig+0x3e>
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2b03      	cmp	r3, #3
 8001878:	d002      	beq.n	8001880 <HAL_RCC_OscConfig+0x44>
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	2b08      	cmp	r3, #8
 800187e:	d10b      	bne.n	8001898 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001880:	4b8d      	ldr	r3, [pc, #564]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d05b      	beq.n	8001944 <HAL_RCC_OscConfig+0x108>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d157      	bne.n	8001944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e2d9      	b.n	8001e4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018a0:	d106      	bne.n	80018b0 <HAL_RCC_OscConfig+0x74>
 80018a2:	4b85      	ldr	r3, [pc, #532]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a84      	ldr	r2, [pc, #528]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 80018a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e01d      	b.n	80018ec <HAL_RCC_OscConfig+0xb0>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018b8:	d10c      	bne.n	80018d4 <HAL_RCC_OscConfig+0x98>
 80018ba:	4b7f      	ldr	r3, [pc, #508]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a7e      	ldr	r2, [pc, #504]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 80018c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a7b      	ldr	r2, [pc, #492]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 80018cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e00b      	b.n	80018ec <HAL_RCC_OscConfig+0xb0>
 80018d4:	4b78      	ldr	r3, [pc, #480]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a77      	ldr	r2, [pc, #476]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 80018da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b75      	ldr	r3, [pc, #468]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a74      	ldr	r2, [pc, #464]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 80018e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d013      	beq.n	800191c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff fc3a 	bl	800116c <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff fc36 	bl	800116c <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	@ 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e29e      	b.n	8001e4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800190e:	4b6a      	ldr	r3, [pc, #424]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0xc0>
 800191a:	e014      	b.n	8001946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7ff fc26 	bl	800116c <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff fc22 	bl	800116c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	@ 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e28a      	b.n	8001e4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001936:	4b60      	ldr	r3, [pc, #384]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0xe8>
 8001942:	e000      	b.n	8001946 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d075      	beq.n	8001a3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001952:	4b59      	ldr	r3, [pc, #356]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800195c:	4b56      	ldr	r3, [pc, #344]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	2b0c      	cmp	r3, #12
 800196a:	d102      	bne.n	8001972 <HAL_RCC_OscConfig+0x136>
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d002      	beq.n	8001978 <HAL_RCC_OscConfig+0x13c>
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	2b04      	cmp	r3, #4
 8001976:	d11f      	bne.n	80019b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001978:	4b4f      	ldr	r3, [pc, #316]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_OscConfig+0x154>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e25d      	b.n	8001e4c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001990:	4b49      	ldr	r3, [pc, #292]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	061b      	lsls	r3, r3, #24
 800199e:	4946      	ldr	r1, [pc, #280]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019a4:	4b45      	ldr	r3, [pc, #276]	@ (8001abc <HAL_RCC_OscConfig+0x280>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fb93 	bl	80010d4 <HAL_InitTick>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d043      	beq.n	8001a3c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e249      	b.n	8001e4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d023      	beq.n	8001a08 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a3c      	ldr	r2, [pc, #240]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 80019c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff fbce 	bl	800116c <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d4:	f7ff fbca 	bl	800116c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e232      	b.n	8001e4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e6:	4b34      	ldr	r3, [pc, #208]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f2:	4b31      	ldr	r3, [pc, #196]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	061b      	lsls	r3, r3, #24
 8001a00:	492d      	ldr	r1, [pc, #180]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	604b      	str	r3, [r1, #4]
 8001a06:	e01a      	b.n	8001a3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a08:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 8001a0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7ff fbaa 	bl	800116c <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1c:	f7ff fba6 	bl	800116c <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e20e      	b.n	8001e4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a2e:	4b22      	ldr	r3, [pc, #136]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x1e0>
 8001a3a:	e000      	b.n	8001a3e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d041      	beq.n	8001ace <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d01c      	beq.n	8001a8c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a52:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 8001a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a58:	4a17      	ldr	r2, [pc, #92]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a62:	f7ff fb83 	bl	800116c <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6a:	f7ff fb7f 	bl	800116c <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e1e7      	b.n	8001e4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 8001a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0ef      	beq.n	8001a6a <HAL_RCC_OscConfig+0x22e>
 8001a8a:	e020      	b.n	8001ace <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 8001a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a92:	4a09      	ldr	r2, [pc, #36]	@ (8001ab8 <HAL_RCC_OscConfig+0x27c>)
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9c:	f7ff fb66 	bl	800116c <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa2:	e00d      	b.n	8001ac0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa4:	f7ff fb62 	bl	800116c <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d906      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e1ca      	b.n	8001e4c <HAL_RCC_OscConfig+0x610>
 8001ab6:	bf00      	nop
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ac0:	4b8c      	ldr	r3, [pc, #560]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1ea      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 80a6 	beq.w	8001c28 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ae0:	4b84      	ldr	r3, [pc, #528]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_OscConfig+0x2b4>
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x2b6>
 8001af0:	2300      	movs	r3, #0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00d      	beq.n	8001b12 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	4b7f      	ldr	r3, [pc, #508]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afa:	4a7e      	ldr	r2, [pc, #504]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b02:	4b7c      	ldr	r3, [pc, #496]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b12:	4b79      	ldr	r3, [pc, #484]	@ (8001cf8 <HAL_RCC_OscConfig+0x4bc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d118      	bne.n	8001b50 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b1e:	4b76      	ldr	r3, [pc, #472]	@ (8001cf8 <HAL_RCC_OscConfig+0x4bc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a75      	ldr	r2, [pc, #468]	@ (8001cf8 <HAL_RCC_OscConfig+0x4bc>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff fb1f 	bl	800116c <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b32:	f7ff fb1b 	bl	800116c <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e183      	b.n	8001e4c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b44:	4b6c      	ldr	r3, [pc, #432]	@ (8001cf8 <HAL_RCC_OscConfig+0x4bc>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d108      	bne.n	8001b6a <HAL_RCC_OscConfig+0x32e>
 8001b58:	4b66      	ldr	r3, [pc, #408]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b5e:	4a65      	ldr	r2, [pc, #404]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b68:	e024      	b.n	8001bb4 <HAL_RCC_OscConfig+0x378>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b05      	cmp	r3, #5
 8001b70:	d110      	bne.n	8001b94 <HAL_RCC_OscConfig+0x358>
 8001b72:	4b60      	ldr	r3, [pc, #384]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b78:	4a5e      	ldr	r2, [pc, #376]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b82:	4b5c      	ldr	r3, [pc, #368]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b88:	4a5a      	ldr	r2, [pc, #360]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b92:	e00f      	b.n	8001bb4 <HAL_RCC_OscConfig+0x378>
 8001b94:	4b57      	ldr	r3, [pc, #348]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b9a:	4a56      	ldr	r2, [pc, #344]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ba4:	4b53      	ldr	r3, [pc, #332]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001baa:	4a52      	ldr	r2, [pc, #328]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001bac:	f023 0304 	bic.w	r3, r3, #4
 8001bb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d016      	beq.n	8001bea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbc:	f7ff fad6 	bl	800116c <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc2:	e00a      	b.n	8001bda <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc4:	f7ff fad2 	bl	800116c <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e138      	b.n	8001e4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bda:	4b46      	ldr	r3, [pc, #280]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0ed      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x388>
 8001be8:	e015      	b.n	8001c16 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bea:	f7ff fabf 	bl	800116c <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf0:	e00a      	b.n	8001c08 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf2:	f7ff fabb 	bl	800116c <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e121      	b.n	8001e4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c08:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1ed      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c16:	7ffb      	ldrb	r3, [r7, #31]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d105      	bne.n	8001c28 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c1c:	4b35      	ldr	r3, [pc, #212]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c20:	4a34      	ldr	r2, [pc, #208]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001c22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c26:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0320 	and.w	r3, r3, #32
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d03c      	beq.n	8001cae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d01c      	beq.n	8001c76 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001c3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c42:	4a2c      	ldr	r2, [pc, #176]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4c:	f7ff fa8e 	bl	800116c <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c54:	f7ff fa8a 	bl	800116c <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e0f2      	b.n	8001e4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c66:	4b23      	ldr	r3, [pc, #140]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001c68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0ef      	beq.n	8001c54 <HAL_RCC_OscConfig+0x418>
 8001c74:	e01b      	b.n	8001cae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c76:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001c78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c86:	f7ff fa71 	bl	800116c <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c8e:	f7ff fa6d 	bl	800116c <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e0d5      	b.n	8001e4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ca0:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001ca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1ef      	bne.n	8001c8e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80c9 	beq.w	8001e4a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b0c      	cmp	r3, #12
 8001cc2:	f000 8083 	beq.w	8001dcc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d15e      	bne.n	8001d8c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cce:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a08      	ldr	r2, [pc, #32]	@ (8001cf4 <HAL_RCC_OscConfig+0x4b8>)
 8001cd4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cda:	f7ff fa47 	bl	800116c <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce0:	e00c      	b.n	8001cfc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce2:	f7ff fa43 	bl	800116c <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d905      	bls.n	8001cfc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e0ab      	b.n	8001e4c <HAL_RCC_OscConfig+0x610>
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cfc:	4b55      	ldr	r3, [pc, #340]	@ (8001e54 <HAL_RCC_OscConfig+0x618>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1ec      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d08:	4b52      	ldr	r3, [pc, #328]	@ (8001e54 <HAL_RCC_OscConfig+0x618>)
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	4b52      	ldr	r3, [pc, #328]	@ (8001e58 <HAL_RCC_OscConfig+0x61c>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6a11      	ldr	r1, [r2, #32]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d18:	3a01      	subs	r2, #1
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	4311      	orrs	r1, r2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001d22:	0212      	lsls	r2, r2, #8
 8001d24:	4311      	orrs	r1, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d2a:	0852      	lsrs	r2, r2, #1
 8001d2c:	3a01      	subs	r2, #1
 8001d2e:	0552      	lsls	r2, r2, #21
 8001d30:	4311      	orrs	r1, r2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d36:	0852      	lsrs	r2, r2, #1
 8001d38:	3a01      	subs	r2, #1
 8001d3a:	0652      	lsls	r2, r2, #25
 8001d3c:	4311      	orrs	r1, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d42:	06d2      	lsls	r2, r2, #27
 8001d44:	430a      	orrs	r2, r1
 8001d46:	4943      	ldr	r1, [pc, #268]	@ (8001e54 <HAL_RCC_OscConfig+0x618>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d4c:	4b41      	ldr	r3, [pc, #260]	@ (8001e54 <HAL_RCC_OscConfig+0x618>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a40      	ldr	r2, [pc, #256]	@ (8001e54 <HAL_RCC_OscConfig+0x618>)
 8001d52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d56:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d58:	4b3e      	ldr	r3, [pc, #248]	@ (8001e54 <HAL_RCC_OscConfig+0x618>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4a3d      	ldr	r2, [pc, #244]	@ (8001e54 <HAL_RCC_OscConfig+0x618>)
 8001d5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7ff fa02 	bl	800116c <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6c:	f7ff f9fe 	bl	800116c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e066      	b.n	8001e4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7e:	4b35      	ldr	r3, [pc, #212]	@ (8001e54 <HAL_RCC_OscConfig+0x618>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x530>
 8001d8a:	e05e      	b.n	8001e4a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8c:	4b31      	ldr	r3, [pc, #196]	@ (8001e54 <HAL_RCC_OscConfig+0x618>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a30      	ldr	r2, [pc, #192]	@ (8001e54 <HAL_RCC_OscConfig+0x618>)
 8001d92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff f9e8 	bl	800116c <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da0:	f7ff f9e4 	bl	800116c <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e04c      	b.n	8001e4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db2:	4b28      	ldr	r3, [pc, #160]	@ (8001e54 <HAL_RCC_OscConfig+0x618>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001dbe:	4b25      	ldr	r3, [pc, #148]	@ (8001e54 <HAL_RCC_OscConfig+0x618>)
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	4924      	ldr	r1, [pc, #144]	@ (8001e54 <HAL_RCC_OscConfig+0x618>)
 8001dc4:	4b25      	ldr	r3, [pc, #148]	@ (8001e5c <HAL_RCC_OscConfig+0x620>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	60cb      	str	r3, [r1, #12]
 8001dca:	e03e      	b.n	8001e4a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e039      	b.n	8001e4c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e54 <HAL_RCC_OscConfig+0x618>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f003 0203 	and.w	r2, r3, #3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d12c      	bne.n	8001e46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df6:	3b01      	subs	r3, #1
 8001df8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d123      	bne.n	8001e46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e08:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d11b      	bne.n	8001e46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e18:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d113      	bne.n	8001e46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e28:	085b      	lsrs	r3, r3, #1
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d109      	bne.n	8001e46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e3c:	085b      	lsrs	r3, r3, #1
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d001      	beq.n	8001e4a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3720      	adds	r7, #32
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	019f800c 	.word	0x019f800c
 8001e5c:	feeefffc 	.word	0xfeeefffc

08001e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e11e      	b.n	80020b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e78:	4b91      	ldr	r3, [pc, #580]	@ (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d910      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b8e      	ldr	r3, [pc, #568]	@ (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 020f 	bic.w	r2, r3, #15
 8001e8e:	498c      	ldr	r1, [pc, #560]	@ (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b8a      	ldr	r3, [pc, #552]	@ (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e106      	b.n	80020b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d073      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d129      	bne.n	8001f10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ebc:	4b81      	ldr	r3, [pc, #516]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0f4      	b.n	80020b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001ecc:	f000 f966 	bl	800219c <RCC_GetSysClockFreqFromPLLSource>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4a7c      	ldr	r2, [pc, #496]	@ (80020c8 <HAL_RCC_ClockConfig+0x268>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d93f      	bls.n	8001f5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001eda:	4b7a      	ldr	r3, [pc, #488]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d033      	beq.n	8001f5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d12f      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001efa:	4b72      	ldr	r3, [pc, #456]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f02:	4a70      	ldr	r2, [pc, #448]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8001f04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f0a:	2380      	movs	r3, #128	@ 0x80
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	e024      	b.n	8001f5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d107      	bne.n	8001f28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f18:	4b6a      	ldr	r3, [pc, #424]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d109      	bne.n	8001f38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0c6      	b.n	80020b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f28:	4b66      	ldr	r3, [pc, #408]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0be      	b.n	80020b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f38:	f000 f8ce 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8001f3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4a61      	ldr	r2, [pc, #388]	@ (80020c8 <HAL_RCC_ClockConfig+0x268>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d909      	bls.n	8001f5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f46:	4b5f      	ldr	r3, [pc, #380]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f4e:	4a5d      	ldr	r2, [pc, #372]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8001f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f56:	2380      	movs	r3, #128	@ 0x80
 8001f58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f5a:	4b5a      	ldr	r3, [pc, #360]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f023 0203 	bic.w	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4957      	ldr	r1, [pc, #348]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f6c:	f7ff f8fe 	bl	800116c <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f74:	f7ff f8fa 	bl	800116c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e095      	b.n	80020b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	4b4e      	ldr	r3, [pc, #312]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 020c 	and.w	r2, r3, #12
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1eb      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d023      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb4:	4b43      	ldr	r3, [pc, #268]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	4a42      	ldr	r2, [pc, #264]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8001fba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fbe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d007      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001fcc:	4b3d      	ldr	r3, [pc, #244]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001fd4:	4a3b      	ldr	r2, [pc, #236]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8001fd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fdc:	4b39      	ldr	r3, [pc, #228]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	4936      	ldr	r1, [pc, #216]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
 8001fee:	e008      	b.n	8002002 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2b80      	cmp	r3, #128	@ 0x80
 8001ff4:	d105      	bne.n	8002002 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ff6:	4b33      	ldr	r3, [pc, #204]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	4a32      	ldr	r2, [pc, #200]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8001ffc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002000:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002002:	4b2f      	ldr	r3, [pc, #188]	@ (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d21d      	bcs.n	800204c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002010:	4b2b      	ldr	r3, [pc, #172]	@ (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f023 020f 	bic.w	r2, r3, #15
 8002018:	4929      	ldr	r1, [pc, #164]	@ (80020c0 <HAL_RCC_ClockConfig+0x260>)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	4313      	orrs	r3, r2
 800201e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002020:	f7ff f8a4 	bl	800116c <HAL_GetTick>
 8002024:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	e00a      	b.n	800203e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002028:	f7ff f8a0 	bl	800116c <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e03b      	b.n	80020b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b20      	ldr	r3, [pc, #128]	@ (80020c0 <HAL_RCC_ClockConfig+0x260>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d1ed      	bne.n	8002028 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002058:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4917      	ldr	r1, [pc, #92]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d009      	beq.n	800208a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002076:	4b13      	ldr	r3, [pc, #76]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	490f      	ldr	r1, [pc, #60]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8002086:	4313      	orrs	r3, r2
 8002088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800208a:	f000 f825 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 800208e:	4602      	mov	r2, r0
 8002090:	4b0c      	ldr	r3, [pc, #48]	@ (80020c4 <HAL_RCC_ClockConfig+0x264>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	490c      	ldr	r1, [pc, #48]	@ (80020cc <HAL_RCC_ClockConfig+0x26c>)
 800209c:	5ccb      	ldrb	r3, [r1, r3]
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	fa22 f303 	lsr.w	r3, r2, r3
 80020a6:	4a0a      	ldr	r2, [pc, #40]	@ (80020d0 <HAL_RCC_ClockConfig+0x270>)
 80020a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020aa:	4b0a      	ldr	r3, [pc, #40]	@ (80020d4 <HAL_RCC_ClockConfig+0x274>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff f810 	bl	80010d4 <HAL_InitTick>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40022000 	.word	0x40022000
 80020c4:	40021000 	.word	0x40021000
 80020c8:	04c4b400 	.word	0x04c4b400
 80020cc:	08002298 	.word	0x08002298
 80020d0:	20000014 	.word	0x20000014
 80020d4:	20000018 	.word	0x20000018

080020d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80020de:	4b2c      	ldr	r3, [pc, #176]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d102      	bne.n	80020f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002194 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	e047      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80020f0:	4b27      	ldr	r3, [pc, #156]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d102      	bne.n	8002102 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020fc:	4b26      	ldr	r3, [pc, #152]	@ (8002198 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	e03e      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002102:	4b23      	ldr	r3, [pc, #140]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b0c      	cmp	r3, #12
 800210c:	d136      	bne.n	800217c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800210e:	4b20      	ldr	r3, [pc, #128]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002118:	4b1d      	ldr	r3, [pc, #116]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xb8>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	3301      	adds	r3, #1
 8002124:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d10c      	bne.n	8002146 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800212c:	4a1a      	ldr	r2, [pc, #104]	@ (8002198 <HAL_RCC_GetSysClockFreq+0xc0>)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	fbb2 f3f3 	udiv	r3, r2, r3
 8002134:	4a16      	ldr	r2, [pc, #88]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002136:	68d2      	ldr	r2, [r2, #12]
 8002138:	0a12      	lsrs	r2, r2, #8
 800213a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	617b      	str	r3, [r7, #20]
      break;
 8002144:	e00c      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002146:	4a13      	ldr	r2, [pc, #76]	@ (8002194 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	fbb2 f3f3 	udiv	r3, r2, r3
 800214e:	4a10      	ldr	r2, [pc, #64]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002150:	68d2      	ldr	r2, [r2, #12]
 8002152:	0a12      	lsrs	r2, r2, #8
 8002154:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002158:	fb02 f303 	mul.w	r3, r2, r3
 800215c:	617b      	str	r3, [r7, #20]
      break;
 800215e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002160:	4b0b      	ldr	r3, [pc, #44]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	0e5b      	lsrs	r3, r3, #25
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	3301      	adds	r3, #1
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	fbb2 f3f3 	udiv	r3, r2, r3
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	e001      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002180:	693b      	ldr	r3, [r7, #16]
}
 8002182:	4618      	mov	r0, r3
 8002184:	371c      	adds	r7, #28
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	00f42400 	.word	0x00f42400
 8002198:	007a1200 	.word	0x007a1200

0800219c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021a2:	4b1e      	ldr	r3, [pc, #120]	@ (800221c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021ac:	4b1b      	ldr	r3, [pc, #108]	@ (800221c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	3301      	adds	r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d10c      	bne.n	80021da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021c0:	4a17      	ldr	r2, [pc, #92]	@ (8002220 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c8:	4a14      	ldr	r2, [pc, #80]	@ (800221c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ca:	68d2      	ldr	r2, [r2, #12]
 80021cc:	0a12      	lsrs	r2, r2, #8
 80021ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	617b      	str	r3, [r7, #20]
    break;
 80021d8:	e00c      	b.n	80021f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021da:	4a12      	ldr	r2, [pc, #72]	@ (8002224 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e2:	4a0e      	ldr	r2, [pc, #56]	@ (800221c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021e4:	68d2      	ldr	r2, [r2, #12]
 80021e6:	0a12      	lsrs	r2, r2, #8
 80021e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80021ec:	fb02 f303 	mul.w	r3, r2, r3
 80021f0:	617b      	str	r3, [r7, #20]
    break;
 80021f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021f4:	4b09      	ldr	r3, [pc, #36]	@ (800221c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	0e5b      	lsrs	r3, r3, #25
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	3301      	adds	r3, #1
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800220e:	687b      	ldr	r3, [r7, #4]
}
 8002210:	4618      	mov	r0, r3
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40021000 	.word	0x40021000
 8002220:	007a1200 	.word	0x007a1200
 8002224:	00f42400 	.word	0x00f42400

08002228 <memset>:
 8002228:	4402      	add	r2, r0
 800222a:	4603      	mov	r3, r0
 800222c:	4293      	cmp	r3, r2
 800222e:	d100      	bne.n	8002232 <memset+0xa>
 8002230:	4770      	bx	lr
 8002232:	f803 1b01 	strb.w	r1, [r3], #1
 8002236:	e7f9      	b.n	800222c <memset+0x4>

08002238 <__libc_init_array>:
 8002238:	b570      	push	{r4, r5, r6, lr}
 800223a:	4d0d      	ldr	r5, [pc, #52]	@ (8002270 <__libc_init_array+0x38>)
 800223c:	4c0d      	ldr	r4, [pc, #52]	@ (8002274 <__libc_init_array+0x3c>)
 800223e:	1b64      	subs	r4, r4, r5
 8002240:	10a4      	asrs	r4, r4, #2
 8002242:	2600      	movs	r6, #0
 8002244:	42a6      	cmp	r6, r4
 8002246:	d109      	bne.n	800225c <__libc_init_array+0x24>
 8002248:	4d0b      	ldr	r5, [pc, #44]	@ (8002278 <__libc_init_array+0x40>)
 800224a:	4c0c      	ldr	r4, [pc, #48]	@ (800227c <__libc_init_array+0x44>)
 800224c:	f000 f818 	bl	8002280 <_init>
 8002250:	1b64      	subs	r4, r4, r5
 8002252:	10a4      	asrs	r4, r4, #2
 8002254:	2600      	movs	r6, #0
 8002256:	42a6      	cmp	r6, r4
 8002258:	d105      	bne.n	8002266 <__libc_init_array+0x2e>
 800225a:	bd70      	pop	{r4, r5, r6, pc}
 800225c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002260:	4798      	blx	r3
 8002262:	3601      	adds	r6, #1
 8002264:	e7ee      	b.n	8002244 <__libc_init_array+0xc>
 8002266:	f855 3b04 	ldr.w	r3, [r5], #4
 800226a:	4798      	blx	r3
 800226c:	3601      	adds	r6, #1
 800226e:	e7f2      	b.n	8002256 <__libc_init_array+0x1e>
 8002270:	080022a8 	.word	0x080022a8
 8002274:	080022a8 	.word	0x080022a8
 8002278:	080022a8 	.word	0x080022a8
 800227c:	080022ac 	.word	0x080022ac

08002280 <_init>:
 8002280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002282:	bf00      	nop
 8002284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002286:	bc08      	pop	{r3}
 8002288:	469e      	mov	lr, r3
 800228a:	4770      	bx	lr

0800228c <_fini>:
 800228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228e:	bf00      	nop
 8002290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002292:	bc08      	pop	{r3}
 8002294:	469e      	mov	lr, r3
 8002296:	4770      	bx	lr
