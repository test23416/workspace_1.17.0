
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022b0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002488  08002488  00003488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002498  08002498  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002498  08002498  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002498  08002498  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002498  08002498  00003498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800249c  0800249c  0000349c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080024a0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  080024ac  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080024ac  00004080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008eb4  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001898  00000000  00000000  0000cef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  0000e788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000716  00000000  00000000  0000f0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b8a  00000000  00000000  0000f7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b453  00000000  00000000  00033380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e23ee  00000000  00000000  0003e7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120bc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002528  00000000  00000000  00120c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0012312c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002470 	.word	0x08002470

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002470 	.word	0x08002470

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 f9c6 	bl	80005ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f815 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f893 	bl	8000350 <MX_GPIO_Init>
  MX_I2C1_Init();
 800022a:	f000 f851 	bl	80002d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t addr = 0xE8;
 800022e:	23e8      	movs	r3, #232	@ 0xe8
 8000230:	71fb      	strb	r3, [r7, #7]
  uint8_t data = 0xFD;
 8000232:	23fd      	movs	r3, #253	@ 0xfd
 8000234:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(&hi2c1, addr, &data, 1, 10);
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	b299      	uxth	r1, r3
 800023a:	1dba      	adds	r2, r7, #6
 800023c:	230a      	movs	r3, #10
 800023e:	9300      	str	r3, [sp, #0]
 8000240:	2301      	movs	r3, #1
 8000242:	4802      	ldr	r0, [pc, #8]	@ (800024c <main+0x34>)
 8000244:	f000 fd26 	bl	8000c94 <HAL_I2C_Master_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000248:	bf00      	nop
 800024a:	e7fd      	b.n	8000248 <main+0x30>
 800024c:	20000028 	.word	0x20000028

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b094      	sub	sp, #80	@ 0x50
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	2238      	movs	r2, #56	@ 0x38
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f002 f8da 	bl	8002418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000272:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000276:	f001 f8d7 	bl	8001428 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027a:	2302      	movs	r3, #2
 800027c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000282:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000284:	2340      	movs	r3, #64	@ 0x40
 8000286:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000288:	2300      	movs	r3, #0
 800028a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028c:	f107 0318 	add.w	r3, r7, #24
 8000290:	4618      	mov	r0, r3
 8000292:	f001 f97d 	bl	8001590 <HAL_RCC_OscConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800029c:	f000 f87c 	bl	8000398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a0:	230f      	movs	r3, #15
 80002a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a4:	2301      	movs	r3, #1
 80002a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2100      	movs	r1, #0
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 fc7b 	bl	8001bb4 <HAL_RCC_ClockConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002c4:	f000 f868 	bl	8000398 <Error_Handler>
  }
}
 80002c8:	bf00      	nop
 80002ca:	3750      	adds	r7, #80	@ 0x50
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000344 <MX_I2C1_Init+0x74>)
 80002d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000348 <MX_I2C1_Init+0x78>)
 80002d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80002da:	4b1a      	ldr	r3, [pc, #104]	@ (8000344 <MX_I2C1_Init+0x74>)
 80002dc:	4a1b      	ldr	r2, [pc, #108]	@ (800034c <MX_I2C1_Init+0x7c>)
 80002de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002e0:	4b18      	ldr	r3, [pc, #96]	@ (8000344 <MX_I2C1_Init+0x74>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e6:	4b17      	ldr	r3, [pc, #92]	@ (8000344 <MX_I2C1_Init+0x74>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002ec:	4b15      	ldr	r3, [pc, #84]	@ (8000344 <MX_I2C1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002f2:	4b14      	ldr	r3, [pc, #80]	@ (8000344 <MX_I2C1_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002f8:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <MX_I2C1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002fe:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <MX_I2C1_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000304:	4b0f      	ldr	r3, [pc, #60]	@ (8000344 <MX_I2C1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800030a:	480e      	ldr	r0, [pc, #56]	@ (8000344 <MX_I2C1_Init+0x74>)
 800030c:	f000 fc26 	bl	8000b5c <HAL_I2C_Init>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000316:	f000 f83f 	bl	8000398 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800031a:	2100      	movs	r1, #0
 800031c:	4809      	ldr	r0, [pc, #36]	@ (8000344 <MX_I2C1_Init+0x74>)
 800031e:	f000 ffeb 	bl	80012f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000328:	f000 f836 	bl	8000398 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800032c:	2100      	movs	r1, #0
 800032e:	4805      	ldr	r0, [pc, #20]	@ (8000344 <MX_I2C1_Init+0x74>)
 8000330:	f001 f82d 	bl	800138e <HAL_I2CEx_ConfigDigitalFilter>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800033a:	f000 f82d 	bl	8000398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000028 	.word	0x20000028
 8000348:	40005400 	.word	0x40005400
 800034c:	00503d58 	.word	0x00503d58

08000350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000356:	4b0f      	ldr	r3, [pc, #60]	@ (8000394 <MX_GPIO_Init+0x44>)
 8000358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800035a:	4a0e      	ldr	r2, [pc, #56]	@ (8000394 <MX_GPIO_Init+0x44>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000362:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <MX_GPIO_Init+0x44>)
 8000364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036e:	4b09      	ldr	r3, [pc, #36]	@ (8000394 <MX_GPIO_Init+0x44>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000372:	4a08      	ldr	r2, [pc, #32]	@ (8000394 <MX_GPIO_Init+0x44>)
 8000374:	f043 0302 	orr.w	r3, r3, #2
 8000378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800037a:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <MX_GPIO_Init+0x44>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800037e:	f003 0302 	and.w	r3, r3, #2
 8000382:	603b      	str	r3, [r7, #0]
 8000384:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000

08000398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800039c:	b672      	cpsid	i
}
 800039e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a0:	bf00      	nop
 80003a2:	e7fd      	b.n	80003a0 <Error_Handler+0x8>

080003a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003aa:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <HAL_MspInit+0x44>)
 80003ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003ae:	4a0e      	ldr	r2, [pc, #56]	@ (80003e8 <HAL_MspInit+0x44>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80003b6:	4b0c      	ldr	r3, [pc, #48]	@ (80003e8 <HAL_MspInit+0x44>)
 80003b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c2:	4b09      	ldr	r3, [pc, #36]	@ (80003e8 <HAL_MspInit+0x44>)
 80003c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003c6:	4a08      	ldr	r2, [pc, #32]	@ (80003e8 <HAL_MspInit+0x44>)
 80003c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80003ce:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <HAL_MspInit+0x44>)
 80003d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003d6:	603b      	str	r3, [r7, #0]
 80003d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80003da:	f001 f8c9 	bl	8001570 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003de:	bf00      	nop
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000

080003ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b0a0      	sub	sp, #128	@ 0x80
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000404:	f107 0318 	add.w	r3, r7, #24
 8000408:	2254      	movs	r2, #84	@ 0x54
 800040a:	2100      	movs	r1, #0
 800040c:	4618      	mov	r0, r3
 800040e:	f002 f803 	bl	8002418 <memset>
  if(hi2c->Instance==I2C1)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a2d      	ldr	r2, [pc, #180]	@ (80004cc <HAL_I2C_MspInit+0xe0>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d153      	bne.n	80004c4 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800041c:	2340      	movs	r3, #64	@ 0x40
 800041e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000420:	2300      	movs	r3, #0
 8000422:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000424:	f107 0318 	add.w	r3, r7, #24
 8000428:	4618      	mov	r0, r3
 800042a:	f001 fda7 	bl	8001f7c <HAL_RCCEx_PeriphCLKConfig>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000434:	f7ff ffb0 	bl	8000398 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000438:	4b25      	ldr	r3, [pc, #148]	@ (80004d0 <HAL_I2C_MspInit+0xe4>)
 800043a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043c:	4a24      	ldr	r2, [pc, #144]	@ (80004d0 <HAL_I2C_MspInit+0xe4>)
 800043e:	f043 0301 	orr.w	r3, r3, #1
 8000442:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000444:	4b22      	ldr	r3, [pc, #136]	@ (80004d0 <HAL_I2C_MspInit+0xe4>)
 8000446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000448:	f003 0301 	and.w	r3, r3, #1
 800044c:	617b      	str	r3, [r7, #20]
 800044e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000450:	4b1f      	ldr	r3, [pc, #124]	@ (80004d0 <HAL_I2C_MspInit+0xe4>)
 8000452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000454:	4a1e      	ldr	r2, [pc, #120]	@ (80004d0 <HAL_I2C_MspInit+0xe4>)
 8000456:	f043 0302 	orr.w	r3, r3, #2
 800045a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800045c:	4b1c      	ldr	r3, [pc, #112]	@ (80004d0 <HAL_I2C_MspInit+0xe4>)
 800045e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000460:	f003 0302 	and.w	r3, r3, #2
 8000464:	613b      	str	r3, [r7, #16]
 8000466:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000468:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800046c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800046e:	2312      	movs	r3, #18
 8000470:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000476:	2300      	movs	r3, #0
 8000478:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800047a:	2304      	movs	r3, #4
 800047c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000482:	4619      	mov	r1, r3
 8000484:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000488:	f000 f9e6 	bl	8000858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800048c:	2380      	movs	r3, #128	@ 0x80
 800048e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000490:	2312      	movs	r3, #18
 8000492:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	2300      	movs	r3, #0
 8000496:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000498:	2300      	movs	r3, #0
 800049a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800049c:	2304      	movs	r3, #4
 800049e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80004a4:	4619      	mov	r1, r3
 80004a6:	480b      	ldr	r0, [pc, #44]	@ (80004d4 <HAL_I2C_MspInit+0xe8>)
 80004a8:	f000 f9d6 	bl	8000858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004ac:	4b08      	ldr	r3, [pc, #32]	@ (80004d0 <HAL_I2C_MspInit+0xe4>)
 80004ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004b0:	4a07      	ldr	r2, [pc, #28]	@ (80004d0 <HAL_I2C_MspInit+0xe4>)
 80004b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80004b8:	4b05      	ldr	r3, [pc, #20]	@ (80004d0 <HAL_I2C_MspInit+0xe4>)
 80004ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80004c4:	bf00      	nop
 80004c6:	3780      	adds	r7, #128	@ 0x80
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40005400 	.word	0x40005400
 80004d0:	40021000 	.word	0x40021000
 80004d4:	48000400 	.word	0x48000400

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <NMI_Handler+0x4>

080004e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <HardFault_Handler+0x4>

080004e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <MemManage_Handler+0x4>

080004f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <BusFault_Handler+0x4>

080004f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <UsageFault_Handler+0x4>

08000500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052e:	f000 f891 	bl	8000654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <SystemInit+0x20>)
 800053e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000542:	4a05      	ldr	r2, [pc, #20]	@ (8000558 <SystemInit+0x20>)
 8000544:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000548:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800055c:	480d      	ldr	r0, [pc, #52]	@ (8000594 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800055e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000560:	f7ff ffea 	bl	8000538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000564:	480c      	ldr	r0, [pc, #48]	@ (8000598 <LoopForever+0x6>)
  ldr r1, =_edata
 8000566:	490d      	ldr	r1, [pc, #52]	@ (800059c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000568:	4a0d      	ldr	r2, [pc, #52]	@ (80005a0 <LoopForever+0xe>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800056c:	e002      	b.n	8000574 <LoopCopyDataInit>

0800056e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000572:	3304      	adds	r3, #4

08000574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000578:	d3f9      	bcc.n	800056e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057a:	4a0a      	ldr	r2, [pc, #40]	@ (80005a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800057c:	4c0a      	ldr	r4, [pc, #40]	@ (80005a8 <LoopForever+0x16>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000580:	e001      	b.n	8000586 <LoopFillZerobss>

08000582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000584:	3204      	adds	r2, #4

08000586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000588:	d3fb      	bcc.n	8000582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800058a:	f001 ff4d 	bl	8002428 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800058e:	f7ff fe43 	bl	8000218 <main>

08000592 <LoopForever>:

LoopForever:
    b LoopForever
 8000592:	e7fe      	b.n	8000592 <LoopForever>
  ldr   r0, =_estack
 8000594:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800059c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005a0:	080024a0 	.word	0x080024a0
  ldr r2, =_sbss
 80005a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005a8:	20000080 	.word	0x20000080

080005ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005ac:	e7fe      	b.n	80005ac <ADC1_2_IRQHandler>

080005ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005b4:	2300      	movs	r3, #0
 80005b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f91b 	bl	80007f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005be:	200f      	movs	r0, #15
 80005c0:	f000 f80e 	bl	80005e0 <HAL_InitTick>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d002      	beq.n	80005d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005ca:	2301      	movs	r3, #1
 80005cc:	71fb      	strb	r3, [r7, #7]
 80005ce:	e001      	b.n	80005d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005d0:	f7ff fee8 	bl	80003a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005d4:	79fb      	ldrb	r3, [r7, #7]

}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005e8:	2300      	movs	r3, #0
 80005ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80005ec:	4b16      	ldr	r3, [pc, #88]	@ (8000648 <HAL_InitTick+0x68>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d022      	beq.n	800063a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80005f4:	4b15      	ldr	r3, [pc, #84]	@ (800064c <HAL_InitTick+0x6c>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b13      	ldr	r3, [pc, #76]	@ (8000648 <HAL_InitTick+0x68>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000600:	fbb1 f3f3 	udiv	r3, r1, r3
 8000604:	fbb2 f3f3 	udiv	r3, r2, r3
 8000608:	4618      	mov	r0, r3
 800060a:	f000 f918 	bl	800083e <HAL_SYSTICK_Config>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d10f      	bne.n	8000634 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b0f      	cmp	r3, #15
 8000618:	d809      	bhi.n	800062e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800061a:	2200      	movs	r2, #0
 800061c:	6879      	ldr	r1, [r7, #4]
 800061e:	f04f 30ff 	mov.w	r0, #4294967295
 8000622:	f000 f8f2 	bl	800080a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000626:	4a0a      	ldr	r2, [pc, #40]	@ (8000650 <HAL_InitTick+0x70>)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	e007      	b.n	800063e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	73fb      	strb	r3, [r7, #15]
 8000632:	e004      	b.n	800063e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000634:	2301      	movs	r3, #1
 8000636:	73fb      	strb	r3, [r7, #15]
 8000638:	e001      	b.n	800063e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800063e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000008 	.word	0x20000008
 800064c:	20000000 	.word	0x20000000
 8000650:	20000004 	.word	0x20000004

08000654 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <HAL_IncTick+0x1c>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <HAL_IncTick+0x20>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4413      	add	r3, r2
 8000662:	4a03      	ldr	r2, [pc, #12]	@ (8000670 <HAL_IncTick+0x1c>)
 8000664:	6013      	str	r3, [r2, #0]
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	2000007c 	.word	0x2000007c
 8000674:	20000008 	.word	0x20000008

08000678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return uwTick;
 800067c:	4b03      	ldr	r3, [pc, #12]	@ (800068c <HAL_GetTick+0x14>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	2000007c 	.word	0x2000007c

08000690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a0:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <__NVIC_SetPriorityGrouping+0x44>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a6:	68ba      	ldr	r2, [r7, #8]
 80006a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006ac:	4013      	ands	r3, r2
 80006ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006c2:	4a04      	ldr	r2, [pc, #16]	@ (80006d4 <__NVIC_SetPriorityGrouping+0x44>)
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	60d3      	str	r3, [r2, #12]
}
 80006c8:	bf00      	nop
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006dc:	4b04      	ldr	r3, [pc, #16]	@ (80006f0 <__NVIC_GetPriorityGrouping+0x18>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	0a1b      	lsrs	r3, r3, #8
 80006e2:	f003 0307 	and.w	r3, r3, #7
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	6039      	str	r1, [r7, #0]
 80006fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000704:	2b00      	cmp	r3, #0
 8000706:	db0a      	blt.n	800071e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	b2da      	uxtb	r2, r3
 800070c:	490c      	ldr	r1, [pc, #48]	@ (8000740 <__NVIC_SetPriority+0x4c>)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	0112      	lsls	r2, r2, #4
 8000714:	b2d2      	uxtb	r2, r2
 8000716:	440b      	add	r3, r1
 8000718:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800071c:	e00a      	b.n	8000734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4908      	ldr	r1, [pc, #32]	@ (8000744 <__NVIC_SetPriority+0x50>)
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	f003 030f 	and.w	r3, r3, #15
 800072a:	3b04      	subs	r3, #4
 800072c:	0112      	lsls	r2, r2, #4
 800072e:	b2d2      	uxtb	r2, r2
 8000730:	440b      	add	r3, r1
 8000732:	761a      	strb	r2, [r3, #24]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	e000e100 	.word	0xe000e100
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000748:	b480      	push	{r7}
 800074a:	b089      	sub	sp, #36	@ 0x24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f003 0307 	and.w	r3, r3, #7
 800075a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800075c:	69fb      	ldr	r3, [r7, #28]
 800075e:	f1c3 0307 	rsb	r3, r3, #7
 8000762:	2b04      	cmp	r3, #4
 8000764:	bf28      	it	cs
 8000766:	2304      	movcs	r3, #4
 8000768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	3304      	adds	r3, #4
 800076e:	2b06      	cmp	r3, #6
 8000770:	d902      	bls.n	8000778 <NVIC_EncodePriority+0x30>
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	3b03      	subs	r3, #3
 8000776:	e000      	b.n	800077a <NVIC_EncodePriority+0x32>
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	f04f 32ff 	mov.w	r2, #4294967295
 8000780:	69bb      	ldr	r3, [r7, #24]
 8000782:	fa02 f303 	lsl.w	r3, r2, r3
 8000786:	43da      	mvns	r2, r3
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	401a      	ands	r2, r3
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000790:	f04f 31ff 	mov.w	r1, #4294967295
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	fa01 f303 	lsl.w	r3, r1, r3
 800079a:	43d9      	mvns	r1, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a0:	4313      	orrs	r3, r2
         );
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3724      	adds	r7, #36	@ 0x24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
	...

080007b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007c0:	d301      	bcc.n	80007c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007c2:	2301      	movs	r3, #1
 80007c4:	e00f      	b.n	80007e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007c6:	4a0a      	ldr	r2, [pc, #40]	@ (80007f0 <SysTick_Config+0x40>)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ce:	210f      	movs	r1, #15
 80007d0:	f04f 30ff 	mov.w	r0, #4294967295
 80007d4:	f7ff ff8e 	bl	80006f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <SysTick_Config+0x40>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007de:	4b04      	ldr	r3, [pc, #16]	@ (80007f0 <SysTick_Config+0x40>)
 80007e0:	2207      	movs	r2, #7
 80007e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	e000e010 	.word	0xe000e010

080007f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff ff47 	bl	8000690 <__NVIC_SetPriorityGrouping>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b086      	sub	sp, #24
 800080e:	af00      	add	r7, sp, #0
 8000810:	4603      	mov	r3, r0
 8000812:	60b9      	str	r1, [r7, #8]
 8000814:	607a      	str	r2, [r7, #4]
 8000816:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000818:	f7ff ff5e 	bl	80006d8 <__NVIC_GetPriorityGrouping>
 800081c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	68b9      	ldr	r1, [r7, #8]
 8000822:	6978      	ldr	r0, [r7, #20]
 8000824:	f7ff ff90 	bl	8000748 <NVIC_EncodePriority>
 8000828:	4602      	mov	r2, r0
 800082a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082e:	4611      	mov	r1, r2
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff5f 	bl	80006f4 <__NVIC_SetPriority>
}
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff ffb2 	bl	80007b0 <SysTick_Config>
 800084c:	4603      	mov	r3, r0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000858:	b480      	push	{r7}
 800085a:	b087      	sub	sp, #28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000866:	e15a      	b.n	8000b1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	2101      	movs	r1, #1
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	fa01 f303 	lsl.w	r3, r1, r3
 8000874:	4013      	ands	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	2b00      	cmp	r3, #0
 800087c:	f000 814c 	beq.w	8000b18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	f003 0303 	and.w	r3, r3, #3
 8000888:	2b01      	cmp	r3, #1
 800088a:	d005      	beq.n	8000898 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000894:	2b02      	cmp	r3, #2
 8000896:	d130      	bne.n	80008fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	2203      	movs	r2, #3
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	43db      	mvns	r3, r3
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	4013      	ands	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	68da      	ldr	r2, [r3, #12]
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	693a      	ldr	r2, [r7, #16]
 80008be:	4313      	orrs	r3, r2
 80008c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008ce:	2201      	movs	r2, #1
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	43db      	mvns	r3, r3
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	4013      	ands	r3, r2
 80008dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	091b      	lsrs	r3, r3, #4
 80008e4:	f003 0201 	and.w	r2, r3, #1
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f003 0303 	and.w	r3, r3, #3
 8000902:	2b03      	cmp	r3, #3
 8000904:	d017      	beq.n	8000936 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	2203      	movs	r2, #3
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	4013      	ands	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	689a      	ldr	r2, [r3, #8]
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4313      	orrs	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f003 0303 	and.w	r3, r3, #3
 800093e:	2b02      	cmp	r3, #2
 8000940:	d123      	bne.n	800098a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	08da      	lsrs	r2, r3, #3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3208      	adds	r2, #8
 800094a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	220f      	movs	r2, #15
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	4013      	ands	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	691a      	ldr	r2, [r3, #16]
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	f003 0307 	and.w	r3, r3, #7
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	4313      	orrs	r3, r2
 800097a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	08da      	lsrs	r2, r3, #3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3208      	adds	r2, #8
 8000984:	6939      	ldr	r1, [r7, #16]
 8000986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	2203      	movs	r2, #3
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4013      	ands	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f003 0203 	and.w	r2, r3, #3
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f000 80a6 	beq.w	8000b18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009cc:	4b5b      	ldr	r3, [pc, #364]	@ (8000b3c <HAL_GPIO_Init+0x2e4>)
 80009ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009d0:	4a5a      	ldr	r2, [pc, #360]	@ (8000b3c <HAL_GPIO_Init+0x2e4>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80009d8:	4b58      	ldr	r3, [pc, #352]	@ (8000b3c <HAL_GPIO_Init+0x2e4>)
 80009da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009e4:	4a56      	ldr	r2, [pc, #344]	@ (8000b40 <HAL_GPIO_Init+0x2e8>)
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	089b      	lsrs	r3, r3, #2
 80009ea:	3302      	adds	r3, #2
 80009ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	f003 0303 	and.w	r3, r3, #3
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	220f      	movs	r2, #15
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a0e:	d01f      	beq.n	8000a50 <HAL_GPIO_Init+0x1f8>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a4c      	ldr	r2, [pc, #304]	@ (8000b44 <HAL_GPIO_Init+0x2ec>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d019      	beq.n	8000a4c <HAL_GPIO_Init+0x1f4>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a4b      	ldr	r2, [pc, #300]	@ (8000b48 <HAL_GPIO_Init+0x2f0>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d013      	beq.n	8000a48 <HAL_GPIO_Init+0x1f0>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a4a      	ldr	r2, [pc, #296]	@ (8000b4c <HAL_GPIO_Init+0x2f4>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d00d      	beq.n	8000a44 <HAL_GPIO_Init+0x1ec>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a49      	ldr	r2, [pc, #292]	@ (8000b50 <HAL_GPIO_Init+0x2f8>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d007      	beq.n	8000a40 <HAL_GPIO_Init+0x1e8>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a48      	ldr	r2, [pc, #288]	@ (8000b54 <HAL_GPIO_Init+0x2fc>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d101      	bne.n	8000a3c <HAL_GPIO_Init+0x1e4>
 8000a38:	2305      	movs	r3, #5
 8000a3a:	e00a      	b.n	8000a52 <HAL_GPIO_Init+0x1fa>
 8000a3c:	2306      	movs	r3, #6
 8000a3e:	e008      	b.n	8000a52 <HAL_GPIO_Init+0x1fa>
 8000a40:	2304      	movs	r3, #4
 8000a42:	e006      	b.n	8000a52 <HAL_GPIO_Init+0x1fa>
 8000a44:	2303      	movs	r3, #3
 8000a46:	e004      	b.n	8000a52 <HAL_GPIO_Init+0x1fa>
 8000a48:	2302      	movs	r3, #2
 8000a4a:	e002      	b.n	8000a52 <HAL_GPIO_Init+0x1fa>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e000      	b.n	8000a52 <HAL_GPIO_Init+0x1fa>
 8000a50:	2300      	movs	r3, #0
 8000a52:	697a      	ldr	r2, [r7, #20]
 8000a54:	f002 0203 	and.w	r2, r2, #3
 8000a58:	0092      	lsls	r2, r2, #2
 8000a5a:	4093      	lsls	r3, r2
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a62:	4937      	ldr	r1, [pc, #220]	@ (8000b40 <HAL_GPIO_Init+0x2e8>)
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	089b      	lsrs	r3, r3, #2
 8000a68:	3302      	adds	r3, #2
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a70:	4b39      	ldr	r3, [pc, #228]	@ (8000b58 <HAL_GPIO_Init+0x300>)
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d003      	beq.n	8000a94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a94:	4a30      	ldr	r2, [pc, #192]	@ (8000b58 <HAL_GPIO_Init+0x300>)
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b58 <HAL_GPIO_Init+0x300>)
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000abe:	4a26      	ldr	r2, [pc, #152]	@ (8000b58 <HAL_GPIO_Init+0x300>)
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000ac4:	4b24      	ldr	r3, [pc, #144]	@ (8000b58 <HAL_GPIO_Init+0x300>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	43db      	mvns	r3, r3
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b58 <HAL_GPIO_Init+0x300>)
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <HAL_GPIO_Init+0x300>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	43db      	mvns	r3, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d003      	beq.n	8000b12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b12:	4a11      	ldr	r2, [pc, #68]	@ (8000b58 <HAL_GPIO_Init+0x300>)
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	fa22 f303 	lsr.w	r3, r2, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f47f ae9d 	bne.w	8000868 <HAL_GPIO_Init+0x10>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	bf00      	nop
 8000b32:	371c      	adds	r7, #28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010000 	.word	0x40010000
 8000b44:	48000400 	.word	0x48000400
 8000b48:	48000800 	.word	0x48000800
 8000b4c:	48000c00 	.word	0x48000c00
 8000b50:	48001000 	.word	0x48001000
 8000b54:	48001400 	.word	0x48001400
 8000b58:	40010400 	.word	0x40010400

08000b5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d101      	bne.n	8000b6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e08d      	b.n	8000c8a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d106      	bne.n	8000b88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff fc32 	bl	80003ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2224      	movs	r2, #36	@ 0x24
 8000b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f022 0201 	bic.w	r2, r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000bac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	689a      	ldr	r2, [r3, #8]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000bbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d107      	bne.n	8000bd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	e006      	b.n	8000be4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	689a      	ldr	r2, [r3, #8]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000be2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d108      	bne.n	8000bfe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	e007      	b.n	8000c0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000c0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	6812      	ldr	r2, [r2, #0]
 8000c18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	68da      	ldr	r2, [r3, #12]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000c30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	691a      	ldr	r2, [r3, #16]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69d9      	ldr	r1, [r3, #28]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a1a      	ldr	r2, [r3, #32]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f042 0201 	orr.w	r2, r2, #1
 8000c6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2220      	movs	r2, #32
 8000c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af02      	add	r7, sp, #8
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	607a      	str	r2, [r7, #4]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	817b      	strh	r3, [r7, #10]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b20      	cmp	r3, #32
 8000cb2:	f040 80fd 	bne.w	8000eb0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d101      	bne.n	8000cc4 <HAL_I2C_Master_Transmit+0x30>
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	e0f6      	b.n	8000eb2 <HAL_I2C_Master_Transmit+0x21e>
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000ccc:	f7ff fcd4 	bl	8000678 <HAL_GetTick>
 8000cd0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	2319      	movs	r3, #25
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cde:	68f8      	ldr	r0, [r7, #12]
 8000ce0:	f000 f914 	bl	8000f0c <I2C_WaitOnFlagUntilTimeout>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e0e1      	b.n	8000eb2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2221      	movs	r2, #33	@ 0x21
 8000cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2210      	movs	r2, #16
 8000cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2200      	movs	r2, #0
 8000d02:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	893a      	ldrh	r2, [r7, #8]
 8000d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2200      	movs	r2, #0
 8000d14:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	2bff      	cmp	r3, #255	@ 0xff
 8000d1e:	d906      	bls.n	8000d2e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	22ff      	movs	r2, #255	@ 0xff
 8000d24:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8000d26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	e007      	b.n	8000d3e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8000d38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d3c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d024      	beq.n	8000d90 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d4a:	781a      	ldrb	r2, [r3, #0]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d56:	1c5a      	adds	r2, r3, #1
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	3b01      	subs	r3, #1
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	8979      	ldrh	r1, [r7, #10]
 8000d82:	4b4e      	ldr	r3, [pc, #312]	@ (8000ebc <HAL_I2C_Master_Transmit+0x228>)
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	f000 fa83 	bl	8001294 <I2C_TransferConfig>
 8000d8e:	e066      	b.n	8000e5e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	8979      	ldrh	r1, [r7, #10]
 8000d98:	4b48      	ldr	r3, [pc, #288]	@ (8000ebc <HAL_I2C_Master_Transmit+0x228>)
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	f000 fa78 	bl	8001294 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000da4:	e05b      	b.n	8000e5e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	6a39      	ldr	r1, [r7, #32]
 8000daa:	68f8      	ldr	r0, [r7, #12]
 8000dac:	f000 f907 	bl	8000fbe <I2C_WaitOnTXISFlagUntilTimeout>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e07b      	b.n	8000eb2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dbe:	781a      	ldrb	r2, [r3, #0]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000de2:	3b01      	subs	r3, #1
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d034      	beq.n	8000e5e <HAL_I2C_Master_Transmit+0x1ca>
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d130      	bne.n	8000e5e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	6a3b      	ldr	r3, [r7, #32]
 8000e02:	2200      	movs	r2, #0
 8000e04:	2180      	movs	r1, #128	@ 0x80
 8000e06:	68f8      	ldr	r0, [r7, #12]
 8000e08:	f000 f880 	bl	8000f0c <I2C_WaitOnFlagUntilTimeout>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e04d      	b.n	8000eb2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	2bff      	cmp	r3, #255	@ 0xff
 8000e1e:	d90e      	bls.n	8000e3e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	22ff      	movs	r2, #255	@ 0xff
 8000e24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	8979      	ldrh	r1, [r7, #10]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e36:	68f8      	ldr	r0, [r7, #12]
 8000e38:	f000 fa2c 	bl	8001294 <I2C_TransferConfig>
 8000e3c:	e00f      	b.n	8000e5e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	8979      	ldrh	r1, [r7, #10]
 8000e50:	2300      	movs	r3, #0
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f000 fa1b 	bl	8001294 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d19e      	bne.n	8000da6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	6a39      	ldr	r1, [r7, #32]
 8000e6c:	68f8      	ldr	r0, [r7, #12]
 8000e6e:	f000 f8ed 	bl	800104c <I2C_WaitOnSTOPFlagUntilTimeout>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e01a      	b.n	8000eb2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2220      	movs	r2, #32
 8000e82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	6859      	ldr	r1, [r3, #4]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <HAL_I2C_Master_Transmit+0x22c>)
 8000e90:	400b      	ands	r3, r1
 8000e92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2220      	movs	r2, #32
 8000e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	e000      	b.n	8000eb2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8000eb0:	2302      	movs	r3, #2
  }
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	80002000 	.word	0x80002000
 8000ec0:	fe00e800 	.word	0xfe00e800

08000ec4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d103      	bne.n	8000ee2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d007      	beq.n	8000f00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	699a      	ldr	r2, [r3, #24]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f042 0201 	orr.w	r2, r2, #1
 8000efe:	619a      	str	r2, [r3, #24]
  }
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f1c:	e03b      	b.n	8000f96 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	6839      	ldr	r1, [r7, #0]
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f000 f8d6 	bl	80010d4 <I2C_IsErrorOccurred>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e041      	b.n	8000fb6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f38:	d02d      	beq.n	8000f96 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f3a:	f7ff fb9d 	bl	8000678 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d302      	bcc.n	8000f50 <I2C_WaitOnFlagUntilTimeout+0x44>
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d122      	bne.n	8000f96 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	699a      	ldr	r2, [r3, #24]
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	bf0c      	ite	eq
 8000f60:	2301      	moveq	r3, #1
 8000f62:	2300      	movne	r3, #0
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d113      	bne.n	8000f96 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f72:	f043 0220 	orr.w	r2, r3, #32
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2220      	movs	r2, #32
 8000f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00f      	b.n	8000fb6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	699a      	ldr	r2, [r3, #24]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	68ba      	ldr	r2, [r7, #8]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	bf0c      	ite	eq
 8000fa6:	2301      	moveq	r3, #1
 8000fa8:	2300      	movne	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d0b4      	beq.n	8000f1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	60f8      	str	r0, [r7, #12]
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000fca:	e033      	b.n	8001034 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	68b9      	ldr	r1, [r7, #8]
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f000 f87f 	bl	80010d4 <I2C_IsErrorOccurred>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e031      	b.n	8001044 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe6:	d025      	beq.n	8001034 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000fe8:	f7ff fb46 	bl	8000678 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d302      	bcc.n	8000ffe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d11a      	bne.n	8001034 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b02      	cmp	r3, #2
 800100a:	d013      	beq.n	8001034 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001010:	f043 0220 	orr.w	r2, r3, #32
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2220      	movs	r2, #32
 800101c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e007      	b.n	8001044 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b02      	cmp	r3, #2
 8001040:	d1c4      	bne.n	8000fcc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001058:	e02f      	b.n	80010ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	68b9      	ldr	r1, [r7, #8]
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f000 f838 	bl	80010d4 <I2C_IsErrorOccurred>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e02d      	b.n	80010ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800106e:	f7ff fb03 	bl	8000678 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	429a      	cmp	r2, r3
 800107c:	d302      	bcc.n	8001084 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d11a      	bne.n	80010ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f003 0320 	and.w	r3, r3, #32
 800108e:	2b20      	cmp	r3, #32
 8001090:	d013      	beq.n	80010ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001096:	f043 0220 	orr.w	r2, r3, #32
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2220      	movs	r2, #32
 80010a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e007      	b.n	80010ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0320 	and.w	r3, r3, #32
 80010c4:	2b20      	cmp	r3, #32
 80010c6:	d1c8      	bne.n	800105a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	@ 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	f003 0310 	and.w	r3, r3, #16
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d068      	beq.n	80011d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2210      	movs	r2, #16
 8001106:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001108:	e049      	b.n	800119e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001110:	d045      	beq.n	800119e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001112:	f7ff fab1 	bl	8000678 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	429a      	cmp	r2, r3
 8001120:	d302      	bcc.n	8001128 <I2C_IsErrorOccurred+0x54>
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d13a      	bne.n	800119e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001132:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800113a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001146:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800114a:	d121      	bne.n	8001190 <I2C_IsErrorOccurred+0xbc>
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001152:	d01d      	beq.n	8001190 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001154:	7cfb      	ldrb	r3, [r7, #19]
 8001156:	2b20      	cmp	r3, #32
 8001158:	d01a      	beq.n	8001190 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001168:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800116a:	f7ff fa85 	bl	8000678 <HAL_GetTick>
 800116e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001170:	e00e      	b.n	8001190 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001172:	f7ff fa81 	bl	8000678 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b19      	cmp	r3, #25
 800117e:	d907      	bls.n	8001190 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001180:	6a3b      	ldr	r3, [r7, #32]
 8001182:	f043 0320 	orr.w	r3, r3, #32
 8001186:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800118e:	e006      	b.n	800119e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	f003 0320 	and.w	r3, r3, #32
 800119a:	2b20      	cmp	r3, #32
 800119c:	d1e9      	bne.n	8001172 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0320 	and.w	r3, r3, #32
 80011a8:	2b20      	cmp	r3, #32
 80011aa:	d003      	beq.n	80011b4 <I2C_IsErrorOccurred+0xe0>
 80011ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0aa      	beq.n	800110a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80011b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d103      	bne.n	80011c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2220      	movs	r2, #32
 80011c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00b      	beq.n	80011fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00b      	beq.n	800121e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	f043 0308 	orr.w	r3, r3, #8
 800120c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001216:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00b      	beq.n	8001240 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001228:	6a3b      	ldr	r3, [r7, #32]
 800122a:	f043 0302 	orr.w	r3, r3, #2
 800122e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001238:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001244:	2b00      	cmp	r3, #0
 8001246:	d01c      	beq.n	8001282 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f7ff fe3b 	bl	8000ec4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6859      	ldr	r1, [r3, #4]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b0d      	ldr	r3, [pc, #52]	@ (8001290 <I2C_IsErrorOccurred+0x1bc>)
 800125a:	400b      	ands	r3, r1
 800125c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	431a      	orrs	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2220      	movs	r2, #32
 800126e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001282:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001286:	4618      	mov	r0, r3
 8001288:	3728      	adds	r7, #40	@ 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	fe00e800 	.word	0xfe00e800

08001294 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	460b      	mov	r3, r1
 80012a0:	817b      	strh	r3, [r7, #10]
 80012a2:	4613      	mov	r3, r2
 80012a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80012a6:	897b      	ldrh	r3, [r7, #10]
 80012a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80012ac:	7a7b      	ldrb	r3, [r7, #9]
 80012ae:	041b      	lsls	r3, r3, #16
 80012b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80012b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	4313      	orrs	r3, r2
 80012be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	0d5b      	lsrs	r3, r3, #21
 80012ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80012d2:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <I2C_TransferConfig+0x60>)
 80012d4:	430b      	orrs	r3, r1
 80012d6:	43db      	mvns	r3, r3
 80012d8:	ea02 0103 	and.w	r1, r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80012e6:	bf00      	nop
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	03ff63ff 	.word	0x03ff63ff

080012f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b20      	cmp	r3, #32
 800130c:	d138      	bne.n	8001380 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001314:	2b01      	cmp	r3, #1
 8001316:	d101      	bne.n	800131c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001318:	2302      	movs	r3, #2
 800131a:	e032      	b.n	8001382 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2224      	movs	r2, #36	@ 0x24
 8001328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800134a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6819      	ldr	r1, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f042 0201 	orr.w	r2, r2, #1
 800136a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2220      	movs	r2, #32
 8001370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	e000      	b.n	8001382 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001380:	2302      	movs	r3, #2
  }
}
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800138e:	b480      	push	{r7}
 8001390:	b085      	sub	sp, #20
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b20      	cmp	r3, #32
 80013a2:	d139      	bne.n	8001418 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d101      	bne.n	80013b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e033      	b.n	800141a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2224      	movs	r2, #36	@ 0x24
 80013be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0201 	bic.w	r2, r2, #1
 80013d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80013e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0201 	orr.w	r2, r2, #1
 8001402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2220      	movs	r2, #32
 8001408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	e000      	b.n	800141a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001418:	2302      	movs	r3, #2
  }
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d141      	bne.n	80014ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001436:	4b4b      	ldr	r3, [pc, #300]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800143e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001442:	d131      	bne.n	80014a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001444:	4b47      	ldr	r3, [pc, #284]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800144a:	4a46      	ldr	r2, [pc, #280]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001450:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001454:	4b43      	ldr	r3, [pc, #268]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800145c:	4a41      	ldr	r2, [pc, #260]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001462:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001464:	4b40      	ldr	r3, [pc, #256]	@ (8001568 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2232      	movs	r2, #50	@ 0x32
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	4a3f      	ldr	r2, [pc, #252]	@ (800156c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001470:	fba2 2303 	umull	r2, r3, r2, r3
 8001474:	0c9b      	lsrs	r3, r3, #18
 8001476:	3301      	adds	r3, #1
 8001478:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800147a:	e002      	b.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3b01      	subs	r3, #1
 8001480:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001482:	4b38      	ldr	r3, [pc, #224]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800148a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800148e:	d102      	bne.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f2      	bne.n	800147c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001496:	4b33      	ldr	r3, [pc, #204]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800149e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014a2:	d158      	bne.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e057      	b.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014ae:	4a2d      	ldr	r2, [pc, #180]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014b8:	e04d      	b.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014c0:	d141      	bne.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014c2:	4b28      	ldr	r3, [pc, #160]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ce:	d131      	bne.n	8001534 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014d0:	4b24      	ldr	r3, [pc, #144]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014d6:	4a23      	ldr	r2, [pc, #140]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e0:	4b20      	ldr	r3, [pc, #128]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001568 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2232      	movs	r2, #50	@ 0x32
 80014f6:	fb02 f303 	mul.w	r3, r2, r3
 80014fa:	4a1c      	ldr	r2, [pc, #112]	@ (800156c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001500:	0c9b      	lsrs	r3, r3, #18
 8001502:	3301      	adds	r3, #1
 8001504:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001506:	e002      	b.n	800150e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	3b01      	subs	r3, #1
 800150c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800150e:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800151a:	d102      	bne.n	8001522 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f2      	bne.n	8001508 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800152a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800152e:	d112      	bne.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e011      	b.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001534:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800153a:	4a0a      	ldr	r2, [pc, #40]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001540:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001544:	e007      	b.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001546:	4b07      	ldr	r3, [pc, #28]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800154e:	4a05      	ldr	r2, [pc, #20]	@ (8001564 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001550:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001554:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40007000 	.word	0x40007000
 8001568:	20000000 	.word	0x20000000
 800156c:	431bde83 	.word	0x431bde83

08001570 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4a04      	ldr	r2, [pc, #16]	@ (800158c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800157a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800157e:	6093      	str	r3, [r2, #8]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40007000 	.word	0x40007000

08001590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e2fe      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d075      	beq.n	800169a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ae:	4b97      	ldr	r3, [pc, #604]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015b8:	4b94      	ldr	r3, [pc, #592]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	2b0c      	cmp	r3, #12
 80015c6:	d102      	bne.n	80015ce <HAL_RCC_OscConfig+0x3e>
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d002      	beq.n	80015d4 <HAL_RCC_OscConfig+0x44>
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d10b      	bne.n	80015ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	4b8d      	ldr	r3, [pc, #564]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d05b      	beq.n	8001698 <HAL_RCC_OscConfig+0x108>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d157      	bne.n	8001698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e2d9      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015f4:	d106      	bne.n	8001604 <HAL_RCC_OscConfig+0x74>
 80015f6:	4b85      	ldr	r3, [pc, #532]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a84      	ldr	r2, [pc, #528]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e01d      	b.n	8001640 <HAL_RCC_OscConfig+0xb0>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x98>
 800160e:	4b7f      	ldr	r3, [pc, #508]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a7e      	ldr	r2, [pc, #504]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 8001614:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	4b7c      	ldr	r3, [pc, #496]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a7b      	ldr	r2, [pc, #492]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e00b      	b.n	8001640 <HAL_RCC_OscConfig+0xb0>
 8001628:	4b78      	ldr	r3, [pc, #480]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a77      	ldr	r2, [pc, #476]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 800162e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4b75      	ldr	r3, [pc, #468]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a74      	ldr	r2, [pc, #464]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 800163a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800163e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d013      	beq.n	8001670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001648:	f7ff f816 	bl	8000678 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff f812 	bl	8000678 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	@ 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e29e      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001662:	4b6a      	ldr	r3, [pc, #424]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f0      	beq.n	8001650 <HAL_RCC_OscConfig+0xc0>
 800166e:	e014      	b.n	800169a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff f802 	bl	8000678 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001678:	f7fe fffe 	bl	8000678 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	@ 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e28a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800168a:	4b60      	ldr	r3, [pc, #384]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0xe8>
 8001696:	e000      	b.n	800169a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d075      	beq.n	8001792 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016a6:	4b59      	ldr	r3, [pc, #356]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016b0:	4b56      	ldr	r3, [pc, #344]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2b0c      	cmp	r3, #12
 80016be:	d102      	bne.n	80016c6 <HAL_RCC_OscConfig+0x136>
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d002      	beq.n	80016cc <HAL_RCC_OscConfig+0x13c>
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d11f      	bne.n	800170c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016cc:	4b4f      	ldr	r3, [pc, #316]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_OscConfig+0x154>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e25d      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e4:	4b49      	ldr	r3, [pc, #292]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	061b      	lsls	r3, r3, #24
 80016f2:	4946      	ldr	r1, [pc, #280]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016f8:	4b45      	ldr	r3, [pc, #276]	@ (8001810 <HAL_RCC_OscConfig+0x280>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff6f 	bl	80005e0 <HAL_InitTick>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d043      	beq.n	8001790 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e249      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d023      	beq.n	800175c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001714:	4b3d      	ldr	r3, [pc, #244]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a3c      	ldr	r2, [pc, #240]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 800171a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800171e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7fe ffaa 	bl	8000678 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001728:	f7fe ffa6 	bl	8000678 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e232      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800173a:	4b34      	ldr	r3, [pc, #208]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001746:	4b31      	ldr	r3, [pc, #196]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	061b      	lsls	r3, r3, #24
 8001754:	492d      	ldr	r1, [pc, #180]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 8001756:	4313      	orrs	r3, r2
 8001758:	604b      	str	r3, [r1, #4]
 800175a:	e01a      	b.n	8001792 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175c:	4b2b      	ldr	r3, [pc, #172]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a2a      	ldr	r2, [pc, #168]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 8001762:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7fe ff86 	bl	8000678 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001770:	f7fe ff82 	bl	8000678 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e20e      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001782:	4b22      	ldr	r3, [pc, #136]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x1e0>
 800178e:	e000      	b.n	8001792 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001790:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d041      	beq.n	8001822 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d01c      	beq.n	80017e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a6:	4b19      	ldr	r3, [pc, #100]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80017a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ac:	4a17      	ldr	r2, [pc, #92]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b6:	f7fe ff5f 	bl	8000678 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017be:	f7fe ff5b 	bl	8000678 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e1e7      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d0:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80017d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0ef      	beq.n	80017be <HAL_RCC_OscConfig+0x22e>
 80017de:	e020      	b.n	8001822 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e0:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80017e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017e6:	4a09      	ldr	r2, [pc, #36]	@ (800180c <HAL_RCC_OscConfig+0x27c>)
 80017e8:	f023 0301 	bic.w	r3, r3, #1
 80017ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f0:	f7fe ff42 	bl	8000678 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f6:	e00d      	b.n	8001814 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f8:	f7fe ff3e 	bl	8000678 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d906      	bls.n	8001814 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e1ca      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000
 8001810:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001814:	4b8c      	ldr	r3, [pc, #560]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1ea      	bne.n	80017f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80a6 	beq.w	800197c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001830:	2300      	movs	r3, #0
 8001832:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001834:	4b84      	ldr	r3, [pc, #528]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_RCC_OscConfig+0x2b4>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <HAL_RCC_OscConfig+0x2b6>
 8001844:	2300      	movs	r3, #0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00d      	beq.n	8001866 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 800184c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001854:	6593      	str	r3, [r2, #88]	@ 0x58
 8001856:	4b7c      	ldr	r3, [pc, #496]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001862:	2301      	movs	r3, #1
 8001864:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001866:	4b79      	ldr	r3, [pc, #484]	@ (8001a4c <HAL_RCC_OscConfig+0x4bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d118      	bne.n	80018a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001872:	4b76      	ldr	r3, [pc, #472]	@ (8001a4c <HAL_RCC_OscConfig+0x4bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a75      	ldr	r2, [pc, #468]	@ (8001a4c <HAL_RCC_OscConfig+0x4bc>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800187c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187e:	f7fe fefb 	bl	8000678 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001886:	f7fe fef7 	bl	8000678 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e183      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001898:	4b6c      	ldr	r3, [pc, #432]	@ (8001a4c <HAL_RCC_OscConfig+0x4bc>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d108      	bne.n	80018be <HAL_RCC_OscConfig+0x32e>
 80018ac:	4b66      	ldr	r3, [pc, #408]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b2:	4a65      	ldr	r2, [pc, #404]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018bc:	e024      	b.n	8001908 <HAL_RCC_OscConfig+0x378>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	d110      	bne.n	80018e8 <HAL_RCC_OscConfig+0x358>
 80018c6:	4b60      	ldr	r3, [pc, #384]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018cc:	4a5e      	ldr	r2, [pc, #376]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018dc:	4a5a      	ldr	r2, [pc, #360]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018e6:	e00f      	b.n	8001908 <HAL_RCC_OscConfig+0x378>
 80018e8:	4b57      	ldr	r3, [pc, #348]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ee:	4a56      	ldr	r2, [pc, #344]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018f8:	4b53      	ldr	r3, [pc, #332]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80018fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018fe:	4a52      	ldr	r2, [pc, #328]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001900:	f023 0304 	bic.w	r3, r3, #4
 8001904:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d016      	beq.n	800193e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001910:	f7fe feb2 	bl	8000678 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001916:	e00a      	b.n	800192e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001918:	f7fe feae 	bl	8000678 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e138      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800192e:	4b46      	ldr	r3, [pc, #280]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0ed      	beq.n	8001918 <HAL_RCC_OscConfig+0x388>
 800193c:	e015      	b.n	800196a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193e:	f7fe fe9b 	bl	8000678 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001944:	e00a      	b.n	800195c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001946:	f7fe fe97 	bl	8000678 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001954:	4293      	cmp	r3, r2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e121      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800195c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 800195e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1ed      	bne.n	8001946 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800196a:	7ffb      	ldrb	r3, [r7, #31]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001970:	4b35      	ldr	r3, [pc, #212]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001974:	4a34      	ldr	r2, [pc, #208]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001976:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800197a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0320 	and.w	r3, r3, #32
 8001984:	2b00      	cmp	r3, #0
 8001986:	d03c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01c      	beq.n	80019ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001990:	4b2d      	ldr	r3, [pc, #180]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001992:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001996:	4a2c      	ldr	r2, [pc, #176]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a0:	f7fe fe6a 	bl	8000678 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019a8:	f7fe fe66 	bl	8000678 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e0f2      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ba:	4b23      	ldr	r3, [pc, #140]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80019bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0ef      	beq.n	80019a8 <HAL_RCC_OscConfig+0x418>
 80019c8:	e01b      	b.n	8001a02 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80019cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019da:	f7fe fe4d 	bl	8000678 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019e2:	f7fe fe49 	bl	8000678 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e0d5      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019f4:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 80019f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ef      	bne.n	80019e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80c9 	beq.w	8001b9e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b0c      	cmp	r3, #12
 8001a16:	f000 8083 	beq.w	8001b20 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d15e      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a08      	ldr	r2, [pc, #32]	@ (8001a48 <HAL_RCC_OscConfig+0x4b8>)
 8001a28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7fe fe23 	bl	8000678 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a34:	e00c      	b.n	8001a50 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a36:	f7fe fe1f 	bl	8000678 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d905      	bls.n	8001a50 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e0ab      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a50:	4b55      	ldr	r3, [pc, #340]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1ec      	bne.n	8001a36 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a5c:	4b52      	ldr	r3, [pc, #328]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	4b52      	ldr	r3, [pc, #328]	@ (8001bac <HAL_RCC_OscConfig+0x61c>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6a11      	ldr	r1, [r2, #32]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a6c:	3a01      	subs	r2, #1
 8001a6e:	0112      	lsls	r2, r2, #4
 8001a70:	4311      	orrs	r1, r2
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001a76:	0212      	lsls	r2, r2, #8
 8001a78:	4311      	orrs	r1, r2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a7e:	0852      	lsrs	r2, r2, #1
 8001a80:	3a01      	subs	r2, #1
 8001a82:	0552      	lsls	r2, r2, #21
 8001a84:	4311      	orrs	r1, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a8a:	0852      	lsrs	r2, r2, #1
 8001a8c:	3a01      	subs	r2, #1
 8001a8e:	0652      	lsls	r2, r2, #25
 8001a90:	4311      	orrs	r1, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a96:	06d2      	lsls	r2, r2, #27
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	4943      	ldr	r1, [pc, #268]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa0:	4b41      	ldr	r3, [pc, #260]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a40      	ldr	r2, [pc, #256]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001aa6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aaa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001aac:	4b3e      	ldr	r3, [pc, #248]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001ab2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ab6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7fe fdde 	bl	8000678 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7fe fdda 	bl	8000678 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e066      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad2:	4b35      	ldr	r3, [pc, #212]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x530>
 8001ade:	e05e      	b.n	8001b9e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae0:	4b31      	ldr	r3, [pc, #196]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a30      	ldr	r2, [pc, #192]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001ae6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7fe fdc4 	bl	8000678 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af4:	f7fe fdc0 	bl	8000678 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e04c      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b06:	4b28      	ldr	r3, [pc, #160]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b12:	4b25      	ldr	r3, [pc, #148]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	4924      	ldr	r1, [pc, #144]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001b18:	4b25      	ldr	r3, [pc, #148]	@ (8001bb0 <HAL_RCC_OscConfig+0x620>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	60cb      	str	r3, [r1, #12]
 8001b1e:	e03e      	b.n	8001b9e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e039      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba8 <HAL_RCC_OscConfig+0x618>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f003 0203 	and.w	r2, r3, #3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d12c      	bne.n	8001b9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d123      	bne.n	8001b9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d11b      	bne.n	8001b9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d113      	bne.n	8001b9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7c:	085b      	lsrs	r3, r3, #1
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d109      	bne.n	8001b9a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b90:	085b      	lsrs	r3, r3, #1
 8001b92:	3b01      	subs	r3, #1
 8001b94:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d001      	beq.n	8001b9e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3720      	adds	r7, #32
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	019f800c 	.word	0x019f800c
 8001bb0:	feeefffc 	.word	0xfeeefffc

08001bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e11e      	b.n	8001e0a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b91      	ldr	r3, [pc, #580]	@ (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d910      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b8e      	ldr	r3, [pc, #568]	@ (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 020f 	bic.w	r2, r3, #15
 8001be2:	498c      	ldr	r1, [pc, #560]	@ (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b8a      	ldr	r3, [pc, #552]	@ (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e106      	b.n	8001e0a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d073      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d129      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c10:	4b81      	ldr	r3, [pc, #516]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0f4      	b.n	8001e0a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c20:	f000 f966 	bl	8001ef0 <RCC_GetSysClockFreqFromPLLSource>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4a7c      	ldr	r2, [pc, #496]	@ (8001e1c <HAL_RCC_ClockConfig+0x268>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d93f      	bls.n	8001cae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c2e:	4b7a      	ldr	r3, [pc, #488]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d033      	beq.n	8001cae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d12f      	bne.n	8001cae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c4e:	4b72      	ldr	r3, [pc, #456]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c56:	4a70      	ldr	r2, [pc, #448]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c5e:	2380      	movs	r3, #128	@ 0x80
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	e024      	b.n	8001cae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d107      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c6c:	4b6a      	ldr	r3, [pc, #424]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d109      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0c6      	b.n	8001e0a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c7c:	4b66      	ldr	r3, [pc, #408]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0be      	b.n	8001e0a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c8c:	f000 f8ce 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4a61      	ldr	r2, [pc, #388]	@ (8001e1c <HAL_RCC_ClockConfig+0x268>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d909      	bls.n	8001cae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c9a:	4b5f      	ldr	r3, [pc, #380]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ca2:	4a5d      	ldr	r2, [pc, #372]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ca8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001caa:	2380      	movs	r3, #128	@ 0x80
 8001cac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cae:	4b5a      	ldr	r3, [pc, #360]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f023 0203 	bic.w	r2, r3, #3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	4957      	ldr	r1, [pc, #348]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc0:	f7fe fcda 	bl	8000678 <HAL_GetTick>
 8001cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc6:	e00a      	b.n	8001cde <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc8:	f7fe fcd6 	bl	8000678 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e095      	b.n	8001e0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cde:	4b4e      	ldr	r3, [pc, #312]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 020c 	and.w	r2, r3, #12
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d1eb      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d023      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d08:	4b43      	ldr	r3, [pc, #268]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4a42      	ldr	r2, [pc, #264]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001d0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d12:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d007      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d20:	4b3d      	ldr	r3, [pc, #244]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001d28:	4a3b      	ldr	r2, [pc, #236]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001d2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d30:	4b39      	ldr	r3, [pc, #228]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4936      	ldr	r1, [pc, #216]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2b80      	cmp	r3, #128	@ 0x80
 8001d48:	d105      	bne.n	8001d56 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d4a:	4b33      	ldr	r3, [pc, #204]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	4a32      	ldr	r2, [pc, #200]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001d50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d54:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d56:	4b2f      	ldr	r3, [pc, #188]	@ (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d21d      	bcs.n	8001da0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d64:	4b2b      	ldr	r3, [pc, #172]	@ (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 020f 	bic.w	r2, r3, #15
 8001d6c:	4929      	ldr	r1, [pc, #164]	@ (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d74:	f7fe fc80 	bl	8000678 <HAL_GetTick>
 8001d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d7c:	f7fe fc7c 	bl	8000678 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e03b      	b.n	8001e0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d92:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <HAL_RCC_ClockConfig+0x260>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d1ed      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dac:	4b1a      	ldr	r3, [pc, #104]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4917      	ldr	r1, [pc, #92]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d009      	beq.n	8001dde <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dca:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	490f      	ldr	r1, [pc, #60]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dde:	f000 f825 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 8001de2:	4602      	mov	r2, r0
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <HAL_RCC_ClockConfig+0x264>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	490c      	ldr	r1, [pc, #48]	@ (8001e20 <HAL_RCC_ClockConfig+0x26c>)
 8001df0:	5ccb      	ldrb	r3, [r1, r3]
 8001df2:	f003 031f 	and.w	r3, r3, #31
 8001df6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <HAL_RCC_ClockConfig+0x270>)
 8001dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <HAL_RCC_ClockConfig+0x274>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fbec 	bl	80005e0 <HAL_InitTick>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40022000 	.word	0x40022000
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	04c4b400 	.word	0x04c4b400
 8001e20:	08002488 	.word	0x08002488
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000004 	.word	0x20000004

08001e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e32:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d102      	bne.n	8001e44 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	e047      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e44:	4b27      	ldr	r3, [pc, #156]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d102      	bne.n	8001e56 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e50:	4b26      	ldr	r3, [pc, #152]	@ (8001eec <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	e03e      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e56:	4b23      	ldr	r3, [pc, #140]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b0c      	cmp	r3, #12
 8001e60:	d136      	bne.n	8001ed0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e62:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	3301      	adds	r3, #1
 8001e78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d10c      	bne.n	8001e9a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e80:	4a1a      	ldr	r2, [pc, #104]	@ (8001eec <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e88:	4a16      	ldr	r2, [pc, #88]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e8a:	68d2      	ldr	r2, [r2, #12]
 8001e8c:	0a12      	lsrs	r2, r2, #8
 8001e8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e92:	fb02 f303 	mul.w	r3, r2, r3
 8001e96:	617b      	str	r3, [r7, #20]
      break;
 8001e98:	e00c      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e9a:	4a13      	ldr	r2, [pc, #76]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea2:	4a10      	ldr	r2, [pc, #64]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea4:	68d2      	ldr	r2, [r2, #12]
 8001ea6:	0a12      	lsrs	r2, r2, #8
 8001ea8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001eac:	fb02 f303 	mul.w	r3, r2, r3
 8001eb0:	617b      	str	r3, [r7, #20]
      break;
 8001eb2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	0e5b      	lsrs	r3, r3, #25
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	e001      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ed4:	693b      	ldr	r3, [r7, #16]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	371c      	adds	r7, #28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	00f42400 	.word	0x00f42400
 8001eec:	007a1200 	.word	0x007a1200

08001ef0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f00:	4b1b      	ldr	r3, [pc, #108]	@ (8001f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d10c      	bne.n	8001f2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f14:	4a17      	ldr	r2, [pc, #92]	@ (8001f74 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1c:	4a14      	ldr	r2, [pc, #80]	@ (8001f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f1e:	68d2      	ldr	r2, [r2, #12]
 8001f20:	0a12      	lsrs	r2, r2, #8
 8001f22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	617b      	str	r3, [r7, #20]
    break;
 8001f2c:	e00c      	b.n	8001f48 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f2e:	4a12      	ldr	r2, [pc, #72]	@ (8001f78 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f36:	4a0e      	ldr	r2, [pc, #56]	@ (8001f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f38:	68d2      	ldr	r2, [r2, #12]
 8001f3a:	0a12      	lsrs	r2, r2, #8
 8001f3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f40:	fb02 f303 	mul.w	r3, r2, r3
 8001f44:	617b      	str	r3, [r7, #20]
    break;
 8001f46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f48:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0e5b      	lsrs	r3, r3, #25
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	3301      	adds	r3, #1
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f60:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f62:	687b      	ldr	r3, [r7, #4]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	40021000 	.word	0x40021000
 8001f74:	007a1200 	.word	0x007a1200
 8001f78:	00f42400 	.word	0x00f42400

08001f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f84:	2300      	movs	r3, #0
 8001f86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f88:	2300      	movs	r3, #0
 8001f8a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 8098 	beq.w	80020ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9e:	4b43      	ldr	r3, [pc, #268]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10d      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	4b40      	ldr	r3, [pc, #256]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fae:	4a3f      	ldr	r2, [pc, #252]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fc6:	4b3a      	ldr	r3, [pc, #232]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a39      	ldr	r2, [pc, #228]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fd2:	f7fe fb51 	bl	8000678 <HAL_GetTick>
 8001fd6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fd8:	e009      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fda:	f7fe fb4d 	bl	8000678 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d902      	bls.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	74fb      	strb	r3, [r7, #19]
        break;
 8001fec:	e005      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fee:	4b30      	ldr	r3, [pc, #192]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0ef      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001ffa:	7cfb      	ldrb	r3, [r7, #19]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d159      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002000:	4b2a      	ldr	r3, [pc, #168]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800200a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d01e      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	429a      	cmp	r2, r3
 800201a:	d019      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800201c:	4b23      	ldr	r3, [pc, #140]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002022:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002026:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002028:	4b20      	ldr	r3, [pc, #128]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202e:	4a1f      	ldr	r2, [pc, #124]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002038:	4b1c      	ldr	r3, [pc, #112]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203e:	4a1b      	ldr	r2, [pc, #108]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002040:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002048:	4a18      	ldr	r2, [pc, #96]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d016      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205a:	f7fe fb0d 	bl	8000678 <HAL_GetTick>
 800205e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002060:	e00b      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7fe fb09 	bl	8000678 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d902      	bls.n	800207a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	74fb      	strb	r3, [r7, #19]
            break;
 8002078:	e006      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207a:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0ec      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002088:	7cfb      	ldrb	r3, [r7, #19]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10b      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800208e:	4b07      	ldr	r3, [pc, #28]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002094:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800209c:	4903      	ldr	r1, [pc, #12]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020a4:	e008      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020a6:	7cfb      	ldrb	r3, [r7, #19]
 80020a8:	74bb      	strb	r3, [r7, #18]
 80020aa:	e005      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020b8:	7c7b      	ldrb	r3, [r7, #17]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d105      	bne.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020be:	4ba7      	ldr	r3, [pc, #668]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c2:	4aa6      	ldr	r2, [pc, #664]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00a      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020d6:	4ba1      	ldr	r3, [pc, #644]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020dc:	f023 0203 	bic.w	r2, r3, #3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	499d      	ldr	r1, [pc, #628]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00a      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020f8:	4b98      	ldr	r3, [pc, #608]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fe:	f023 020c 	bic.w	r2, r3, #12
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	4995      	ldr	r1, [pc, #596]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800211a:	4b90      	ldr	r3, [pc, #576]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800211c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002120:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	498c      	ldr	r1, [pc, #560]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00a      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800213c:	4b87      	ldr	r3, [pc, #540]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002142:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	4984      	ldr	r1, [pc, #528]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00a      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800215e:	4b7f      	ldr	r3, [pc, #508]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002164:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	497b      	ldr	r1, [pc, #492]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002180:	4b76      	ldr	r3, [pc, #472]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002186:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	4973      	ldr	r1, [pc, #460]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021a2:	4b6e      	ldr	r3, [pc, #440]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	496a      	ldr	r1, [pc, #424]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00a      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021c4:	4b65      	ldr	r3, [pc, #404]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4962      	ldr	r1, [pc, #392]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021e6:	4b5d      	ldr	r3, [pc, #372]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	4959      	ldr	r1, [pc, #356]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00a      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002208:	4b54      	ldr	r3, [pc, #336]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800220a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800220e:	f023 0203 	bic.w	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002216:	4951      	ldr	r1, [pc, #324]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800222a:	4b4c      	ldr	r3, [pc, #304]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800222c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002230:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002238:	4948      	ldr	r1, [pc, #288]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002248:	2b00      	cmp	r3, #0
 800224a:	d015      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800224c:	4b43      	ldr	r3, [pc, #268]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002252:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	4940      	ldr	r1, [pc, #256]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800226a:	d105      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800226c:	4b3b      	ldr	r3, [pc, #236]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4a3a      	ldr	r2, [pc, #232]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002272:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002276:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002280:	2b00      	cmp	r3, #0
 8002282:	d015      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002284:	4b35      	ldr	r3, [pc, #212]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002292:	4932      	ldr	r1, [pc, #200]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800229e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022a2:	d105      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022a4:	4b2d      	ldr	r3, [pc, #180]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4a2c      	ldr	r2, [pc, #176]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022ae:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d015      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80022bc:	4b27      	ldr	r3, [pc, #156]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ca:	4924      	ldr	r1, [pc, #144]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022da:	d105      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022dc:	4b1f      	ldr	r3, [pc, #124]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4a1e      	ldr	r2, [pc, #120]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d015      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022f4:	4b19      	ldr	r3, [pc, #100]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002302:	4916      	ldr	r1, [pc, #88]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800230e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002312:	d105      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002314:	4b11      	ldr	r3, [pc, #68]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4a10      	ldr	r2, [pc, #64]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800231a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800231e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d019      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800232c:	4b0b      	ldr	r3, [pc, #44]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002332:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	4908      	ldr	r1, [pc, #32]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800234a:	d109      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800234c:	4b03      	ldr	r3, [pc, #12]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a02      	ldr	r2, [pc, #8]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002356:	60d3      	str	r3, [r2, #12]
 8002358:	e002      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d015      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800236c:	4b29      	ldr	r3, [pc, #164]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002372:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237a:	4926      	ldr	r1, [pc, #152]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800238a:	d105      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800238c:	4b21      	ldr	r3, [pc, #132]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a20      	ldr	r2, [pc, #128]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002396:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d015      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80023a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023aa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023b2:	4918      	ldr	r1, [pc, #96]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023c2:	d105      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023c4:	4b13      	ldr	r3, [pc, #76]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4a12      	ldr	r2, [pc, #72]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ce:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d015      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80023dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ea:	490a      	ldr	r1, [pc, #40]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023fa:	d105      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023fc:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4a04      	ldr	r2, [pc, #16]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002402:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002406:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002408:	7cbb      	ldrb	r3, [r7, #18]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000

08002418 <memset>:
 8002418:	4402      	add	r2, r0
 800241a:	4603      	mov	r3, r0
 800241c:	4293      	cmp	r3, r2
 800241e:	d100      	bne.n	8002422 <memset+0xa>
 8002420:	4770      	bx	lr
 8002422:	f803 1b01 	strb.w	r1, [r3], #1
 8002426:	e7f9      	b.n	800241c <memset+0x4>

08002428 <__libc_init_array>:
 8002428:	b570      	push	{r4, r5, r6, lr}
 800242a:	4d0d      	ldr	r5, [pc, #52]	@ (8002460 <__libc_init_array+0x38>)
 800242c:	4c0d      	ldr	r4, [pc, #52]	@ (8002464 <__libc_init_array+0x3c>)
 800242e:	1b64      	subs	r4, r4, r5
 8002430:	10a4      	asrs	r4, r4, #2
 8002432:	2600      	movs	r6, #0
 8002434:	42a6      	cmp	r6, r4
 8002436:	d109      	bne.n	800244c <__libc_init_array+0x24>
 8002438:	4d0b      	ldr	r5, [pc, #44]	@ (8002468 <__libc_init_array+0x40>)
 800243a:	4c0c      	ldr	r4, [pc, #48]	@ (800246c <__libc_init_array+0x44>)
 800243c:	f000 f818 	bl	8002470 <_init>
 8002440:	1b64      	subs	r4, r4, r5
 8002442:	10a4      	asrs	r4, r4, #2
 8002444:	2600      	movs	r6, #0
 8002446:	42a6      	cmp	r6, r4
 8002448:	d105      	bne.n	8002456 <__libc_init_array+0x2e>
 800244a:	bd70      	pop	{r4, r5, r6, pc}
 800244c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002450:	4798      	blx	r3
 8002452:	3601      	adds	r6, #1
 8002454:	e7ee      	b.n	8002434 <__libc_init_array+0xc>
 8002456:	f855 3b04 	ldr.w	r3, [r5], #4
 800245a:	4798      	blx	r3
 800245c:	3601      	adds	r6, #1
 800245e:	e7f2      	b.n	8002446 <__libc_init_array+0x1e>
 8002460:	08002498 	.word	0x08002498
 8002464:	08002498 	.word	0x08002498
 8002468:	08002498 	.word	0x08002498
 800246c:	0800249c 	.word	0x0800249c

08002470 <_init>:
 8002470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002472:	bf00      	nop
 8002474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002476:	bc08      	pop	{r3}
 8002478:	469e      	mov	lr, r3
 800247a:	4770      	bx	lr

0800247c <_fini>:
 800247c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247e:	bf00      	nop
 8002480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002482:	bc08      	pop	{r3}
 8002484:	469e      	mov	lr, r3
 8002486:	4770      	bx	lr
