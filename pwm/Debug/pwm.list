
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002640  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002818  08002818  00003818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002828  08002828  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002828  08002828  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002828  08002828  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002828  08002828  00003828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800282c  0800282c  0000382c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002830  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  0800283c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  0800283c  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a440  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001802  00000000  00000000  0000e47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  0000fc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000092c  00000000  00000000  00010868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025837  00000000  00000000  00011194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0c1  00000000  00000000  000369cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f85b1  00000000  00000000  00042a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013b03d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031fc  00000000  00000000  0013b080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0013e27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002800 	.word	0x08002800

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002800 	.word	0x08002800

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa51 	bl	80006c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f818 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f918 	bl	8000458 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000228:	f000 f86c 	bl	8000304 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800022c:	2100      	movs	r1, #0
 800022e:	4808      	ldr	r0, [pc, #32]	@ (8000250 <main+0x38>)
 8000230:	f001 fb66 	bl	8001900 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000234:	2104      	movs	r1, #4
 8000236:	4806      	ldr	r0, [pc, #24]	@ (8000250 <main+0x38>)
 8000238:	f001 fb62 	bl	8001900 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800023c:	2108      	movs	r1, #8
 800023e:	4804      	ldr	r0, [pc, #16]	@ (8000250 <main+0x38>)
 8000240:	f001 fb5e 	bl	8001900 <HAL_TIM_PWM_Start>
//  LL_TIM_OC_SetCompareCH1(htim1.Instance, CompareValue);
  htim1.Instance -> CCR1 = 50;
 8000244:	4b02      	ldr	r3, [pc, #8]	@ (8000250 <main+0x38>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	2232      	movs	r2, #50	@ 0x32
 800024a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024c:	bf00      	nop
 800024e:	e7fd      	b.n	800024c <main+0x34>
 8000250:	20000028 	.word	0x20000028

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b094      	sub	sp, #80	@ 0x50
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	f107 0318 	add.w	r3, r7, #24
 800025e:	2238      	movs	r2, #56	@ 0x38
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f002 faa0 	bl	80027a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
 8000274:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000276:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800027a:	f000 fcf9 	bl	8000c70 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800027e:	2303      	movs	r3, #3
 8000280:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000282:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000286:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000288:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800028c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028e:	2340      	movs	r3, #64	@ 0x40
 8000290:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000292:	2302      	movs	r3, #2
 8000294:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000296:	2303      	movs	r3, #3
 8000298:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800029a:	2302      	movs	r3, #2
 800029c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 16;
 800029e:	2310      	movs	r3, #16
 80002a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a6:	2302      	movs	r3, #2
 80002a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002aa:	2302      	movs	r3, #2
 80002ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ae:	f107 0318 	add.w	r3, r7, #24
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 fd90 	bl	8000dd8 <HAL_RCC_OscConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002be:	f000 f913 	bl	80004e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c2:	230f      	movs	r3, #15
 80002c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c6:	2303      	movs	r3, #3
 80002c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2103      	movs	r1, #3
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 f88e 	bl	80013fc <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002e6:	f000 f8ff 	bl	80004e8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO_PG10, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80002ea:	2200      	movs	r2, #0
 80002ec:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 80002f0:	4803      	ldr	r0, [pc, #12]	@ (8000300 <SystemClock_Config+0xac>)
 80002f2:	f001 f9bf 	bl	8001674 <HAL_RCC_MCOConfig>
}
 80002f6:	bf00      	nop
 80002f8:	3750      	adds	r7, #80	@ 0x50
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	00060400 	.word	0x00060400

08000304 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b098      	sub	sp, #96	@ 0x60
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800030a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000316:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
 8000324:	611a      	str	r2, [r3, #16]
 8000326:	615a      	str	r2, [r3, #20]
 8000328:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2234      	movs	r2, #52	@ 0x34
 800032e:	2100      	movs	r1, #0
 8000330:	4618      	mov	r0, r3
 8000332:	f002 fa39 	bl	80027a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000336:	4b46      	ldr	r3, [pc, #280]	@ (8000450 <MX_TIM1_Init+0x14c>)
 8000338:	4a46      	ldr	r2, [pc, #280]	@ (8000454 <MX_TIM1_Init+0x150>)
 800033a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 800033c:	4b44      	ldr	r3, [pc, #272]	@ (8000450 <MX_TIM1_Init+0x14c>)
 800033e:	2263      	movs	r2, #99	@ 0x63
 8000340:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000342:	4b43      	ldr	r3, [pc, #268]	@ (8000450 <MX_TIM1_Init+0x14c>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000348:	4b41      	ldr	r3, [pc, #260]	@ (8000450 <MX_TIM1_Init+0x14c>)
 800034a:	2263      	movs	r2, #99	@ 0x63
 800034c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034e:	4b40      	ldr	r3, [pc, #256]	@ (8000450 <MX_TIM1_Init+0x14c>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000354:	4b3e      	ldr	r3, [pc, #248]	@ (8000450 <MX_TIM1_Init+0x14c>)
 8000356:	2200      	movs	r2, #0
 8000358:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800035a:	4b3d      	ldr	r3, [pc, #244]	@ (8000450 <MX_TIM1_Init+0x14c>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000360:	483b      	ldr	r0, [pc, #236]	@ (8000450 <MX_TIM1_Init+0x14c>)
 8000362:	f001 fa75 	bl	8001850 <HAL_TIM_PWM_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800036c:	f000 f8bc 	bl	80004e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000374:	2300      	movs	r3, #0
 8000376:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000378:	2300      	movs	r3, #0
 800037a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800037c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000380:	4619      	mov	r1, r3
 8000382:	4833      	ldr	r0, [pc, #204]	@ (8000450 <MX_TIM1_Init+0x14c>)
 8000384:	f002 f8e6 	bl	8002554 <HAL_TIMEx_MasterConfigSynchronization>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800038e:	f000 f8ab 	bl	80004e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000392:	2360      	movs	r3, #96	@ 0x60
 8000394:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000396:	2300      	movs	r3, #0
 8000398:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800039a:	2300      	movs	r3, #0
 800039c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800039e:	2300      	movs	r3, #0
 80003a0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003a2:	2300      	movs	r3, #0
 80003a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003a6:	2300      	movs	r3, #0
 80003a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003aa:	2300      	movs	r3, #0
 80003ac:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80003b2:	2200      	movs	r2, #0
 80003b4:	4619      	mov	r1, r3
 80003b6:	4826      	ldr	r0, [pc, #152]	@ (8000450 <MX_TIM1_Init+0x14c>)
 80003b8:	f001 fbb4 	bl	8001b24 <HAL_TIM_PWM_ConfigChannel>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80003c2:	f000 f891 	bl	80004e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80003ca:	2204      	movs	r2, #4
 80003cc:	4619      	mov	r1, r3
 80003ce:	4820      	ldr	r0, [pc, #128]	@ (8000450 <MX_TIM1_Init+0x14c>)
 80003d0:	f001 fba8 	bl	8001b24 <HAL_TIM_PWM_ConfigChannel>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80003da:	f000 f885 	bl	80004e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80003e2:	2208      	movs	r2, #8
 80003e4:	4619      	mov	r1, r3
 80003e6:	481a      	ldr	r0, [pc, #104]	@ (8000450 <MX_TIM1_Init+0x14c>)
 80003e8:	f001 fb9c 	bl	8001b24 <HAL_TIM_PWM_ConfigChannel>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80003f2:	f000 f879 	bl	80004e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003f6:	2300      	movs	r3, #0
 80003f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000406:	2300      	movs	r3, #0
 8000408:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800040a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800040e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000414:	2300      	movs	r3, #0
 8000416:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000418:	2300      	movs	r3, #0
 800041a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800041c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000420:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000426:	2300      	movs	r3, #0
 8000428:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800042a:	2300      	movs	r3, #0
 800042c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	4619      	mov	r1, r3
 8000432:	4807      	ldr	r0, [pc, #28]	@ (8000450 <MX_TIM1_Init+0x14c>)
 8000434:	f002 f924 	bl	8002680 <HAL_TIMEx_ConfigBreakDeadTime>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 800043e:	f000 f853 	bl	80004e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000442:	4803      	ldr	r0, [pc, #12]	@ (8000450 <MX_TIM1_Init+0x14c>)
 8000444:	f000 f89a 	bl	800057c <HAL_TIM_MspPostInit>

}
 8000448:	bf00      	nop
 800044a:	3760      	adds	r7, #96	@ 0x60
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000028 	.word	0x20000028
 8000454:	40012c00 	.word	0x40012c00

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	f107 030c 	add.w	r3, r7, #12
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
 800046c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800046e:	4b1c      	ldr	r3, [pc, #112]	@ (80004e0 <MX_GPIO_Init+0x88>)
 8000470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000472:	4a1b      	ldr	r2, [pc, #108]	@ (80004e0 <MX_GPIO_Init+0x88>)
 8000474:	f043 0320 	orr.w	r3, r3, #32
 8000478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800047a:	4b19      	ldr	r3, [pc, #100]	@ (80004e0 <MX_GPIO_Init+0x88>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800047e:	f003 0320 	and.w	r3, r3, #32
 8000482:	60bb      	str	r3, [r7, #8]
 8000484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000486:	4b16      	ldr	r3, [pc, #88]	@ (80004e0 <MX_GPIO_Init+0x88>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048a:	4a15      	ldr	r2, [pc, #84]	@ (80004e0 <MX_GPIO_Init+0x88>)
 800048c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000492:	4b13      	ldr	r3, [pc, #76]	@ (80004e0 <MX_GPIO_Init+0x88>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049e:	4b10      	ldr	r3, [pc, #64]	@ (80004e0 <MX_GPIO_Init+0x88>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a2:	4a0f      	ldr	r2, [pc, #60]	@ (80004e0 <MX_GPIO_Init+0x88>)
 80004a4:	f043 0304 	orr.w	r3, r3, #4
 80004a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004aa:	4b0d      	ldr	r3, [pc, #52]	@ (80004e0 <MX_GPIO_Init+0x88>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ae:	f003 0304 	and.w	r3, r3, #4
 80004b2:	603b      	str	r3, [r7, #0]
 80004b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004bc:	2302      	movs	r3, #2
 80004be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80004cc:	f107 030c 	add.w	r3, r7, #12
 80004d0:	4619      	mov	r1, r3
 80004d2:	4804      	ldr	r0, [pc, #16]	@ (80004e4 <MX_GPIO_Init+0x8c>)
 80004d4:	f000 fa4a 	bl	800096c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004d8:	bf00      	nop
 80004da:	3720      	adds	r7, #32
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40021000 	.word	0x40021000
 80004e4:	48001800 	.word	0x48001800

080004e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ec:	b672      	cpsid	i
}
 80004ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <Error_Handler+0x8>

080004f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <HAL_MspInit+0x44>)
 80004fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000538 <HAL_MspInit+0x44>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6613      	str	r3, [r2, #96]	@ 0x60
 8000506:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <HAL_MspInit+0x44>)
 8000508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000512:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <HAL_MspInit+0x44>)
 8000514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000516:	4a08      	ldr	r2, [pc, #32]	@ (8000538 <HAL_MspInit+0x44>)
 8000518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800051c:	6593      	str	r3, [r2, #88]	@ 0x58
 800051e:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <HAL_MspInit+0x44>)
 8000520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800052a:	f000 fc45 	bl	8000db8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000

0800053c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a0a      	ldr	r2, [pc, #40]	@ (8000574 <HAL_TIM_PWM_MspInit+0x38>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d10b      	bne.n	8000566 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800054e:	4b0a      	ldr	r3, [pc, #40]	@ (8000578 <HAL_TIM_PWM_MspInit+0x3c>)
 8000550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000552:	4a09      	ldr	r2, [pc, #36]	@ (8000578 <HAL_TIM_PWM_MspInit+0x3c>)
 8000554:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000558:	6613      	str	r3, [r2, #96]	@ 0x60
 800055a:	4b07      	ldr	r3, [pc, #28]	@ (8000578 <HAL_TIM_PWM_MspInit+0x3c>)
 800055c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800055e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40012c00 	.word	0x40012c00
 8000578:	40021000 	.word	0x40021000

0800057c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a11      	ldr	r2, [pc, #68]	@ (80005e0 <HAL_TIM_MspPostInit+0x64>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d11b      	bne.n	80005d6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <HAL_TIM_MspPostInit+0x68>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a2:	4a10      	ldr	r2, [pc, #64]	@ (80005e4 <HAL_TIM_MspPostInit+0x68>)
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005aa:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <HAL_TIM_MspPostInit+0x68>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80005b6:	2307      	movs	r3, #7
 80005b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ba:	2302      	movs	r3, #2
 80005bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80005c6:	2302      	movs	r3, #2
 80005c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	4619      	mov	r1, r3
 80005d0:	4805      	ldr	r0, [pc, #20]	@ (80005e8 <HAL_TIM_MspPostInit+0x6c>)
 80005d2:	f000 f9cb 	bl	800096c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80005d6:	bf00      	nop
 80005d8:	3720      	adds	r7, #32
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40012c00 	.word	0x40012c00
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48000800 	.word	0x48000800

080005ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <NMI_Handler+0x4>

080005f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <HardFault_Handler+0x4>

080005fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <MemManage_Handler+0x4>

08000604 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <BusFault_Handler+0x4>

0800060c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <UsageFault_Handler+0x4>

08000614 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000642:	f000 f891 	bl	8000768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000650:	4b06      	ldr	r3, [pc, #24]	@ (800066c <SystemInit+0x20>)
 8000652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000656:	4a05      	ldr	r2, [pc, #20]	@ (800066c <SystemInit+0x20>)
 8000658:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800065c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000670:	480d      	ldr	r0, [pc, #52]	@ (80006a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000672:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000674:	f7ff ffea 	bl	800064c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000678:	480c      	ldr	r0, [pc, #48]	@ (80006ac <LoopForever+0x6>)
  ldr r1, =_edata
 800067a:	490d      	ldr	r1, [pc, #52]	@ (80006b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800067c:	4a0d      	ldr	r2, [pc, #52]	@ (80006b4 <LoopForever+0xe>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000680:	e002      	b.n	8000688 <LoopCopyDataInit>

08000682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000686:	3304      	adds	r3, #4

08000688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800068c:	d3f9      	bcc.n	8000682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068e:	4a0a      	ldr	r2, [pc, #40]	@ (80006b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000690:	4c0a      	ldr	r4, [pc, #40]	@ (80006bc <LoopForever+0x16>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000694:	e001      	b.n	800069a <LoopFillZerobss>

08000696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000698:	3204      	adds	r2, #4

0800069a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800069c:	d3fb      	bcc.n	8000696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800069e:	f002 f88b 	bl	80027b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006a2:	f7ff fdb9 	bl	8000218 <main>

080006a6 <LoopForever>:

LoopForever:
    b LoopForever
 80006a6:	e7fe      	b.n	80006a6 <LoopForever>
  ldr   r0, =_estack
 80006a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006b4:	08002830 	.word	0x08002830
  ldr r2, =_sbss
 80006b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006bc:	20000078 	.word	0x20000078

080006c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006c0:	e7fe      	b.n	80006c0 <ADC1_2_IRQHandler>

080006c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b082      	sub	sp, #8
 80006c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006c8:	2300      	movs	r3, #0
 80006ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f91b 	bl	8000908 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006d2:	200f      	movs	r0, #15
 80006d4:	f000 f80e 	bl	80006f4 <HAL_InitTick>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d002      	beq.n	80006e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006de:	2301      	movs	r3, #1
 80006e0:	71fb      	strb	r3, [r7, #7]
 80006e2:	e001      	b.n	80006e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006e4:	f7ff ff06 	bl	80004f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006e8:	79fb      	ldrb	r3, [r7, #7]

}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006fc:	2300      	movs	r3, #0
 80006fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000700:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_InitTick+0x68>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d022      	beq.n	800074e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000708:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <HAL_InitTick+0x6c>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <HAL_InitTick+0x68>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000714:	fbb1 f3f3 	udiv	r3, r1, r3
 8000718:	fbb2 f3f3 	udiv	r3, r2, r3
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f918 	bl	8000952 <HAL_SYSTICK_Config>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d10f      	bne.n	8000748 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b0f      	cmp	r3, #15
 800072c:	d809      	bhi.n	8000742 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800072e:	2200      	movs	r2, #0
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	f04f 30ff 	mov.w	r0, #4294967295
 8000736:	f000 f8f2 	bl	800091e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800073a:	4a0a      	ldr	r2, [pc, #40]	@ (8000764 <HAL_InitTick+0x70>)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	e007      	b.n	8000752 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	73fb      	strb	r3, [r7, #15]
 8000746:	e004      	b.n	8000752 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000748:	2301      	movs	r3, #1
 800074a:	73fb      	strb	r3, [r7, #15]
 800074c:	e001      	b.n	8000752 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000752:	7bfb      	ldrb	r3, [r7, #15]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000008 	.word	0x20000008
 8000760:	20000000 	.word	0x20000000
 8000764:	20000004 	.word	0x20000004

08000768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800076c:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <HAL_IncTick+0x1c>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <HAL_IncTick+0x20>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4413      	add	r3, r2
 8000776:	4a03      	ldr	r2, [pc, #12]	@ (8000784 <HAL_IncTick+0x1c>)
 8000778:	6013      	str	r3, [r2, #0]
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	20000074 	.word	0x20000074
 8000788:	20000008 	.word	0x20000008

0800078c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return uwTick;
 8000790:	4b03      	ldr	r3, [pc, #12]	@ (80007a0 <HAL_GetTick+0x14>)
 8000792:	681b      	ldr	r3, [r3, #0]
}
 8000794:	4618      	mov	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	20000074 	.word	0x20000074

080007a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007c0:	4013      	ands	r3, r2
 80007c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d6:	4a04      	ldr	r2, [pc, #16]	@ (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	60d3      	str	r3, [r2, #12]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f0:	4b04      	ldr	r3, [pc, #16]	@ (8000804 <__NVIC_GetPriorityGrouping+0x18>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	f003 0307 	and.w	r3, r3, #7
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000818:	2b00      	cmp	r3, #0
 800081a:	db0a      	blt.n	8000832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	b2da      	uxtb	r2, r3
 8000820:	490c      	ldr	r1, [pc, #48]	@ (8000854 <__NVIC_SetPriority+0x4c>)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	0112      	lsls	r2, r2, #4
 8000828:	b2d2      	uxtb	r2, r2
 800082a:	440b      	add	r3, r1
 800082c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000830:	e00a      	b.n	8000848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4908      	ldr	r1, [pc, #32]	@ (8000858 <__NVIC_SetPriority+0x50>)
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	f003 030f 	and.w	r3, r3, #15
 800083e:	3b04      	subs	r3, #4
 8000840:	0112      	lsls	r2, r2, #4
 8000842:	b2d2      	uxtb	r2, r2
 8000844:	440b      	add	r3, r1
 8000846:	761a      	strb	r2, [r3, #24]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	e000e100 	.word	0xe000e100
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800085c:	b480      	push	{r7}
 800085e:	b089      	sub	sp, #36	@ 0x24
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	f1c3 0307 	rsb	r3, r3, #7
 8000876:	2b04      	cmp	r3, #4
 8000878:	bf28      	it	cs
 800087a:	2304      	movcs	r3, #4
 800087c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3304      	adds	r3, #4
 8000882:	2b06      	cmp	r3, #6
 8000884:	d902      	bls.n	800088c <NVIC_EncodePriority+0x30>
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3b03      	subs	r3, #3
 800088a:	e000      	b.n	800088e <NVIC_EncodePriority+0x32>
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000890:	f04f 32ff 	mov.w	r2, #4294967295
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	43da      	mvns	r2, r3
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	401a      	ands	r2, r3
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a4:	f04f 31ff 	mov.w	r1, #4294967295
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	fa01 f303 	lsl.w	r3, r1, r3
 80008ae:	43d9      	mvns	r1, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b4:	4313      	orrs	r3, r2
         );
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3724      	adds	r7, #36	@ 0x24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
	...

080008c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008d4:	d301      	bcc.n	80008da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00f      	b.n	80008fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008da:	4a0a      	ldr	r2, [pc, #40]	@ (8000904 <SysTick_Config+0x40>)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e2:	210f      	movs	r1, #15
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f7ff ff8e 	bl	8000808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008ec:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <SysTick_Config+0x40>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f2:	4b04      	ldr	r3, [pc, #16]	@ (8000904 <SysTick_Config+0x40>)
 80008f4:	2207      	movs	r2, #7
 80008f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	e000e010 	.word	0xe000e010

08000908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff ff47 	bl	80007a4 <__NVIC_SetPriorityGrouping>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	4603      	mov	r3, r0
 8000926:	60b9      	str	r1, [r7, #8]
 8000928:	607a      	str	r2, [r7, #4]
 800092a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800092c:	f7ff ff5e 	bl	80007ec <__NVIC_GetPriorityGrouping>
 8000930:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	68b9      	ldr	r1, [r7, #8]
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f7ff ff90 	bl	800085c <NVIC_EncodePriority>
 800093c:	4602      	mov	r2, r0
 800093e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ff5f 	bl	8000808 <__NVIC_SetPriority>
}
 800094a:	bf00      	nop
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ffb2 	bl	80008c4 <SysTick_Config>
 8000960:	4603      	mov	r3, r0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800096c:	b480      	push	{r7}
 800096e:	b087      	sub	sp, #28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800097a:	e15a      	b.n	8000c32 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	2101      	movs	r1, #1
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	fa01 f303 	lsl.w	r3, r1, r3
 8000988:	4013      	ands	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	2b00      	cmp	r3, #0
 8000990:	f000 814c 	beq.w	8000c2c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f003 0303 	and.w	r3, r3, #3
 800099c:	2b01      	cmp	r3, #1
 800099e:	d005      	beq.n	80009ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d130      	bne.n	8000a0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	2203      	movs	r2, #3
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4013      	ands	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	68da      	ldr	r2, [r3, #12]
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009e2:	2201      	movs	r2, #1
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4013      	ands	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	091b      	lsrs	r3, r3, #4
 80009f8:	f003 0201 	and.w	r2, r3, #1
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f003 0303 	and.w	r3, r3, #3
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	d017      	beq.n	8000a4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	2203      	movs	r2, #3
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f003 0303 	and.w	r3, r3, #3
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d123      	bne.n	8000a9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	08da      	lsrs	r2, r3, #3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	3208      	adds	r2, #8
 8000a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	220f      	movs	r2, #15
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	691a      	ldr	r2, [r3, #16]
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	f003 0307 	and.w	r3, r3, #7
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	08da      	lsrs	r2, r3, #3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3208      	adds	r2, #8
 8000a98:	6939      	ldr	r1, [r7, #16]
 8000a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f003 0203 	and.w	r2, r3, #3
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f000 80a6 	beq.w	8000c2c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae0:	4b5b      	ldr	r3, [pc, #364]	@ (8000c50 <HAL_GPIO_Init+0x2e4>)
 8000ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae4:	4a5a      	ldr	r2, [pc, #360]	@ (8000c50 <HAL_GPIO_Init+0x2e4>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aec:	4b58      	ldr	r3, [pc, #352]	@ (8000c50 <HAL_GPIO_Init+0x2e4>)
 8000aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000af8:	4a56      	ldr	r2, [pc, #344]	@ (8000c54 <HAL_GPIO_Init+0x2e8>)
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	089b      	lsrs	r3, r3, #2
 8000afe:	3302      	adds	r3, #2
 8000b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	f003 0303 	and.w	r3, r3, #3
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	220f      	movs	r2, #15
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b22:	d01f      	beq.n	8000b64 <HAL_GPIO_Init+0x1f8>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a4c      	ldr	r2, [pc, #304]	@ (8000c58 <HAL_GPIO_Init+0x2ec>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d019      	beq.n	8000b60 <HAL_GPIO_Init+0x1f4>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a4b      	ldr	r2, [pc, #300]	@ (8000c5c <HAL_GPIO_Init+0x2f0>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d013      	beq.n	8000b5c <HAL_GPIO_Init+0x1f0>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a4a      	ldr	r2, [pc, #296]	@ (8000c60 <HAL_GPIO_Init+0x2f4>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d00d      	beq.n	8000b58 <HAL_GPIO_Init+0x1ec>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a49      	ldr	r2, [pc, #292]	@ (8000c64 <HAL_GPIO_Init+0x2f8>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d007      	beq.n	8000b54 <HAL_GPIO_Init+0x1e8>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a48      	ldr	r2, [pc, #288]	@ (8000c68 <HAL_GPIO_Init+0x2fc>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d101      	bne.n	8000b50 <HAL_GPIO_Init+0x1e4>
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	e00a      	b.n	8000b66 <HAL_GPIO_Init+0x1fa>
 8000b50:	2306      	movs	r3, #6
 8000b52:	e008      	b.n	8000b66 <HAL_GPIO_Init+0x1fa>
 8000b54:	2304      	movs	r3, #4
 8000b56:	e006      	b.n	8000b66 <HAL_GPIO_Init+0x1fa>
 8000b58:	2303      	movs	r3, #3
 8000b5a:	e004      	b.n	8000b66 <HAL_GPIO_Init+0x1fa>
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	e002      	b.n	8000b66 <HAL_GPIO_Init+0x1fa>
 8000b60:	2301      	movs	r3, #1
 8000b62:	e000      	b.n	8000b66 <HAL_GPIO_Init+0x1fa>
 8000b64:	2300      	movs	r3, #0
 8000b66:	697a      	ldr	r2, [r7, #20]
 8000b68:	f002 0203 	and.w	r2, r2, #3
 8000b6c:	0092      	lsls	r2, r2, #2
 8000b6e:	4093      	lsls	r3, r2
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b76:	4937      	ldr	r1, [pc, #220]	@ (8000c54 <HAL_GPIO_Init+0x2e8>)
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	3302      	adds	r3, #2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b84:	4b39      	ldr	r3, [pc, #228]	@ (8000c6c <HAL_GPIO_Init+0x300>)
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ba8:	4a30      	ldr	r2, [pc, #192]	@ (8000c6c <HAL_GPIO_Init+0x300>)
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bae:	4b2f      	ldr	r3, [pc, #188]	@ (8000c6c <HAL_GPIO_Init+0x300>)
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d003      	beq.n	8000bd2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bd2:	4a26      	ldr	r2, [pc, #152]	@ (8000c6c <HAL_GPIO_Init+0x300>)
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000bd8:	4b24      	ldr	r3, [pc, #144]	@ (8000c6c <HAL_GPIO_Init+0x300>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	43db      	mvns	r3, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c6c <HAL_GPIO_Init+0x300>)
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	@ (8000c6c <HAL_GPIO_Init+0x300>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c26:	4a11      	ldr	r2, [pc, #68]	@ (8000c6c <HAL_GPIO_Init+0x300>)
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	fa22 f303 	lsr.w	r3, r2, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f47f ae9d 	bne.w	800097c <HAL_GPIO_Init+0x10>
  }
}
 8000c42:	bf00      	nop
 8000c44:	bf00      	nop
 8000c46:	371c      	adds	r7, #28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40010000 	.word	0x40010000
 8000c58:	48000400 	.word	0x48000400
 8000c5c:	48000800 	.word	0x48000800
 8000c60:	48000c00 	.word	0x48000c00
 8000c64:	48001000 	.word	0x48001000
 8000c68:	48001400 	.word	0x48001400
 8000c6c:	40010400 	.word	0x40010400

08000c70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d141      	bne.n	8000d02 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c7e:	4b4b      	ldr	r3, [pc, #300]	@ (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c8a:	d131      	bne.n	8000cf0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c8c:	4b47      	ldr	r3, [pc, #284]	@ (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c92:	4a46      	ldr	r2, [pc, #280]	@ (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c9c:	4b43      	ldr	r3, [pc, #268]	@ (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ca4:	4a41      	ldr	r2, [pc, #260]	@ (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ca6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000caa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cac:	4b40      	ldr	r3, [pc, #256]	@ (8000db0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2232      	movs	r2, #50	@ 0x32
 8000cb2:	fb02 f303 	mul.w	r3, r2, r3
 8000cb6:	4a3f      	ldr	r2, [pc, #252]	@ (8000db4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbc:	0c9b      	lsrs	r3, r3, #18
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cc2:	e002      	b.n	8000cca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cca:	4b38      	ldr	r3, [pc, #224]	@ (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cd6:	d102      	bne.n	8000cde <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1f2      	bne.n	8000cc4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cde:	4b33      	ldr	r3, [pc, #204]	@ (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cea:	d158      	bne.n	8000d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000cec:	2303      	movs	r3, #3
 8000cee:	e057      	b.n	8000da0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cf6:	4a2d      	ldr	r2, [pc, #180]	@ (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000cfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000d00:	e04d      	b.n	8000d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d08:	d141      	bne.n	8000d8e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d0a:	4b28      	ldr	r3, [pc, #160]	@ (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d16:	d131      	bne.n	8000d7c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d18:	4b24      	ldr	r3, [pc, #144]	@ (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d1e:	4a23      	ldr	r2, [pc, #140]	@ (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d28:	4b20      	ldr	r3, [pc, #128]	@ (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d30:	4a1e      	ldr	r2, [pc, #120]	@ (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d38:	4b1d      	ldr	r3, [pc, #116]	@ (8000db0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2232      	movs	r2, #50	@ 0x32
 8000d3e:	fb02 f303 	mul.w	r3, r2, r3
 8000d42:	4a1c      	ldr	r2, [pc, #112]	@ (8000db4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d44:	fba2 2303 	umull	r2, r3, r2, r3
 8000d48:	0c9b      	lsrs	r3, r3, #18
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d4e:	e002      	b.n	8000d56 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d56:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d62:	d102      	bne.n	8000d6a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1f2      	bne.n	8000d50 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d6a:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d76:	d112      	bne.n	8000d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e011      	b.n	8000da0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d82:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000d8c:	e007      	b.n	8000d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d8e:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d96:	4a05      	ldr	r2, [pc, #20]	@ (8000dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d9c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	40007000 	.word	0x40007000
 8000db0:	20000000 	.word	0x20000000
 8000db4:	431bde83 	.word	0x431bde83

08000db8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000dbc:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	4a04      	ldr	r2, [pc, #16]	@ (8000dd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000dc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc6:	6093      	str	r3, [r2, #8]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40007000 	.word	0x40007000

08000dd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e2fe      	b.n	80013e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d075      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000df6:	4b97      	ldr	r3, [pc, #604]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f003 030c 	and.w	r3, r3, #12
 8000dfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e00:	4b94      	ldr	r3, [pc, #592]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	2b0c      	cmp	r3, #12
 8000e0e:	d102      	bne.n	8000e16 <HAL_RCC_OscConfig+0x3e>
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d002      	beq.n	8000e1c <HAL_RCC_OscConfig+0x44>
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	2b08      	cmp	r3, #8
 8000e1a:	d10b      	bne.n	8000e34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e1c:	4b8d      	ldr	r3, [pc, #564]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d05b      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x108>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d157      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e2d9      	b.n	80013e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e3c:	d106      	bne.n	8000e4c <HAL_RCC_OscConfig+0x74>
 8000e3e:	4b85      	ldr	r3, [pc, #532]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a84      	ldr	r2, [pc, #528]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e01d      	b.n	8000e88 <HAL_RCC_OscConfig+0xb0>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e54:	d10c      	bne.n	8000e70 <HAL_RCC_OscConfig+0x98>
 8000e56:	4b7f      	ldr	r3, [pc, #508]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a7e      	ldr	r2, [pc, #504]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	4b7c      	ldr	r3, [pc, #496]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a7b      	ldr	r2, [pc, #492]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	e00b      	b.n	8000e88 <HAL_RCC_OscConfig+0xb0>
 8000e70:	4b78      	ldr	r3, [pc, #480]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a77      	ldr	r2, [pc, #476]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	4b75      	ldr	r3, [pc, #468]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a74      	ldr	r2, [pc, #464]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d013      	beq.n	8000eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e90:	f7ff fc7c 	bl	800078c <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e98:	f7ff fc78 	bl	800078c <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b64      	cmp	r3, #100	@ 0x64
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e29e      	b.n	80013e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eaa:	4b6a      	ldr	r3, [pc, #424]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f0      	beq.n	8000e98 <HAL_RCC_OscConfig+0xc0>
 8000eb6:	e014      	b.n	8000ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fc68 	bl	800078c <HAL_GetTick>
 8000ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ebe:	e008      	b.n	8000ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec0:	f7ff fc64 	bl	800078c <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b64      	cmp	r3, #100	@ 0x64
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e28a      	b.n	80013e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ed2:	4b60      	ldr	r3, [pc, #384]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f0      	bne.n	8000ec0 <HAL_RCC_OscConfig+0xe8>
 8000ede:	e000      	b.n	8000ee2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d075      	beq.n	8000fda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eee:	4b59      	ldr	r3, [pc, #356]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f003 030c 	and.w	r3, r3, #12
 8000ef6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ef8:	4b56      	ldr	r3, [pc, #344]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	2b0c      	cmp	r3, #12
 8000f06:	d102      	bne.n	8000f0e <HAL_RCC_OscConfig+0x136>
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d002      	beq.n	8000f14 <HAL_RCC_OscConfig+0x13c>
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d11f      	bne.n	8000f54 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f14:	4b4f      	ldr	r3, [pc, #316]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d005      	beq.n	8000f2c <HAL_RCC_OscConfig+0x154>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d101      	bne.n	8000f2c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e25d      	b.n	80013e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2c:	4b49      	ldr	r3, [pc, #292]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	061b      	lsls	r3, r3, #24
 8000f3a:	4946      	ldr	r1, [pc, #280]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f40:	4b45      	ldr	r3, [pc, #276]	@ (8001058 <HAL_RCC_OscConfig+0x280>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fbd5 	bl	80006f4 <HAL_InitTick>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d043      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e249      	b.n	80013e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d023      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a3c      	ldr	r2, [pc, #240]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000f62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f68:	f7ff fc10 	bl	800078c <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f70:	f7ff fc0c 	bl	800078c <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e232      	b.n	80013e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f82:	4b34      	ldr	r3, [pc, #208]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f0      	beq.n	8000f70 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f8e:	4b31      	ldr	r3, [pc, #196]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	061b      	lsls	r3, r3, #24
 8000f9c:	492d      	ldr	r1, [pc, #180]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	604b      	str	r3, [r1, #4]
 8000fa2:	e01a      	b.n	8000fda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a2a      	ldr	r2, [pc, #168]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000faa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb0:	f7ff fbec 	bl	800078c <HAL_GetTick>
 8000fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fb6:	e008      	b.n	8000fca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fb8:	f7ff fbe8 	bl	800078c <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d901      	bls.n	8000fca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e20e      	b.n	80013e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fca:	4b22      	ldr	r3, [pc, #136]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f0      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x1e0>
 8000fd6:	e000      	b.n	8000fda <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fd8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d041      	beq.n	800106a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d01c      	beq.n	8001028 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fee:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ff4:	4a17      	ldr	r2, [pc, #92]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ffe:	f7ff fbc5 	bl	800078c <HAL_GetTick>
 8001002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001004:	e008      	b.n	8001018 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001006:	f7ff fbc1 	bl	800078c <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e1e7      	b.n	80013e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001018:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 800101a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0ef      	beq.n	8001006 <HAL_RCC_OscConfig+0x22e>
 8001026:	e020      	b.n	800106a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001028:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 800102a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800102e:	4a09      	ldr	r2, [pc, #36]	@ (8001054 <HAL_RCC_OscConfig+0x27c>)
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001038:	f7ff fba8 	bl	800078c <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800103e:	e00d      	b.n	800105c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001040:	f7ff fba4 	bl	800078c <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d906      	bls.n	800105c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e1ca      	b.n	80013e8 <HAL_RCC_OscConfig+0x610>
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000
 8001058:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800105c:	4b8c      	ldr	r3, [pc, #560]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 800105e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1ea      	bne.n	8001040 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 80a6 	beq.w	80011c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800107c:	4b84      	ldr	r3, [pc, #528]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 800107e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <HAL_RCC_OscConfig+0x2b4>
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <HAL_RCC_OscConfig+0x2b6>
 800108c:	2300      	movs	r3, #0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00d      	beq.n	80010ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	4b7f      	ldr	r3, [pc, #508]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001096:	4a7e      	ldr	r2, [pc, #504]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800109c:	6593      	str	r3, [r2, #88]	@ 0x58
 800109e:	4b7c      	ldr	r3, [pc, #496]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010aa:	2301      	movs	r3, #1
 80010ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ae:	4b79      	ldr	r3, [pc, #484]	@ (8001294 <HAL_RCC_OscConfig+0x4bc>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d118      	bne.n	80010ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010ba:	4b76      	ldr	r3, [pc, #472]	@ (8001294 <HAL_RCC_OscConfig+0x4bc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a75      	ldr	r2, [pc, #468]	@ (8001294 <HAL_RCC_OscConfig+0x4bc>)
 80010c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010c6:	f7ff fb61 	bl	800078c <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ce:	f7ff fb5d 	bl	800078c <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e183      	b.n	80013e8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010e0:	4b6c      	ldr	r3, [pc, #432]	@ (8001294 <HAL_RCC_OscConfig+0x4bc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0f0      	beq.n	80010ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d108      	bne.n	8001106 <HAL_RCC_OscConfig+0x32e>
 80010f4:	4b66      	ldr	r3, [pc, #408]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 80010f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010fa:	4a65      	ldr	r2, [pc, #404]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001104:	e024      	b.n	8001150 <HAL_RCC_OscConfig+0x378>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2b05      	cmp	r3, #5
 800110c:	d110      	bne.n	8001130 <HAL_RCC_OscConfig+0x358>
 800110e:	4b60      	ldr	r3, [pc, #384]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001114:	4a5e      	ldr	r2, [pc, #376]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800111e:	4b5c      	ldr	r3, [pc, #368]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001124:	4a5a      	ldr	r2, [pc, #360]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800112e:	e00f      	b.n	8001150 <HAL_RCC_OscConfig+0x378>
 8001130:	4b57      	ldr	r3, [pc, #348]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001136:	4a56      	ldr	r2, [pc, #344]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001138:	f023 0301 	bic.w	r3, r3, #1
 800113c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001140:	4b53      	ldr	r3, [pc, #332]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001146:	4a52      	ldr	r2, [pc, #328]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001148:	f023 0304 	bic.w	r3, r3, #4
 800114c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d016      	beq.n	8001186 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001158:	f7ff fb18 	bl	800078c <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800115e:	e00a      	b.n	8001176 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001160:	f7ff fb14 	bl	800078c <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800116e:	4293      	cmp	r3, r2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e138      	b.n	80013e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001176:	4b46      	ldr	r3, [pc, #280]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0ed      	beq.n	8001160 <HAL_RCC_OscConfig+0x388>
 8001184:	e015      	b.n	80011b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001186:	f7ff fb01 	bl	800078c <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800118c:	e00a      	b.n	80011a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118e:	f7ff fafd 	bl	800078c <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800119c:	4293      	cmp	r3, r2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e121      	b.n	80013e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 80011a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1ed      	bne.n	800118e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80011b2:	7ffb      	ldrb	r3, [r7, #31]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d105      	bne.n	80011c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b8:	4b35      	ldr	r3, [pc, #212]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 80011ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011bc:	4a34      	ldr	r2, [pc, #208]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 80011be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0320 	and.w	r3, r3, #32
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d03c      	beq.n	800124a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d01c      	beq.n	8001212 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 80011da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011de:	4a2c      	ldr	r2, [pc, #176]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e8:	f7ff fad0 	bl	800078c <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011f0:	f7ff facc 	bl	800078c <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e0f2      	b.n	80013e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001202:	4b23      	ldr	r3, [pc, #140]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001204:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0ef      	beq.n	80011f0 <HAL_RCC_OscConfig+0x418>
 8001210:	e01b      	b.n	800124a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001212:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001214:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001218:	4a1d      	ldr	r2, [pc, #116]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 800121a:	f023 0301 	bic.w	r3, r3, #1
 800121e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001222:	f7ff fab3 	bl	800078c <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800122a:	f7ff faaf 	bl	800078c <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e0d5      	b.n	80013e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800123c:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 800123e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1ef      	bne.n	800122a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 80c9 	beq.w	80013e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001254:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b0c      	cmp	r3, #12
 800125e:	f000 8083 	beq.w	8001368 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d15e      	bne.n	8001328 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a08      	ldr	r2, [pc, #32]	@ (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001270:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001276:	f7ff fa89 	bl	800078c <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800127c:	e00c      	b.n	8001298 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127e:	f7ff fa85 	bl	800078c <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d905      	bls.n	8001298 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e0ab      	b.n	80013e8 <HAL_RCC_OscConfig+0x610>
 8001290:	40021000 	.word	0x40021000
 8001294:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001298:	4b55      	ldr	r3, [pc, #340]	@ (80013f0 <HAL_RCC_OscConfig+0x618>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1ec      	bne.n	800127e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012a4:	4b52      	ldr	r3, [pc, #328]	@ (80013f0 <HAL_RCC_OscConfig+0x618>)
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	4b52      	ldr	r3, [pc, #328]	@ (80013f4 <HAL_RCC_OscConfig+0x61c>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6a11      	ldr	r1, [r2, #32]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80012b4:	3a01      	subs	r2, #1
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	4311      	orrs	r1, r2
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80012be:	0212      	lsls	r2, r2, #8
 80012c0:	4311      	orrs	r1, r2
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80012c6:	0852      	lsrs	r2, r2, #1
 80012c8:	3a01      	subs	r2, #1
 80012ca:	0552      	lsls	r2, r2, #21
 80012cc:	4311      	orrs	r1, r2
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80012d2:	0852      	lsrs	r2, r2, #1
 80012d4:	3a01      	subs	r2, #1
 80012d6:	0652      	lsls	r2, r2, #25
 80012d8:	4311      	orrs	r1, r2
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80012de:	06d2      	lsls	r2, r2, #27
 80012e0:	430a      	orrs	r2, r1
 80012e2:	4943      	ldr	r1, [pc, #268]	@ (80013f0 <HAL_RCC_OscConfig+0x618>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e8:	4b41      	ldr	r3, [pc, #260]	@ (80013f0 <HAL_RCC_OscConfig+0x618>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a40      	ldr	r2, [pc, #256]	@ (80013f0 <HAL_RCC_OscConfig+0x618>)
 80012ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012f4:	4b3e      	ldr	r3, [pc, #248]	@ (80013f0 <HAL_RCC_OscConfig+0x618>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	4a3d      	ldr	r2, [pc, #244]	@ (80013f0 <HAL_RCC_OscConfig+0x618>)
 80012fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001300:	f7ff fa44 	bl	800078c <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001308:	f7ff fa40 	bl	800078c <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e066      	b.n	80013e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800131a:	4b35      	ldr	r3, [pc, #212]	@ (80013f0 <HAL_RCC_OscConfig+0x618>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f0      	beq.n	8001308 <HAL_RCC_OscConfig+0x530>
 8001326:	e05e      	b.n	80013e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001328:	4b31      	ldr	r3, [pc, #196]	@ (80013f0 <HAL_RCC_OscConfig+0x618>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a30      	ldr	r2, [pc, #192]	@ (80013f0 <HAL_RCC_OscConfig+0x618>)
 800132e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001334:	f7ff fa2a 	bl	800078c <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800133c:	f7ff fa26 	bl	800078c <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e04c      	b.n	80013e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800134e:	4b28      	ldr	r3, [pc, #160]	@ (80013f0 <HAL_RCC_OscConfig+0x618>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800135a:	4b25      	ldr	r3, [pc, #148]	@ (80013f0 <HAL_RCC_OscConfig+0x618>)
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	4924      	ldr	r1, [pc, #144]	@ (80013f0 <HAL_RCC_OscConfig+0x618>)
 8001360:	4b25      	ldr	r3, [pc, #148]	@ (80013f8 <HAL_RCC_OscConfig+0x620>)
 8001362:	4013      	ands	r3, r2
 8001364:	60cb      	str	r3, [r1, #12]
 8001366:	e03e      	b.n	80013e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e039      	b.n	80013e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001374:	4b1e      	ldr	r3, [pc, #120]	@ (80013f0 <HAL_RCC_OscConfig+0x618>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f003 0203 	and.w	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	429a      	cmp	r2, r3
 8001386:	d12c      	bne.n	80013e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001392:	3b01      	subs	r3, #1
 8001394:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001396:	429a      	cmp	r2, r3
 8001398:	d123      	bne.n	80013e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d11b      	bne.n	80013e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d113      	bne.n	80013e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c4:	085b      	lsrs	r3, r3, #1
 80013c6:	3b01      	subs	r3, #1
 80013c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d109      	bne.n	80013e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013d8:	085b      	lsrs	r3, r3, #1
 80013da:	3b01      	subs	r3, #1
 80013dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013de:	429a      	cmp	r2, r3
 80013e0:	d001      	beq.n	80013e6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000
 80013f4:	019f800c 	.word	0x019f800c
 80013f8:	feeefffc 	.word	0xfeeefffc

080013fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e11e      	b.n	8001652 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001414:	4b91      	ldr	r3, [pc, #580]	@ (800165c <HAL_RCC_ClockConfig+0x260>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 030f 	and.w	r3, r3, #15
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	d910      	bls.n	8001444 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001422:	4b8e      	ldr	r3, [pc, #568]	@ (800165c <HAL_RCC_ClockConfig+0x260>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f023 020f 	bic.w	r2, r3, #15
 800142a:	498c      	ldr	r1, [pc, #560]	@ (800165c <HAL_RCC_ClockConfig+0x260>)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	4313      	orrs	r3, r2
 8001430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001432:	4b8a      	ldr	r3, [pc, #552]	@ (800165c <HAL_RCC_ClockConfig+0x260>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d001      	beq.n	8001444 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e106      	b.n	8001652 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d073      	beq.n	8001538 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b03      	cmp	r3, #3
 8001456:	d129      	bne.n	80014ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001458:	4b81      	ldr	r3, [pc, #516]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0f4      	b.n	8001652 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001468:	f000 f9ac 	bl	80017c4 <RCC_GetSysClockFreqFromPLLSource>
 800146c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4a7c      	ldr	r2, [pc, #496]	@ (8001664 <HAL_RCC_ClockConfig+0x268>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d93f      	bls.n	80014f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001476:	4b7a      	ldr	r3, [pc, #488]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d009      	beq.n	8001496 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800148a:	2b00      	cmp	r3, #0
 800148c:	d033      	beq.n	80014f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001492:	2b00      	cmp	r3, #0
 8001494:	d12f      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001496:	4b72      	ldr	r3, [pc, #456]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800149e:	4a70      	ldr	r2, [pc, #448]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 80014a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80014a6:	2380      	movs	r3, #128	@ 0x80
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	e024      	b.n	80014f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d107      	bne.n	80014c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d109      	bne.n	80014d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e0c6      	b.n	8001652 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c4:	4b66      	ldr	r3, [pc, #408]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e0be      	b.n	8001652 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80014d4:	f000 f914 	bl	8001700 <HAL_RCC_GetSysClockFreq>
 80014d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4a61      	ldr	r2, [pc, #388]	@ (8001664 <HAL_RCC_ClockConfig+0x268>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d909      	bls.n	80014f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80014e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014ea:	4a5d      	ldr	r2, [pc, #372]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 80014ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80014f2:	2380      	movs	r3, #128	@ 0x80
 80014f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f023 0203 	bic.w	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4957      	ldr	r1, [pc, #348]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 8001504:	4313      	orrs	r3, r2
 8001506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001508:	f7ff f940 	bl	800078c <HAL_GetTick>
 800150c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150e:	e00a      	b.n	8001526 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001510:	f7ff f93c 	bl	800078c <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e095      	b.n	8001652 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001526:	4b4e      	ldr	r3, [pc, #312]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 020c 	and.w	r2, r3, #12
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	429a      	cmp	r2, r3
 8001536:	d1eb      	bne.n	8001510 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d023      	beq.n	800158c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001550:	4b43      	ldr	r3, [pc, #268]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	4a42      	ldr	r2, [pc, #264]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 8001556:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800155a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	2b00      	cmp	r3, #0
 8001566:	d007      	beq.n	8001578 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001568:	4b3d      	ldr	r3, [pc, #244]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001570:	4a3b      	ldr	r2, [pc, #236]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 8001572:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001576:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001578:	4b39      	ldr	r3, [pc, #228]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	4936      	ldr	r1, [pc, #216]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 8001586:	4313      	orrs	r3, r2
 8001588:	608b      	str	r3, [r1, #8]
 800158a:	e008      	b.n	800159e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	2b80      	cmp	r3, #128	@ 0x80
 8001590:	d105      	bne.n	800159e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001592:	4b33      	ldr	r3, [pc, #204]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	4a32      	ldr	r2, [pc, #200]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 8001598:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800159c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800159e:	4b2f      	ldr	r3, [pc, #188]	@ (800165c <HAL_RCC_ClockConfig+0x260>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d21d      	bcs.n	80015e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ac:	4b2b      	ldr	r3, [pc, #172]	@ (800165c <HAL_RCC_ClockConfig+0x260>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f023 020f 	bic.w	r2, r3, #15
 80015b4:	4929      	ldr	r1, [pc, #164]	@ (800165c <HAL_RCC_ClockConfig+0x260>)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015bc:	f7ff f8e6 	bl	800078c <HAL_GetTick>
 80015c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c2:	e00a      	b.n	80015da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c4:	f7ff f8e2 	bl	800078c <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e03b      	b.n	8001652 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015da:	4b20      	ldr	r3, [pc, #128]	@ (800165c <HAL_RCC_ClockConfig+0x260>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d1ed      	bne.n	80015c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d008      	beq.n	8001606 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	4917      	ldr	r1, [pc, #92]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 8001602:	4313      	orrs	r3, r2
 8001604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d009      	beq.n	8001626 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001612:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	490f      	ldr	r1, [pc, #60]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 8001622:	4313      	orrs	r3, r2
 8001624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001626:	f000 f86b 	bl	8001700 <HAL_RCC_GetSysClockFreq>
 800162a:	4602      	mov	r2, r0
 800162c:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <HAL_RCC_ClockConfig+0x264>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	490c      	ldr	r1, [pc, #48]	@ (8001668 <HAL_RCC_ClockConfig+0x26c>)
 8001638:	5ccb      	ldrb	r3, [r1, r3]
 800163a:	f003 031f 	and.w	r3, r3, #31
 800163e:	fa22 f303 	lsr.w	r3, r2, r3
 8001642:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <HAL_RCC_ClockConfig+0x270>)
 8001644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001646:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <HAL_RCC_ClockConfig+0x274>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff f852 	bl	80006f4 <HAL_InitTick>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40022000 	.word	0x40022000
 8001660:	40021000 	.word	0x40021000
 8001664:	04c4b400 	.word	0x04c4b400
 8001668:	08002818 	.word	0x08002818
 800166c:	20000000 	.word	0x20000000
 8001670:	20000004 	.word	0x20000004

08001674 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08c      	sub	sp, #48	@ 0x30
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001692:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	0c1b      	lsrs	r3, r3, #16
 8001698:	f003 030f 	and.w	r3, r3, #15
 800169c:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 80016a0:	029b      	lsls	r3, r3, #10
 80016a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	0c1b      	lsrs	r3, r3, #16
 80016a8:	f003 030f 	and.w	r3, r3, #15
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 80016ae:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <HAL_RCC_MCOConfig+0x88>)
 80016b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016b2:	2101      	movs	r1, #1
 80016b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	4910      	ldr	r1, [pc, #64]	@ (80016fc <HAL_RCC_MCOConfig+0x88>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	0d1b      	lsrs	r3, r3, #20
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	4619      	mov	r1, r3
 80016d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80016d6:	f7ff f949 	bl	800096c <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 80016da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d109      	bne.n	80016f4 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_RCC_MCOConfig+0x88>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	4903      	ldr	r1, [pc, #12]	@ (80016fc <HAL_RCC_MCOConfig+0x88>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	608b      	str	r3, [r1, #8]
  }
}
 80016f4:	bf00      	nop
 80016f6:	3730      	adds	r7, #48	@ 0x30
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000

08001700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001706:	4b2c      	ldr	r3, [pc, #176]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b04      	cmp	r3, #4
 8001710:	d102      	bne.n	8001718 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001712:	4b2a      	ldr	r3, [pc, #168]	@ (80017bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	e047      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001718:	4b27      	ldr	r3, [pc, #156]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b08      	cmp	r3, #8
 8001722:	d102      	bne.n	800172a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001724:	4b26      	ldr	r3, [pc, #152]	@ (80017c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	e03e      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800172a:	4b23      	ldr	r3, [pc, #140]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b0c      	cmp	r3, #12
 8001734:	d136      	bne.n	80017a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001736:	4b20      	ldr	r3, [pc, #128]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001740:	4b1d      	ldr	r3, [pc, #116]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3301      	adds	r3, #1
 800174c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2b03      	cmp	r3, #3
 8001752:	d10c      	bne.n	800176e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001754:	4a1a      	ldr	r2, [pc, #104]	@ (80017c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	fbb2 f3f3 	udiv	r3, r2, r3
 800175c:	4a16      	ldr	r2, [pc, #88]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800175e:	68d2      	ldr	r2, [r2, #12]
 8001760:	0a12      	lsrs	r2, r2, #8
 8001762:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	617b      	str	r3, [r7, #20]
      break;
 800176c:	e00c      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800176e:	4a13      	ldr	r2, [pc, #76]	@ (80017bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	fbb2 f3f3 	udiv	r3, r2, r3
 8001776:	4a10      	ldr	r2, [pc, #64]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001778:	68d2      	ldr	r2, [r2, #12]
 800177a:	0a12      	lsrs	r2, r2, #8
 800177c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001780:	fb02 f303 	mul.w	r3, r2, r3
 8001784:	617b      	str	r3, [r7, #20]
      break;
 8001786:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001788:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	0e5b      	lsrs	r3, r3, #25
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	3301      	adds	r3, #1
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	e001      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80017a8:	693b      	ldr	r3, [r7, #16]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	371c      	adds	r7, #28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000
 80017bc:	00f42400 	.word	0x00f42400
 80017c0:	017d7840 	.word	0x017d7840

080017c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001844 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	3301      	adds	r3, #1
 80017e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d10c      	bne.n	8001802 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017e8:	4a17      	ldr	r2, [pc, #92]	@ (8001848 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f0:	4a14      	ldr	r2, [pc, #80]	@ (8001844 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017f2:	68d2      	ldr	r2, [r2, #12]
 80017f4:	0a12      	lsrs	r2, r2, #8
 80017f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017fa:	fb02 f303 	mul.w	r3, r2, r3
 80017fe:	617b      	str	r3, [r7, #20]
    break;
 8001800:	e00c      	b.n	800181c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001802:	4a12      	ldr	r2, [pc, #72]	@ (800184c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	4a0e      	ldr	r2, [pc, #56]	@ (8001844 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800180c:	68d2      	ldr	r2, [r2, #12]
 800180e:	0a12      	lsrs	r2, r2, #8
 8001810:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001814:	fb02 f303 	mul.w	r3, r2, r3
 8001818:	617b      	str	r3, [r7, #20]
    break;
 800181a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800181c:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	0e5b      	lsrs	r3, r3, #25
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	3301      	adds	r3, #1
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	fbb2 f3f3 	udiv	r3, r2, r3
 8001834:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001836:	687b      	ldr	r3, [r7, #4]
}
 8001838:	4618      	mov	r0, r3
 800183a:	371c      	adds	r7, #28
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40021000 	.word	0x40021000
 8001848:	017d7840 	.word	0x017d7840
 800184c:	00f42400 	.word	0x00f42400

08001850 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e049      	b.n	80018f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d106      	bne.n	800187c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7fe fe60 	bl	800053c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2202      	movs	r2, #2
 8001880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3304      	adds	r3, #4
 800188c:	4619      	mov	r1, r3
 800188e:	4610      	mov	r0, r2
 8001890:	f000 fa5c 	bl	8001d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d109      	bne.n	8001924 <HAL_TIM_PWM_Start+0x24>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	bf14      	ite	ne
 800191c:	2301      	movne	r3, #1
 800191e:	2300      	moveq	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	e03c      	b.n	800199e <HAL_TIM_PWM_Start+0x9e>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	2b04      	cmp	r3, #4
 8001928:	d109      	bne.n	800193e <HAL_TIM_PWM_Start+0x3e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b01      	cmp	r3, #1
 8001934:	bf14      	ite	ne
 8001936:	2301      	movne	r3, #1
 8001938:	2300      	moveq	r3, #0
 800193a:	b2db      	uxtb	r3, r3
 800193c:	e02f      	b.n	800199e <HAL_TIM_PWM_Start+0x9e>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	2b08      	cmp	r3, #8
 8001942:	d109      	bne.n	8001958 <HAL_TIM_PWM_Start+0x58>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b01      	cmp	r3, #1
 800194e:	bf14      	ite	ne
 8001950:	2301      	movne	r3, #1
 8001952:	2300      	moveq	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	e022      	b.n	800199e <HAL_TIM_PWM_Start+0x9e>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b0c      	cmp	r3, #12
 800195c:	d109      	bne.n	8001972 <HAL_TIM_PWM_Start+0x72>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b01      	cmp	r3, #1
 8001968:	bf14      	ite	ne
 800196a:	2301      	movne	r3, #1
 800196c:	2300      	moveq	r3, #0
 800196e:	b2db      	uxtb	r3, r3
 8001970:	e015      	b.n	800199e <HAL_TIM_PWM_Start+0x9e>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	2b10      	cmp	r3, #16
 8001976:	d109      	bne.n	800198c <HAL_TIM_PWM_Start+0x8c>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b01      	cmp	r3, #1
 8001982:	bf14      	ite	ne
 8001984:	2301      	movne	r3, #1
 8001986:	2300      	moveq	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	e008      	b.n	800199e <HAL_TIM_PWM_Start+0x9e>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b01      	cmp	r3, #1
 8001996:	bf14      	ite	ne
 8001998:	2301      	movne	r3, #1
 800199a:	2300      	moveq	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0a6      	b.n	8001af4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d104      	bne.n	80019b6 <HAL_TIM_PWM_Start+0xb6>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2202      	movs	r2, #2
 80019b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019b4:	e023      	b.n	80019fe <HAL_TIM_PWM_Start+0xfe>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d104      	bne.n	80019c6 <HAL_TIM_PWM_Start+0xc6>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2202      	movs	r2, #2
 80019c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019c4:	e01b      	b.n	80019fe <HAL_TIM_PWM_Start+0xfe>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d104      	bne.n	80019d6 <HAL_TIM_PWM_Start+0xd6>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2202      	movs	r2, #2
 80019d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019d4:	e013      	b.n	80019fe <HAL_TIM_PWM_Start+0xfe>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	d104      	bne.n	80019e6 <HAL_TIM_PWM_Start+0xe6>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80019e4:	e00b      	b.n	80019fe <HAL_TIM_PWM_Start+0xfe>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2b10      	cmp	r3, #16
 80019ea:	d104      	bne.n	80019f6 <HAL_TIM_PWM_Start+0xf6>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2202      	movs	r2, #2
 80019f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019f4:	e003      	b.n	80019fe <HAL_TIM_PWM_Start+0xfe>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2202      	movs	r2, #2
 80019fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2201      	movs	r2, #1
 8001a04:	6839      	ldr	r1, [r7, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 fd7e 	bl	8002508 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a3a      	ldr	r2, [pc, #232]	@ (8001afc <HAL_TIM_PWM_Start+0x1fc>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d018      	beq.n	8001a48 <HAL_TIM_PWM_Start+0x148>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a39      	ldr	r2, [pc, #228]	@ (8001b00 <HAL_TIM_PWM_Start+0x200>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d013      	beq.n	8001a48 <HAL_TIM_PWM_Start+0x148>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a37      	ldr	r2, [pc, #220]	@ (8001b04 <HAL_TIM_PWM_Start+0x204>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d00e      	beq.n	8001a48 <HAL_TIM_PWM_Start+0x148>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a36      	ldr	r2, [pc, #216]	@ (8001b08 <HAL_TIM_PWM_Start+0x208>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d009      	beq.n	8001a48 <HAL_TIM_PWM_Start+0x148>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a34      	ldr	r2, [pc, #208]	@ (8001b0c <HAL_TIM_PWM_Start+0x20c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d004      	beq.n	8001a48 <HAL_TIM_PWM_Start+0x148>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a33      	ldr	r2, [pc, #204]	@ (8001b10 <HAL_TIM_PWM_Start+0x210>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d101      	bne.n	8001a4c <HAL_TIM_PWM_Start+0x14c>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <HAL_TIM_PWM_Start+0x14e>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d007      	beq.n	8001a62 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a25      	ldr	r2, [pc, #148]	@ (8001afc <HAL_TIM_PWM_Start+0x1fc>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d022      	beq.n	8001ab2 <HAL_TIM_PWM_Start+0x1b2>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a74:	d01d      	beq.n	8001ab2 <HAL_TIM_PWM_Start+0x1b2>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a26      	ldr	r2, [pc, #152]	@ (8001b14 <HAL_TIM_PWM_Start+0x214>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d018      	beq.n	8001ab2 <HAL_TIM_PWM_Start+0x1b2>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a24      	ldr	r2, [pc, #144]	@ (8001b18 <HAL_TIM_PWM_Start+0x218>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d013      	beq.n	8001ab2 <HAL_TIM_PWM_Start+0x1b2>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a23      	ldr	r2, [pc, #140]	@ (8001b1c <HAL_TIM_PWM_Start+0x21c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d00e      	beq.n	8001ab2 <HAL_TIM_PWM_Start+0x1b2>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a19      	ldr	r2, [pc, #100]	@ (8001b00 <HAL_TIM_PWM_Start+0x200>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d009      	beq.n	8001ab2 <HAL_TIM_PWM_Start+0x1b2>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a18      	ldr	r2, [pc, #96]	@ (8001b04 <HAL_TIM_PWM_Start+0x204>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d004      	beq.n	8001ab2 <HAL_TIM_PWM_Start+0x1b2>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a18      	ldr	r2, [pc, #96]	@ (8001b10 <HAL_TIM_PWM_Start+0x210>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d115      	bne.n	8001ade <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	4b19      	ldr	r3, [pc, #100]	@ (8001b20 <HAL_TIM_PWM_Start+0x220>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b06      	cmp	r3, #6
 8001ac2:	d015      	beq.n	8001af0 <HAL_TIM_PWM_Start+0x1f0>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aca:	d011      	beq.n	8001af0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001adc:	e008      	b.n	8001af0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 0201 	orr.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e000      	b.n	8001af2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001af0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40012c00 	.word	0x40012c00
 8001b00:	40013400 	.word	0x40013400
 8001b04:	40014000 	.word	0x40014000
 8001b08:	40014400 	.word	0x40014400
 8001b0c:	40014800 	.word	0x40014800
 8001b10:	40015000 	.word	0x40015000
 8001b14:	40000400 	.word	0x40000400
 8001b18:	40000800 	.word	0x40000800
 8001b1c:	40000c00 	.word	0x40000c00
 8001b20:	00010007 	.word	0x00010007

08001b24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e0ff      	b.n	8001d42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b14      	cmp	r3, #20
 8001b4e:	f200 80f0 	bhi.w	8001d32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001b52:	a201      	add	r2, pc, #4	@ (adr r2, 8001b58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b58:	08001bad 	.word	0x08001bad
 8001b5c:	08001d33 	.word	0x08001d33
 8001b60:	08001d33 	.word	0x08001d33
 8001b64:	08001d33 	.word	0x08001d33
 8001b68:	08001bed 	.word	0x08001bed
 8001b6c:	08001d33 	.word	0x08001d33
 8001b70:	08001d33 	.word	0x08001d33
 8001b74:	08001d33 	.word	0x08001d33
 8001b78:	08001c2f 	.word	0x08001c2f
 8001b7c:	08001d33 	.word	0x08001d33
 8001b80:	08001d33 	.word	0x08001d33
 8001b84:	08001d33 	.word	0x08001d33
 8001b88:	08001c6f 	.word	0x08001c6f
 8001b8c:	08001d33 	.word	0x08001d33
 8001b90:	08001d33 	.word	0x08001d33
 8001b94:	08001d33 	.word	0x08001d33
 8001b98:	08001cb1 	.word	0x08001cb1
 8001b9c:	08001d33 	.word	0x08001d33
 8001ba0:	08001d33 	.word	0x08001d33
 8001ba4:	08001d33 	.word	0x08001d33
 8001ba8:	08001cf1 	.word	0x08001cf1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 f97e 	bl	8001eb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699a      	ldr	r2, [r3, #24]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0208 	orr.w	r2, r2, #8
 8001bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	699a      	ldr	r2, [r3, #24]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0204 	bic.w	r2, r2, #4
 8001bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6999      	ldr	r1, [r3, #24]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	691a      	ldr	r2, [r3, #16]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	619a      	str	r2, [r3, #24]
      break;
 8001bea:	e0a5      	b.n	8001d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f9f8 	bl	8001fe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699a      	ldr	r2, [r3, #24]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6999      	ldr	r1, [r3, #24]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	021a      	lsls	r2, r3, #8
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	619a      	str	r2, [r3, #24]
      break;
 8001c2c:	e084      	b.n	8001d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68b9      	ldr	r1, [r7, #8]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 fa6b 	bl	8002110 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	69da      	ldr	r2, [r3, #28]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 0208 	orr.w	r2, r2, #8
 8001c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	69da      	ldr	r2, [r3, #28]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0204 	bic.w	r2, r2, #4
 8001c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	69d9      	ldr	r1, [r3, #28]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	61da      	str	r2, [r3, #28]
      break;
 8001c6c:	e064      	b.n	8001d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 fadd 	bl	8002234 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	69da      	ldr	r2, [r3, #28]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	69da      	ldr	r2, [r3, #28]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	69d9      	ldr	r1, [r3, #28]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	021a      	lsls	r2, r3, #8
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	61da      	str	r2, [r3, #28]
      break;
 8001cae:	e043      	b.n	8001d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 fb50 	bl	800235c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0208 	orr.w	r2, r2, #8
 8001cca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0204 	bic.w	r2, r2, #4
 8001cda:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	691a      	ldr	r2, [r3, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8001cee:	e023      	b.n	8001d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fb9a 	bl	8002430 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d1a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	021a      	lsls	r2, r3, #8
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8001d30:	e002      	b.n	8001d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	75fb      	strb	r3, [r7, #23]
      break;
 8001d36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop

08001d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a4c      	ldr	r2, [pc, #304]	@ (8001e90 <TIM_Base_SetConfig+0x144>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d017      	beq.n	8001d94 <TIM_Base_SetConfig+0x48>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d6a:	d013      	beq.n	8001d94 <TIM_Base_SetConfig+0x48>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a49      	ldr	r2, [pc, #292]	@ (8001e94 <TIM_Base_SetConfig+0x148>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d00f      	beq.n	8001d94 <TIM_Base_SetConfig+0x48>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a48      	ldr	r2, [pc, #288]	@ (8001e98 <TIM_Base_SetConfig+0x14c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00b      	beq.n	8001d94 <TIM_Base_SetConfig+0x48>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a47      	ldr	r2, [pc, #284]	@ (8001e9c <TIM_Base_SetConfig+0x150>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d007      	beq.n	8001d94 <TIM_Base_SetConfig+0x48>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a46      	ldr	r2, [pc, #280]	@ (8001ea0 <TIM_Base_SetConfig+0x154>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d003      	beq.n	8001d94 <TIM_Base_SetConfig+0x48>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a45      	ldr	r2, [pc, #276]	@ (8001ea4 <TIM_Base_SetConfig+0x158>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d108      	bne.n	8001da6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a39      	ldr	r2, [pc, #228]	@ (8001e90 <TIM_Base_SetConfig+0x144>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d023      	beq.n	8001df6 <TIM_Base_SetConfig+0xaa>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001db4:	d01f      	beq.n	8001df6 <TIM_Base_SetConfig+0xaa>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a36      	ldr	r2, [pc, #216]	@ (8001e94 <TIM_Base_SetConfig+0x148>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01b      	beq.n	8001df6 <TIM_Base_SetConfig+0xaa>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a35      	ldr	r2, [pc, #212]	@ (8001e98 <TIM_Base_SetConfig+0x14c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d017      	beq.n	8001df6 <TIM_Base_SetConfig+0xaa>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a34      	ldr	r2, [pc, #208]	@ (8001e9c <TIM_Base_SetConfig+0x150>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d013      	beq.n	8001df6 <TIM_Base_SetConfig+0xaa>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a33      	ldr	r2, [pc, #204]	@ (8001ea0 <TIM_Base_SetConfig+0x154>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00f      	beq.n	8001df6 <TIM_Base_SetConfig+0xaa>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a33      	ldr	r2, [pc, #204]	@ (8001ea8 <TIM_Base_SetConfig+0x15c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00b      	beq.n	8001df6 <TIM_Base_SetConfig+0xaa>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a32      	ldr	r2, [pc, #200]	@ (8001eac <TIM_Base_SetConfig+0x160>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d007      	beq.n	8001df6 <TIM_Base_SetConfig+0xaa>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a31      	ldr	r2, [pc, #196]	@ (8001eb0 <TIM_Base_SetConfig+0x164>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d003      	beq.n	8001df6 <TIM_Base_SetConfig+0xaa>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a2c      	ldr	r2, [pc, #176]	@ (8001ea4 <TIM_Base_SetConfig+0x158>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d108      	bne.n	8001e08 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a18      	ldr	r2, [pc, #96]	@ (8001e90 <TIM_Base_SetConfig+0x144>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d013      	beq.n	8001e5c <TIM_Base_SetConfig+0x110>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a1a      	ldr	r2, [pc, #104]	@ (8001ea0 <TIM_Base_SetConfig+0x154>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00f      	beq.n	8001e5c <TIM_Base_SetConfig+0x110>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ea8 <TIM_Base_SetConfig+0x15c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d00b      	beq.n	8001e5c <TIM_Base_SetConfig+0x110>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a19      	ldr	r2, [pc, #100]	@ (8001eac <TIM_Base_SetConfig+0x160>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d007      	beq.n	8001e5c <TIM_Base_SetConfig+0x110>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a18      	ldr	r2, [pc, #96]	@ (8001eb0 <TIM_Base_SetConfig+0x164>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d003      	beq.n	8001e5c <TIM_Base_SetConfig+0x110>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a13      	ldr	r2, [pc, #76]	@ (8001ea4 <TIM_Base_SetConfig+0x158>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d103      	bne.n	8001e64 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d105      	bne.n	8001e82 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f023 0201 	bic.w	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	611a      	str	r2, [r3, #16]
  }
}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40012c00 	.word	0x40012c00
 8001e94:	40000400 	.word	0x40000400
 8001e98:	40000800 	.word	0x40000800
 8001e9c:	40000c00 	.word	0x40000c00
 8001ea0:	40013400 	.word	0x40013400
 8001ea4:	40015000 	.word	0x40015000
 8001ea8:	40014000 	.word	0x40014000
 8001eac:	40014400 	.word	0x40014400
 8001eb0:	40014800 	.word	0x40014800

08001eb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	f023 0201 	bic.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f023 0303 	bic.w	r3, r3, #3
 8001eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f023 0302 	bic.w	r3, r3, #2
 8001f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a30      	ldr	r2, [pc, #192]	@ (8001fd0 <TIM_OC1_SetConfig+0x11c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d013      	beq.n	8001f3c <TIM_OC1_SetConfig+0x88>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a2f      	ldr	r2, [pc, #188]	@ (8001fd4 <TIM_OC1_SetConfig+0x120>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d00f      	beq.n	8001f3c <TIM_OC1_SetConfig+0x88>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a2e      	ldr	r2, [pc, #184]	@ (8001fd8 <TIM_OC1_SetConfig+0x124>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d00b      	beq.n	8001f3c <TIM_OC1_SetConfig+0x88>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a2d      	ldr	r2, [pc, #180]	@ (8001fdc <TIM_OC1_SetConfig+0x128>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d007      	beq.n	8001f3c <TIM_OC1_SetConfig+0x88>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8001fe0 <TIM_OC1_SetConfig+0x12c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d003      	beq.n	8001f3c <TIM_OC1_SetConfig+0x88>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a2b      	ldr	r2, [pc, #172]	@ (8001fe4 <TIM_OC1_SetConfig+0x130>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d10c      	bne.n	8001f56 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f023 0308 	bic.w	r3, r3, #8
 8001f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f023 0304 	bic.w	r3, r3, #4
 8001f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a1d      	ldr	r2, [pc, #116]	@ (8001fd0 <TIM_OC1_SetConfig+0x11c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d013      	beq.n	8001f86 <TIM_OC1_SetConfig+0xd2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd4 <TIM_OC1_SetConfig+0x120>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00f      	beq.n	8001f86 <TIM_OC1_SetConfig+0xd2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd8 <TIM_OC1_SetConfig+0x124>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00b      	beq.n	8001f86 <TIM_OC1_SetConfig+0xd2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a1a      	ldr	r2, [pc, #104]	@ (8001fdc <TIM_OC1_SetConfig+0x128>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d007      	beq.n	8001f86 <TIM_OC1_SetConfig+0xd2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a19      	ldr	r2, [pc, #100]	@ (8001fe0 <TIM_OC1_SetConfig+0x12c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d003      	beq.n	8001f86 <TIM_OC1_SetConfig+0xd2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a18      	ldr	r2, [pc, #96]	@ (8001fe4 <TIM_OC1_SetConfig+0x130>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d111      	bne.n	8001faa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	621a      	str	r2, [r3, #32]
}
 8001fc4:	bf00      	nop
 8001fc6:	371c      	adds	r7, #28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	40012c00 	.word	0x40012c00
 8001fd4:	40013400 	.word	0x40013400
 8001fd8:	40014000 	.word	0x40014000
 8001fdc:	40014400 	.word	0x40014400
 8001fe0:	40014800 	.word	0x40014800
 8001fe4:	40015000 	.word	0x40015000

08001fe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	f023 0210 	bic.w	r2, r3, #16
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800201a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f023 0320 	bic.w	r3, r3, #32
 8002036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4313      	orrs	r3, r2
 8002042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a2c      	ldr	r2, [pc, #176]	@ (80020f8 <TIM_OC2_SetConfig+0x110>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d007      	beq.n	800205c <TIM_OC2_SetConfig+0x74>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a2b      	ldr	r2, [pc, #172]	@ (80020fc <TIM_OC2_SetConfig+0x114>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d003      	beq.n	800205c <TIM_OC2_SetConfig+0x74>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a2a      	ldr	r2, [pc, #168]	@ (8002100 <TIM_OC2_SetConfig+0x118>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d10d      	bne.n	8002078 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4313      	orrs	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002076:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a1f      	ldr	r2, [pc, #124]	@ (80020f8 <TIM_OC2_SetConfig+0x110>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d013      	beq.n	80020a8 <TIM_OC2_SetConfig+0xc0>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a1e      	ldr	r2, [pc, #120]	@ (80020fc <TIM_OC2_SetConfig+0x114>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d00f      	beq.n	80020a8 <TIM_OC2_SetConfig+0xc0>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a1e      	ldr	r2, [pc, #120]	@ (8002104 <TIM_OC2_SetConfig+0x11c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d00b      	beq.n	80020a8 <TIM_OC2_SetConfig+0xc0>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a1d      	ldr	r2, [pc, #116]	@ (8002108 <TIM_OC2_SetConfig+0x120>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d007      	beq.n	80020a8 <TIM_OC2_SetConfig+0xc0>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a1c      	ldr	r2, [pc, #112]	@ (800210c <TIM_OC2_SetConfig+0x124>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d003      	beq.n	80020a8 <TIM_OC2_SetConfig+0xc0>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a17      	ldr	r2, [pc, #92]	@ (8002100 <TIM_OC2_SetConfig+0x118>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d113      	bne.n	80020d0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80020ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80020b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	621a      	str	r2, [r3, #32]
}
 80020ea:	bf00      	nop
 80020ec:	371c      	adds	r7, #28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40012c00 	.word	0x40012c00
 80020fc:	40013400 	.word	0x40013400
 8002100:	40015000 	.word	0x40015000
 8002104:	40014000 	.word	0x40014000
 8002108:	40014400 	.word	0x40014400
 800210c:	40014800 	.word	0x40014800

08002110 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800213e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f023 0303 	bic.w	r3, r3, #3
 800214a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800215c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	4313      	orrs	r3, r2
 8002168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a2b      	ldr	r2, [pc, #172]	@ (800221c <TIM_OC3_SetConfig+0x10c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <TIM_OC3_SetConfig+0x72>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a2a      	ldr	r2, [pc, #168]	@ (8002220 <TIM_OC3_SetConfig+0x110>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d003      	beq.n	8002182 <TIM_OC3_SetConfig+0x72>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a29      	ldr	r2, [pc, #164]	@ (8002224 <TIM_OC3_SetConfig+0x114>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d10d      	bne.n	800219e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002188:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	4313      	orrs	r3, r2
 8002194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800219c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a1e      	ldr	r2, [pc, #120]	@ (800221c <TIM_OC3_SetConfig+0x10c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d013      	beq.n	80021ce <TIM_OC3_SetConfig+0xbe>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002220 <TIM_OC3_SetConfig+0x110>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00f      	beq.n	80021ce <TIM_OC3_SetConfig+0xbe>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002228 <TIM_OC3_SetConfig+0x118>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00b      	beq.n	80021ce <TIM_OC3_SetConfig+0xbe>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a1c      	ldr	r2, [pc, #112]	@ (800222c <TIM_OC3_SetConfig+0x11c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d007      	beq.n	80021ce <TIM_OC3_SetConfig+0xbe>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002230 <TIM_OC3_SetConfig+0x120>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d003      	beq.n	80021ce <TIM_OC3_SetConfig+0xbe>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a16      	ldr	r2, [pc, #88]	@ (8002224 <TIM_OC3_SetConfig+0x114>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d113      	bne.n	80021f6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80021dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	621a      	str	r2, [r3, #32]
}
 8002210:	bf00      	nop
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40012c00 	.word	0x40012c00
 8002220:	40013400 	.word	0x40013400
 8002224:	40015000 	.word	0x40015000
 8002228:	40014000 	.word	0x40014000
 800222c:	40014400 	.word	0x40014400
 8002230:	40014800 	.word	0x40014800

08002234 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002234:	b480      	push	{r7}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002262:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800226e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002282:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	031b      	lsls	r3, r3, #12
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4313      	orrs	r3, r2
 800228e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a2c      	ldr	r2, [pc, #176]	@ (8002344 <TIM_OC4_SetConfig+0x110>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d007      	beq.n	80022a8 <TIM_OC4_SetConfig+0x74>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a2b      	ldr	r2, [pc, #172]	@ (8002348 <TIM_OC4_SetConfig+0x114>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d003      	beq.n	80022a8 <TIM_OC4_SetConfig+0x74>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a2a      	ldr	r2, [pc, #168]	@ (800234c <TIM_OC4_SetConfig+0x118>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d10d      	bne.n	80022c4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80022ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	031b      	lsls	r3, r3, #12
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002344 <TIM_OC4_SetConfig+0x110>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d013      	beq.n	80022f4 <TIM_OC4_SetConfig+0xc0>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002348 <TIM_OC4_SetConfig+0x114>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d00f      	beq.n	80022f4 <TIM_OC4_SetConfig+0xc0>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002350 <TIM_OC4_SetConfig+0x11c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d00b      	beq.n	80022f4 <TIM_OC4_SetConfig+0xc0>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a1d      	ldr	r2, [pc, #116]	@ (8002354 <TIM_OC4_SetConfig+0x120>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d007      	beq.n	80022f4 <TIM_OC4_SetConfig+0xc0>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002358 <TIM_OC4_SetConfig+0x124>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d003      	beq.n	80022f4 <TIM_OC4_SetConfig+0xc0>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a17      	ldr	r2, [pc, #92]	@ (800234c <TIM_OC4_SetConfig+0x118>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d113      	bne.n	800231c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022fa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002302:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	019b      	lsls	r3, r3, #6
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	019b      	lsls	r3, r3, #6
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	621a      	str	r2, [r3, #32]
}
 8002336:	bf00      	nop
 8002338:	371c      	adds	r7, #28
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40012c00 	.word	0x40012c00
 8002348:	40013400 	.word	0x40013400
 800234c:	40015000 	.word	0x40015000
 8002350:	40014000 	.word	0x40014000
 8002354:	40014400 	.word	0x40014400
 8002358:	40014800 	.word	0x40014800

0800235c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800238a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800238e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80023a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	041b      	lsls	r3, r3, #16
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a19      	ldr	r2, [pc, #100]	@ (8002418 <TIM_OC5_SetConfig+0xbc>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <TIM_OC5_SetConfig+0x82>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a18      	ldr	r2, [pc, #96]	@ (800241c <TIM_OC5_SetConfig+0xc0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d00f      	beq.n	80023de <TIM_OC5_SetConfig+0x82>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a17      	ldr	r2, [pc, #92]	@ (8002420 <TIM_OC5_SetConfig+0xc4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00b      	beq.n	80023de <TIM_OC5_SetConfig+0x82>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a16      	ldr	r2, [pc, #88]	@ (8002424 <TIM_OC5_SetConfig+0xc8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d007      	beq.n	80023de <TIM_OC5_SetConfig+0x82>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a15      	ldr	r2, [pc, #84]	@ (8002428 <TIM_OC5_SetConfig+0xcc>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d003      	beq.n	80023de <TIM_OC5_SetConfig+0x82>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a14      	ldr	r2, [pc, #80]	@ (800242c <TIM_OC5_SetConfig+0xd0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d109      	bne.n	80023f2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	621a      	str	r2, [r3, #32]
}
 800240c:	bf00      	nop
 800240e:	371c      	adds	r7, #28
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	40012c00 	.word	0x40012c00
 800241c:	40013400 	.word	0x40013400
 8002420:	40014000 	.word	0x40014000
 8002424:	40014400 	.word	0x40014400
 8002428:	40014800 	.word	0x40014800
 800242c:	40015000 	.word	0x40015000

08002430 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800245e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	021b      	lsls	r3, r3, #8
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	4313      	orrs	r3, r2
 800246e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	051b      	lsls	r3, r3, #20
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a1a      	ldr	r2, [pc, #104]	@ (80024f0 <TIM_OC6_SetConfig+0xc0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d013      	beq.n	80024b4 <TIM_OC6_SetConfig+0x84>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a19      	ldr	r2, [pc, #100]	@ (80024f4 <TIM_OC6_SetConfig+0xc4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d00f      	beq.n	80024b4 <TIM_OC6_SetConfig+0x84>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a18      	ldr	r2, [pc, #96]	@ (80024f8 <TIM_OC6_SetConfig+0xc8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d00b      	beq.n	80024b4 <TIM_OC6_SetConfig+0x84>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a17      	ldr	r2, [pc, #92]	@ (80024fc <TIM_OC6_SetConfig+0xcc>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d007      	beq.n	80024b4 <TIM_OC6_SetConfig+0x84>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a16      	ldr	r2, [pc, #88]	@ (8002500 <TIM_OC6_SetConfig+0xd0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d003      	beq.n	80024b4 <TIM_OC6_SetConfig+0x84>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a15      	ldr	r2, [pc, #84]	@ (8002504 <TIM_OC6_SetConfig+0xd4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d109      	bne.n	80024c8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	029b      	lsls	r3, r3, #10
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	621a      	str	r2, [r3, #32]
}
 80024e2:	bf00      	nop
 80024e4:	371c      	adds	r7, #28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40012c00 	.word	0x40012c00
 80024f4:	40013400 	.word	0x40013400
 80024f8:	40014000 	.word	0x40014000
 80024fc:	40014400 	.word	0x40014400
 8002500:	40014800 	.word	0x40014800
 8002504:	40015000 	.word	0x40015000

08002508 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002508:	b480      	push	{r7}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	2201      	movs	r2, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a1a      	ldr	r2, [r3, #32]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	43db      	mvns	r3, r3
 800252a:	401a      	ands	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a1a      	ldr	r2, [r3, #32]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f003 031f 	and.w	r3, r3, #31
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	431a      	orrs	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	621a      	str	r2, [r3, #32]
}
 8002546:	bf00      	nop
 8002548:	371c      	adds	r7, #28
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002568:	2302      	movs	r3, #2
 800256a:	e074      	b.n	8002656 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a34      	ldr	r2, [pc, #208]	@ (8002664 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d009      	beq.n	80025aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a33      	ldr	r2, [pc, #204]	@ (8002668 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d004      	beq.n	80025aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a31      	ldr	r2, [pc, #196]	@ (800266c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d108      	bne.n	80025bc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80025b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80025c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a21      	ldr	r2, [pc, #132]	@ (8002664 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d022      	beq.n	800262a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ec:	d01d      	beq.n	800262a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002670 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d018      	beq.n	800262a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002674 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a1c      	ldr	r2, [pc, #112]	@ (8002678 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d00e      	beq.n	800262a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a15      	ldr	r2, [pc, #84]	@ (8002668 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d009      	beq.n	800262a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a18      	ldr	r2, [pc, #96]	@ (800267c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d004      	beq.n	800262a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a11      	ldr	r2, [pc, #68]	@ (800266c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d10c      	bne.n	8002644 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	4313      	orrs	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40012c00 	.word	0x40012c00
 8002668:	40013400 	.word	0x40013400
 800266c:	40015000 	.word	0x40015000
 8002670:	40000400 	.word	0x40000400
 8002674:	40000800 	.word	0x40000800
 8002678:	40000c00 	.word	0x40000c00
 800267c:	40014000 	.word	0x40014000

08002680 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002698:	2302      	movs	r3, #2
 800269a:	e078      	b.n	800278e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	4313      	orrs	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4313      	orrs	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	4313      	orrs	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	041b      	lsls	r3, r3, #16
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	4313      	orrs	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1c      	ldr	r2, [pc, #112]	@ (800279c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d009      	beq.n	8002742 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a1b      	ldr	r2, [pc, #108]	@ (80027a0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d004      	beq.n	8002742 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a19      	ldr	r2, [pc, #100]	@ (80027a4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d11c      	bne.n	800277c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274c:	051b      	lsls	r3, r3, #20
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	4313      	orrs	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002778:	4313      	orrs	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40012c00 	.word	0x40012c00
 80027a0:	40013400 	.word	0x40013400
 80027a4:	40015000 	.word	0x40015000

080027a8 <memset>:
 80027a8:	4402      	add	r2, r0
 80027aa:	4603      	mov	r3, r0
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d100      	bne.n	80027b2 <memset+0xa>
 80027b0:	4770      	bx	lr
 80027b2:	f803 1b01 	strb.w	r1, [r3], #1
 80027b6:	e7f9      	b.n	80027ac <memset+0x4>

080027b8 <__libc_init_array>:
 80027b8:	b570      	push	{r4, r5, r6, lr}
 80027ba:	4d0d      	ldr	r5, [pc, #52]	@ (80027f0 <__libc_init_array+0x38>)
 80027bc:	4c0d      	ldr	r4, [pc, #52]	@ (80027f4 <__libc_init_array+0x3c>)
 80027be:	1b64      	subs	r4, r4, r5
 80027c0:	10a4      	asrs	r4, r4, #2
 80027c2:	2600      	movs	r6, #0
 80027c4:	42a6      	cmp	r6, r4
 80027c6:	d109      	bne.n	80027dc <__libc_init_array+0x24>
 80027c8:	4d0b      	ldr	r5, [pc, #44]	@ (80027f8 <__libc_init_array+0x40>)
 80027ca:	4c0c      	ldr	r4, [pc, #48]	@ (80027fc <__libc_init_array+0x44>)
 80027cc:	f000 f818 	bl	8002800 <_init>
 80027d0:	1b64      	subs	r4, r4, r5
 80027d2:	10a4      	asrs	r4, r4, #2
 80027d4:	2600      	movs	r6, #0
 80027d6:	42a6      	cmp	r6, r4
 80027d8:	d105      	bne.n	80027e6 <__libc_init_array+0x2e>
 80027da:	bd70      	pop	{r4, r5, r6, pc}
 80027dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e0:	4798      	blx	r3
 80027e2:	3601      	adds	r6, #1
 80027e4:	e7ee      	b.n	80027c4 <__libc_init_array+0xc>
 80027e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ea:	4798      	blx	r3
 80027ec:	3601      	adds	r6, #1
 80027ee:	e7f2      	b.n	80027d6 <__libc_init_array+0x1e>
 80027f0:	08002828 	.word	0x08002828
 80027f4:	08002828 	.word	0x08002828
 80027f8:	08002828 	.word	0x08002828
 80027fc:	0800282c 	.word	0x0800282c

08002800 <_init>:
 8002800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002802:	bf00      	nop
 8002804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002806:	bc08      	pop	{r3}
 8002808:	469e      	mov	lr, r3
 800280a:	4770      	bx	lr

0800280c <_fini>:
 800280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280e:	bf00      	nop
 8002810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002812:	bc08      	pop	{r3}
 8002814:	469e      	mov	lr, r3
 8002816:	4770      	bx	lr
