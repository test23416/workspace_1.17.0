
DDS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dbc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001f94  08001f94  00002f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fa4  08001fa4  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001fa4  08001fa4  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fa4  08001fa4  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fa4  08001fa4  00002fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001fa8  08001fa8  00002fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001fac  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08001fb8  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001fb8  00003090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ba2  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000146e  00000000  00000000  00009bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  0000b050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b0  00000000  00000000  0000b7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000236ed  00000000  00000000  0000bda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007efc  00000000  00000000  0002f48d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e127f  00000000  00000000  00037389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118608  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dbc  00000000  00000000  0011864c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0011a408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001f7c 	.word	0x08001f7c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08001f7c 	.word	0x08001f7c

08000218 <ad9834_send>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ad9834_send(uint16_t cmd)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_WritePin(dds_cs_GPIO_Port, dds_cs_Pin, GPIO_PIN_RESET);
 8000222:	2200      	movs	r2, #0
 8000224:	2108      	movs	r1, #8
 8000226:	4809      	ldr	r0, [pc, #36]	@ (800024c <ad9834_send+0x34>)
 8000228:	f000 fcee 	bl	8000c08 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi4, (uint8_t*)&cmd, 1, 10);
 800022c:	1db9      	adds	r1, r7, #6
 800022e:	230a      	movs	r3, #10
 8000230:	2201      	movs	r2, #1
 8000232:	4807      	ldr	r0, [pc, #28]	@ (8000250 <ad9834_send+0x38>)
 8000234:	f001 fb9b 	bl	800196e <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(dds_cs_GPIO_Port, dds_cs_Pin, GPIO_PIN_SET);
 8000238:	2201      	movs	r2, #1
 800023a:	2108      	movs	r1, #8
 800023c:	4803      	ldr	r0, [pc, #12]	@ (800024c <ad9834_send+0x34>)
 800023e:	f000 fce3 	bl	8000c08 <HAL_GPIO_WritePin>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	48001000 	.word	0x48001000
 8000250:	20000028 	.word	0x20000028

08000254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000258:	f000 f9ff 	bl	800065a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025c:	f000 f81a 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000260:	f000 f8a0 	bl	80003a4 <MX_GPIO_Init>
  MX_SPI4_Init();
 8000264:	f000 f860 	bl	8000328 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  ad9834_send(0x2100);
 8000268:	f44f 5004 	mov.w	r0, #8448	@ 0x2100
 800026c:	f7ff ffd4 	bl	8000218 <ad9834_send>
  ad9834_send(0x50C7);
 8000270:	f245 00c7 	movw	r0, #20679	@ 0x50c7
 8000274:	f7ff ffd0 	bl	8000218 <ad9834_send>
  ad9834_send(0x4000);
 8000278:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800027c:	f7ff ffcc 	bl	8000218 <ad9834_send>
  ad9834_send(0xC000);
 8000280:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8000284:	f7ff ffc8 	bl	8000218 <ad9834_send>
  ad9834_send(0x2000);
 8000288:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800028c:	f7ff ffc4 	bl	8000218 <ad9834_send>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000290:	bf00      	nop
 8000292:	e7fd      	b.n	8000290 <main+0x3c>

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b094      	sub	sp, #80	@ 0x50
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	f107 0318 	add.w	r3, r7, #24
 800029e:	2238      	movs	r2, #56	@ 0x38
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 fe3e 	bl	8001f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002ba:	f000 fcbd 	bl	8000c38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002be:	2303      	movs	r3, #3
 80002c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ce:	2340      	movs	r3, #64	@ 0x40
 80002d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d2:	2300      	movs	r3, #0
 80002d4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	f107 0318 	add.w	r3, r7, #24
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 fd60 	bl	8000da0 <HAL_RCC_OscConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002e6:	f000 f8cf 	bl	8000488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	230f      	movs	r3, #15
 80002ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ee:	2301      	movs	r3, #1
 80002f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f001 f85e 	bl	80013c4 <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800030e:	f000 f8bb 	bl	8000488 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000312:	2200      	movs	r2, #0
 8000314:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8000318:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800031c:	f001 f98e 	bl	800163c <HAL_RCC_MCOConfig>
}
 8000320:	bf00      	nop
 8000322:	3750      	adds	r7, #80	@ 0x50
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800032c:	4b1b      	ldr	r3, [pc, #108]	@ (800039c <MX_SPI4_Init+0x74>)
 800032e:	4a1c      	ldr	r2, [pc, #112]	@ (80003a0 <MX_SPI4_Init+0x78>)
 8000330:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000332:	4b1a      	ldr	r3, [pc, #104]	@ (800039c <MX_SPI4_Init+0x74>)
 8000334:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000338:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800033a:	4b18      	ldr	r3, [pc, #96]	@ (800039c <MX_SPI4_Init+0x74>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000340:	4b16      	ldr	r3, [pc, #88]	@ (800039c <MX_SPI4_Init+0x74>)
 8000342:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000346:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000348:	4b14      	ldr	r3, [pc, #80]	@ (800039c <MX_SPI4_Init+0x74>)
 800034a:	2202      	movs	r2, #2
 800034c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800034e:	4b13      	ldr	r3, [pc, #76]	@ (800039c <MX_SPI4_Init+0x74>)
 8000350:	2200      	movs	r2, #0
 8000352:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000354:	4b11      	ldr	r3, [pc, #68]	@ (800039c <MX_SPI4_Init+0x74>)
 8000356:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800035a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800035c:	4b0f      	ldr	r3, [pc, #60]	@ (800039c <MX_SPI4_Init+0x74>)
 800035e:	2218      	movs	r2, #24
 8000360:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000362:	4b0e      	ldr	r3, [pc, #56]	@ (800039c <MX_SPI4_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000368:	4b0c      	ldr	r3, [pc, #48]	@ (800039c <MX_SPI4_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800036e:	4b0b      	ldr	r3, [pc, #44]	@ (800039c <MX_SPI4_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000374:	4b09      	ldr	r3, [pc, #36]	@ (800039c <MX_SPI4_Init+0x74>)
 8000376:	2207      	movs	r2, #7
 8000378:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800037a:	4b08      	ldr	r3, [pc, #32]	@ (800039c <MX_SPI4_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000380:	4b06      	ldr	r3, [pc, #24]	@ (800039c <MX_SPI4_Init+0x74>)
 8000382:	2208      	movs	r2, #8
 8000384:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000386:	4805      	ldr	r0, [pc, #20]	@ (800039c <MX_SPI4_Init+0x74>)
 8000388:	f001 fa46 	bl	8001818 <HAL_SPI_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000392:	f000 f879 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000028 	.word	0x20000028
 80003a0:	40013c00 	.word	0x40013c00

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b088      	sub	sp, #32
 80003a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	f107 030c 	add.w	r3, r7, #12
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003ba:	4b31      	ldr	r3, [pc, #196]	@ (8000480 <MX_GPIO_Init+0xdc>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003be:	4a30      	ldr	r2, [pc, #192]	@ (8000480 <MX_GPIO_Init+0xdc>)
 80003c0:	f043 0310 	orr.w	r3, r3, #16
 80003c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000480 <MX_GPIO_Init+0xdc>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ca:	f003 0310 	and.w	r3, r3, #16
 80003ce:	60bb      	str	r3, [r7, #8]
 80003d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000480 <MX_GPIO_Init+0xdc>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d6:	4a2a      	ldr	r2, [pc, #168]	@ (8000480 <MX_GPIO_Init+0xdc>)
 80003d8:	f043 0320 	orr.w	r3, r3, #32
 80003dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003de:	4b28      	ldr	r3, [pc, #160]	@ (8000480 <MX_GPIO_Init+0xdc>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e2:	f003 0320 	and.w	r3, r3, #32
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b25      	ldr	r3, [pc, #148]	@ (8000480 <MX_GPIO_Init+0xdc>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ee:	4a24      	ldr	r2, [pc, #144]	@ (8000480 <MX_GPIO_Init+0xdc>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003f6:	4b22      	ldr	r3, [pc, #136]	@ (8000480 <MX_GPIO_Init+0xdc>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	603b      	str	r3, [r7, #0]
 8000400:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dds_cs_GPIO_Port, dds_cs_Pin, GPIO_PIN_SET);
 8000402:	2201      	movs	r2, #1
 8000404:	2108      	movs	r1, #8
 8000406:	481f      	ldr	r0, [pc, #124]	@ (8000484 <MX_GPIO_Init+0xe0>)
 8000408:	f000 fbfe 	bl	8000c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Amp_GPIO_Port, Amp_Pin, GPIO_PIN_SET);
 800040c:	2201      	movs	r2, #1
 800040e:	2110      	movs	r1, #16
 8000410:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000414:	f000 fbf8 	bl	8000c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : dds_cs_Pin */
  GPIO_InitStruct.Pin = dds_cs_Pin;
 8000418:	2308      	movs	r3, #8
 800041a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041c:	2301      	movs	r3, #1
 800041e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	2300      	movs	r3, #0
 8000422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000424:	2300      	movs	r3, #0
 8000426:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(dds_cs_GPIO_Port, &GPIO_InitStruct);
 8000428:	f107 030c 	add.w	r3, r7, #12
 800042c:	4619      	mov	r1, r3
 800042e:	4815      	ldr	r0, [pc, #84]	@ (8000484 <MX_GPIO_Init+0xe0>)
 8000430:	f000 fa68 	bl	8000904 <HAL_GPIO_Init>

  /*Configure GPIO pin : Amp_Pin */
  GPIO_InitStruct.Pin = Amp_Pin;
 8000434:	2310      	movs	r3, #16
 8000436:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000438:	2301      	movs	r3, #1
 800043a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000440:	2300      	movs	r3, #0
 8000442:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Amp_GPIO_Port, &GPIO_InitStruct);
 8000444:	f107 030c 	add.w	r3, r7, #12
 8000448:	4619      	mov	r1, r3
 800044a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800044e:	f000 fa59 	bl	8000904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000452:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000456:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000458:	2302      	movs	r3, #2
 800045a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	2300      	movs	r3, #0
 800045e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000460:	2301      	movs	r3, #1
 8000462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000464:	2300      	movs	r3, #0
 8000466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000468:	f107 030c 	add.w	r3, r7, #12
 800046c:	4619      	mov	r1, r3
 800046e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000472:	f000 fa47 	bl	8000904 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000476:	bf00      	nop
 8000478:	3720      	adds	r7, #32
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000
 8000484:	48001000 	.word	0x48001000

08000488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
}
 800048e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <Error_Handler+0x8>

08000494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049a:	4b0f      	ldr	r3, [pc, #60]	@ (80004d8 <HAL_MspInit+0x44>)
 800049c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800049e:	4a0e      	ldr	r2, [pc, #56]	@ (80004d8 <HAL_MspInit+0x44>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80004a6:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <HAL_MspInit+0x44>)
 80004a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	4b09      	ldr	r3, [pc, #36]	@ (80004d8 <HAL_MspInit+0x44>)
 80004b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004b6:	4a08      	ldr	r2, [pc, #32]	@ (80004d8 <HAL_MspInit+0x44>)
 80004b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80004be:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <HAL_MspInit+0x44>)
 80004c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004c6:	603b      	str	r3, [r7, #0]
 80004c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004ca:	f000 fc59 	bl	8000d80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000

080004dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	@ 0x28
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a1f      	ldr	r2, [pc, #124]	@ (8000578 <HAL_SPI_MspInit+0x9c>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d137      	bne.n	800056e <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80004fe:	4b1f      	ldr	r3, [pc, #124]	@ (800057c <HAL_SPI_MspInit+0xa0>)
 8000500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000502:	4a1e      	ldr	r2, [pc, #120]	@ (800057c <HAL_SPI_MspInit+0xa0>)
 8000504:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000508:	6613      	str	r3, [r2, #96]	@ 0x60
 800050a:	4b1c      	ldr	r3, [pc, #112]	@ (800057c <HAL_SPI_MspInit+0xa0>)
 800050c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800050e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000512:	613b      	str	r3, [r7, #16]
 8000514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000516:	4b19      	ldr	r3, [pc, #100]	@ (800057c <HAL_SPI_MspInit+0xa0>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	4a18      	ldr	r2, [pc, #96]	@ (800057c <HAL_SPI_MspInit+0xa0>)
 800051c:	f043 0310 	orr.w	r3, r3, #16
 8000520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000522:	4b16      	ldr	r3, [pc, #88]	@ (800057c <HAL_SPI_MspInit+0xa0>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	f003 0310 	and.w	r3, r3, #16
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800052e:	2304      	movs	r3, #4
 8000530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000532:	2302      	movs	r3, #2
 8000534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000536:	2301      	movs	r3, #1
 8000538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	2300      	movs	r3, #0
 800053c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800053e:	2305      	movs	r3, #5
 8000540:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	4619      	mov	r1, r3
 8000548:	480d      	ldr	r0, [pc, #52]	@ (8000580 <HAL_SPI_MspInit+0xa4>)
 800054a:	f000 f9db 	bl	8000904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800054e:	2340      	movs	r3, #64	@ 0x40
 8000550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000552:	2302      	movs	r3, #2
 8000554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	2300      	movs	r3, #0
 800055c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800055e:	2305      	movs	r3, #5
 8000560:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	4619      	mov	r1, r3
 8000568:	4805      	ldr	r0, [pc, #20]	@ (8000580 <HAL_SPI_MspInit+0xa4>)
 800056a:	f000 f9cb 	bl	8000904 <HAL_GPIO_Init>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 800056e:	bf00      	nop
 8000570:	3728      	adds	r7, #40	@ 0x28
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40013c00 	.word	0x40013c00
 800057c:	40021000 	.word	0x40021000
 8000580:	48001000 	.word	0x48001000

08000584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <NMI_Handler+0x4>

0800058c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <HardFault_Handler+0x4>

08000594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <MemManage_Handler+0x4>

0800059c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <BusFault_Handler+0x4>

080005a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <UsageFault_Handler+0x4>

080005ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005da:	f000 f891 	bl	8000700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <SystemInit+0x20>)
 80005ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005ee:	4a05      	ldr	r2, [pc, #20]	@ (8000604 <SystemInit+0x20>)
 80005f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000608:	480d      	ldr	r0, [pc, #52]	@ (8000640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800060c:	f7ff ffea 	bl	80005e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480c      	ldr	r0, [pc, #48]	@ (8000644 <LoopForever+0x6>)
  ldr r1, =_edata
 8000612:	490d      	ldr	r1, [pc, #52]	@ (8000648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000614:	4a0d      	ldr	r2, [pc, #52]	@ (800064c <LoopForever+0xe>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a0a      	ldr	r2, [pc, #40]	@ (8000650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000628:	4c0a      	ldr	r4, [pc, #40]	@ (8000654 <LoopForever+0x16>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000636:	f001 fc7d 	bl	8001f34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800063a:	f7ff fe0b 	bl	8000254 <main>

0800063e <LoopForever>:

LoopForever:
    b LoopForever
 800063e:	e7fe      	b.n	800063e <LoopForever>
  ldr   r0, =_estack
 8000640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000648:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800064c:	08001fac 	.word	0x08001fac
  ldr r2, =_sbss
 8000650:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000654:	20000090 	.word	0x20000090

08000658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC1_2_IRQHandler>

0800065a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000660:	2300      	movs	r3, #0
 8000662:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000664:	2003      	movs	r0, #3
 8000666:	f000 f91b 	bl	80008a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800066a:	200f      	movs	r0, #15
 800066c:	f000 f80e 	bl	800068c <HAL_InitTick>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d002      	beq.n	800067c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000676:	2301      	movs	r3, #1
 8000678:	71fb      	strb	r3, [r7, #7]
 800067a:	e001      	b.n	8000680 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800067c:	f7ff ff0a 	bl	8000494 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000680:	79fb      	ldrb	r3, [r7, #7]

}
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000694:	2300      	movs	r3, #0
 8000696:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000698:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <HAL_InitTick+0x68>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d022      	beq.n	80006e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006a0:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <HAL_InitTick+0x6c>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <HAL_InitTick+0x68>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80006b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 f918 	bl	80008ea <HAL_SYSTICK_Config>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d10f      	bne.n	80006e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b0f      	cmp	r3, #15
 80006c4:	d809      	bhi.n	80006da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c6:	2200      	movs	r2, #0
 80006c8:	6879      	ldr	r1, [r7, #4]
 80006ca:	f04f 30ff 	mov.w	r0, #4294967295
 80006ce:	f000 f8f2 	bl	80008b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006d2:	4a0a      	ldr	r2, [pc, #40]	@ (80006fc <HAL_InitTick+0x70>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	e007      	b.n	80006ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006da:	2301      	movs	r3, #1
 80006dc:	73fb      	strb	r3, [r7, #15]
 80006de:	e004      	b.n	80006ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006e0:	2301      	movs	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]
 80006e4:	e001      	b.n	80006ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000008 	.word	0x20000008
 80006f8:	20000000 	.word	0x20000000
 80006fc:	20000004 	.word	0x20000004

08000700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000704:	4b05      	ldr	r3, [pc, #20]	@ (800071c <HAL_IncTick+0x1c>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <HAL_IncTick+0x20>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4413      	add	r3, r2
 800070e:	4a03      	ldr	r2, [pc, #12]	@ (800071c <HAL_IncTick+0x1c>)
 8000710:	6013      	str	r3, [r2, #0]
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	2000008c 	.word	0x2000008c
 8000720:	20000008 	.word	0x20000008

08000724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  return uwTick;
 8000728:	4b03      	ldr	r3, [pc, #12]	@ (8000738 <HAL_GetTick+0x14>)
 800072a:	681b      	ldr	r3, [r3, #0]
}
 800072c:	4618      	mov	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	2000008c 	.word	0x2000008c

0800073c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <__NVIC_SetPriorityGrouping+0x44>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000752:	68ba      	ldr	r2, [r7, #8]
 8000754:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000758:	4013      	ands	r3, r2
 800075a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800076c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076e:	4a04      	ldr	r2, [pc, #16]	@ (8000780 <__NVIC_SetPriorityGrouping+0x44>)
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	60d3      	str	r3, [r2, #12]
}
 8000774:	bf00      	nop
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000788:	4b04      	ldr	r3, [pc, #16]	@ (800079c <__NVIC_GetPriorityGrouping+0x18>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	0a1b      	lsrs	r3, r3, #8
 800078e:	f003 0307 	and.w	r3, r3, #7
}
 8000792:	4618      	mov	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	6039      	str	r1, [r7, #0]
 80007aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	db0a      	blt.n	80007ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	490c      	ldr	r1, [pc, #48]	@ (80007ec <__NVIC_SetPriority+0x4c>)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	0112      	lsls	r2, r2, #4
 80007c0:	b2d2      	uxtb	r2, r2
 80007c2:	440b      	add	r3, r1
 80007c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c8:	e00a      	b.n	80007e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4908      	ldr	r1, [pc, #32]	@ (80007f0 <__NVIC_SetPriority+0x50>)
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	f003 030f 	and.w	r3, r3, #15
 80007d6:	3b04      	subs	r3, #4
 80007d8:	0112      	lsls	r2, r2, #4
 80007da:	b2d2      	uxtb	r2, r2
 80007dc:	440b      	add	r3, r1
 80007de:	761a      	strb	r2, [r3, #24]
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000e100 	.word	0xe000e100
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b089      	sub	sp, #36	@ 0x24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	f1c3 0307 	rsb	r3, r3, #7
 800080e:	2b04      	cmp	r3, #4
 8000810:	bf28      	it	cs
 8000812:	2304      	movcs	r3, #4
 8000814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	3304      	adds	r3, #4
 800081a:	2b06      	cmp	r3, #6
 800081c:	d902      	bls.n	8000824 <NVIC_EncodePriority+0x30>
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	3b03      	subs	r3, #3
 8000822:	e000      	b.n	8000826 <NVIC_EncodePriority+0x32>
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000828:	f04f 32ff 	mov.w	r2, #4294967295
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43da      	mvns	r2, r3
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	401a      	ands	r2, r3
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800083c:	f04f 31ff 	mov.w	r1, #4294967295
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	fa01 f303 	lsl.w	r3, r1, r3
 8000846:	43d9      	mvns	r1, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800084c:	4313      	orrs	r3, r2
         );
}
 800084e:	4618      	mov	r0, r3
 8000850:	3724      	adds	r7, #36	@ 0x24
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3b01      	subs	r3, #1
 8000868:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800086c:	d301      	bcc.n	8000872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800086e:	2301      	movs	r3, #1
 8000870:	e00f      	b.n	8000892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000872:	4a0a      	ldr	r2, [pc, #40]	@ (800089c <SysTick_Config+0x40>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3b01      	subs	r3, #1
 8000878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087a:	210f      	movs	r1, #15
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f7ff ff8e 	bl	80007a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000884:	4b05      	ldr	r3, [pc, #20]	@ (800089c <SysTick_Config+0x40>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088a:	4b04      	ldr	r3, [pc, #16]	@ (800089c <SysTick_Config+0x40>)
 800088c:	2207      	movs	r2, #7
 800088e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	e000e010 	.word	0xe000e010

080008a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ff47 	bl	800073c <__NVIC_SetPriorityGrouping>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b086      	sub	sp, #24
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4603      	mov	r3, r0
 80008be:	60b9      	str	r1, [r7, #8]
 80008c0:	607a      	str	r2, [r7, #4]
 80008c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008c4:	f7ff ff5e 	bl	8000784 <__NVIC_GetPriorityGrouping>
 80008c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	68b9      	ldr	r1, [r7, #8]
 80008ce:	6978      	ldr	r0, [r7, #20]
 80008d0:	f7ff ff90 	bl	80007f4 <NVIC_EncodePriority>
 80008d4:	4602      	mov	r2, r0
 80008d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008da:	4611      	mov	r1, r2
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff5f 	bl	80007a0 <__NVIC_SetPriority>
}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff ffb2 	bl	800085c <SysTick_Config>
 80008f8:	4603      	mov	r3, r0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000904:	b480      	push	{r7}
 8000906:	b087      	sub	sp, #28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000912:	e15a      	b.n	8000bca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	2101      	movs	r1, #1
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	fa01 f303 	lsl.w	r3, r1, r3
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b00      	cmp	r3, #0
 8000928:	f000 814c 	beq.w	8000bc4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f003 0303 	and.w	r3, r3, #3
 8000934:	2b01      	cmp	r3, #1
 8000936:	d005      	beq.n	8000944 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000940:	2b02      	cmp	r3, #2
 8000942:	d130      	bne.n	80009a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2203      	movs	r2, #3
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	68da      	ldr	r2, [r3, #12]
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	4313      	orrs	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800097a:	2201      	movs	r2, #1
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4013      	ands	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	091b      	lsrs	r3, r3, #4
 8000990:	f003 0201 	and.w	r2, r3, #1
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f003 0303 	and.w	r3, r3, #3
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d017      	beq.n	80009e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	2203      	movs	r2, #3
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	4013      	ands	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f003 0303 	and.w	r3, r3, #3
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d123      	bne.n	8000a36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	08da      	lsrs	r2, r3, #3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3208      	adds	r2, #8
 80009f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	220f      	movs	r2, #15
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	691a      	ldr	r2, [r3, #16]
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	f003 0307 	and.w	r3, r3, #7
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	08da      	lsrs	r2, r3, #3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3208      	adds	r2, #8
 8000a30:	6939      	ldr	r1, [r7, #16]
 8000a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	2203      	movs	r2, #3
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f003 0203 	and.w	r2, r3, #3
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f000 80a6 	beq.w	8000bc4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a78:	4b5b      	ldr	r3, [pc, #364]	@ (8000be8 <HAL_GPIO_Init+0x2e4>)
 8000a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a7c:	4a5a      	ldr	r2, [pc, #360]	@ (8000be8 <HAL_GPIO_Init+0x2e4>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a84:	4b58      	ldr	r3, [pc, #352]	@ (8000be8 <HAL_GPIO_Init+0x2e4>)
 8000a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a90:	4a56      	ldr	r2, [pc, #344]	@ (8000bec <HAL_GPIO_Init+0x2e8>)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	089b      	lsrs	r3, r3, #2
 8000a96:	3302      	adds	r3, #2
 8000a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f003 0303 	and.w	r3, r3, #3
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	220f      	movs	r2, #15
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000aba:	d01f      	beq.n	8000afc <HAL_GPIO_Init+0x1f8>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a4c      	ldr	r2, [pc, #304]	@ (8000bf0 <HAL_GPIO_Init+0x2ec>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d019      	beq.n	8000af8 <HAL_GPIO_Init+0x1f4>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a4b      	ldr	r2, [pc, #300]	@ (8000bf4 <HAL_GPIO_Init+0x2f0>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d013      	beq.n	8000af4 <HAL_GPIO_Init+0x1f0>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a4a      	ldr	r2, [pc, #296]	@ (8000bf8 <HAL_GPIO_Init+0x2f4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d00d      	beq.n	8000af0 <HAL_GPIO_Init+0x1ec>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a49      	ldr	r2, [pc, #292]	@ (8000bfc <HAL_GPIO_Init+0x2f8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d007      	beq.n	8000aec <HAL_GPIO_Init+0x1e8>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a48      	ldr	r2, [pc, #288]	@ (8000c00 <HAL_GPIO_Init+0x2fc>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d101      	bne.n	8000ae8 <HAL_GPIO_Init+0x1e4>
 8000ae4:	2305      	movs	r3, #5
 8000ae6:	e00a      	b.n	8000afe <HAL_GPIO_Init+0x1fa>
 8000ae8:	2306      	movs	r3, #6
 8000aea:	e008      	b.n	8000afe <HAL_GPIO_Init+0x1fa>
 8000aec:	2304      	movs	r3, #4
 8000aee:	e006      	b.n	8000afe <HAL_GPIO_Init+0x1fa>
 8000af0:	2303      	movs	r3, #3
 8000af2:	e004      	b.n	8000afe <HAL_GPIO_Init+0x1fa>
 8000af4:	2302      	movs	r3, #2
 8000af6:	e002      	b.n	8000afe <HAL_GPIO_Init+0x1fa>
 8000af8:	2301      	movs	r3, #1
 8000afa:	e000      	b.n	8000afe <HAL_GPIO_Init+0x1fa>
 8000afc:	2300      	movs	r3, #0
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	f002 0203 	and.w	r2, r2, #3
 8000b04:	0092      	lsls	r2, r2, #2
 8000b06:	4093      	lsls	r3, r2
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b0e:	4937      	ldr	r1, [pc, #220]	@ (8000bec <HAL_GPIO_Init+0x2e8>)
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	089b      	lsrs	r3, r3, #2
 8000b14:	3302      	adds	r3, #2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b1c:	4b39      	ldr	r3, [pc, #228]	@ (8000c04 <HAL_GPIO_Init+0x300>)
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	43db      	mvns	r3, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d003      	beq.n	8000b40 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b40:	4a30      	ldr	r2, [pc, #192]	@ (8000c04 <HAL_GPIO_Init+0x300>)
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b46:	4b2f      	ldr	r3, [pc, #188]	@ (8000c04 <HAL_GPIO_Init+0x300>)
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d003      	beq.n	8000b6a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b6a:	4a26      	ldr	r2, [pc, #152]	@ (8000c04 <HAL_GPIO_Init+0x300>)
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000b70:	4b24      	ldr	r3, [pc, #144]	@ (8000c04 <HAL_GPIO_Init+0x300>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d003      	beq.n	8000b94 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b94:	4a1b      	ldr	r2, [pc, #108]	@ (8000c04 <HAL_GPIO_Init+0x300>)
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c04 <HAL_GPIO_Init+0x300>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bbe:	4a11      	ldr	r2, [pc, #68]	@ (8000c04 <HAL_GPIO_Init+0x300>)
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	f47f ae9d 	bne.w	8000914 <HAL_GPIO_Init+0x10>
  }
}
 8000bda:	bf00      	nop
 8000bdc:	bf00      	nop
 8000bde:	371c      	adds	r7, #28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40010000 	.word	0x40010000
 8000bf0:	48000400 	.word	0x48000400
 8000bf4:	48000800 	.word	0x48000800
 8000bf8:	48000c00 	.word	0x48000c00
 8000bfc:	48001000 	.word	0x48001000
 8000c00:	48001400 	.word	0x48001400
 8000c04:	40010400 	.word	0x40010400

08000c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	807b      	strh	r3, [r7, #2]
 8000c14:	4613      	mov	r3, r2
 8000c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c18:	787b      	ldrb	r3, [r7, #1]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c1e:	887a      	ldrh	r2, [r7, #2]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c24:	e002      	b.n	8000c2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c26:	887a      	ldrh	r2, [r7, #2]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d141      	bne.n	8000cca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c46:	4b4b      	ldr	r3, [pc, #300]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c52:	d131      	bne.n	8000cb8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c54:	4b47      	ldr	r3, [pc, #284]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c5a:	4a46      	ldr	r2, [pc, #280]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c64:	4b43      	ldr	r3, [pc, #268]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c6c:	4a41      	ldr	r2, [pc, #260]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c74:	4b40      	ldr	r3, [pc, #256]	@ (8000d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2232      	movs	r2, #50	@ 0x32
 8000c7a:	fb02 f303 	mul.w	r3, r2, r3
 8000c7e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c80:	fba2 2303 	umull	r2, r3, r2, r3
 8000c84:	0c9b      	lsrs	r3, r3, #18
 8000c86:	3301      	adds	r3, #1
 8000c88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c8a:	e002      	b.n	8000c92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c92:	4b38      	ldr	r3, [pc, #224]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c9e:	d102      	bne.n	8000ca6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1f2      	bne.n	8000c8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ca6:	4b33      	ldr	r3, [pc, #204]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cb2:	d158      	bne.n	8000d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e057      	b.n	8000d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000cc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000cc8:	e04d      	b.n	8000d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cd0:	d141      	bne.n	8000d56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cd2:	4b28      	ldr	r3, [pc, #160]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cde:	d131      	bne.n	8000d44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ce0:	4b24      	ldr	r3, [pc, #144]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ce6:	4a23      	ldr	r2, [pc, #140]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf0:	4b20      	ldr	r3, [pc, #128]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d00:	4b1d      	ldr	r3, [pc, #116]	@ (8000d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2232      	movs	r2, #50	@ 0x32
 8000d06:	fb02 f303 	mul.w	r3, r2, r3
 8000d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d10:	0c9b      	lsrs	r3, r3, #18
 8000d12:	3301      	adds	r3, #1
 8000d14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d16:	e002      	b.n	8000d1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d1e:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d2a:	d102      	bne.n	8000d32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1f2      	bne.n	8000d18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d3e:	d112      	bne.n	8000d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e011      	b.n	8000d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d44:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000d54:	e007      	b.n	8000d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d56:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d5e:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	40007000 	.word	0x40007000
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	431bde83 	.word	0x431bde83

08000d80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	4a04      	ldr	r2, [pc, #16]	@ (8000d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000d8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d8e:	6093      	str	r3, [r2, #8]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40007000 	.word	0x40007000

08000da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e2fe      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d075      	beq.n	8000eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dbe:	4b97      	ldr	r3, [pc, #604]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f003 030c 	and.w	r3, r3, #12
 8000dc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dc8:	4b94      	ldr	r3, [pc, #592]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	2b0c      	cmp	r3, #12
 8000dd6:	d102      	bne.n	8000dde <HAL_RCC_OscConfig+0x3e>
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d002      	beq.n	8000de4 <HAL_RCC_OscConfig+0x44>
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	2b08      	cmp	r3, #8
 8000de2:	d10b      	bne.n	8000dfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de4:	4b8d      	ldr	r3, [pc, #564]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d05b      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x108>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d157      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e2d9      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e04:	d106      	bne.n	8000e14 <HAL_RCC_OscConfig+0x74>
 8000e06:	4b85      	ldr	r3, [pc, #532]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a84      	ldr	r2, [pc, #528]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	e01d      	b.n	8000e50 <HAL_RCC_OscConfig+0xb0>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e1c:	d10c      	bne.n	8000e38 <HAL_RCC_OscConfig+0x98>
 8000e1e:	4b7f      	ldr	r3, [pc, #508]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a7e      	ldr	r2, [pc, #504]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	4b7c      	ldr	r3, [pc, #496]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a7b      	ldr	r2, [pc, #492]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e00b      	b.n	8000e50 <HAL_RCC_OscConfig+0xb0>
 8000e38:	4b78      	ldr	r3, [pc, #480]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a77      	ldr	r2, [pc, #476]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	4b75      	ldr	r3, [pc, #468]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a74      	ldr	r2, [pc, #464]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d013      	beq.n	8000e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e58:	f7ff fc64 	bl	8000724 <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e60:	f7ff fc60 	bl	8000724 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b64      	cmp	r3, #100	@ 0x64
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e29e      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e72:	4b6a      	ldr	r3, [pc, #424]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f0      	beq.n	8000e60 <HAL_RCC_OscConfig+0xc0>
 8000e7e:	e014      	b.n	8000eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e80:	f7ff fc50 	bl	8000724 <HAL_GetTick>
 8000e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e86:	e008      	b.n	8000e9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e88:	f7ff fc4c 	bl	8000724 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b64      	cmp	r3, #100	@ 0x64
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e28a      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e9a:	4b60      	ldr	r3, [pc, #384]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1f0      	bne.n	8000e88 <HAL_RCC_OscConfig+0xe8>
 8000ea6:	e000      	b.n	8000eaa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d075      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eb6:	4b59      	ldr	r3, [pc, #356]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f003 030c 	and.w	r3, r3, #12
 8000ebe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ec0:	4b56      	ldr	r3, [pc, #344]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	2b0c      	cmp	r3, #12
 8000ece:	d102      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x136>
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d002      	beq.n	8000edc <HAL_RCC_OscConfig+0x13c>
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d11f      	bne.n	8000f1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000edc:	4b4f      	ldr	r3, [pc, #316]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d005      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x154>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d101      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e25d      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef4:	4b49      	ldr	r3, [pc, #292]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	061b      	lsls	r3, r3, #24
 8000f02:	4946      	ldr	r1, [pc, #280]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f04:	4313      	orrs	r3, r2
 8000f06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f08:	4b45      	ldr	r3, [pc, #276]	@ (8001020 <HAL_RCC_OscConfig+0x280>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fbbd 	bl	800068c <HAL_InitTick>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d043      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e249      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d023      	beq.n	8000f6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f24:	4b3d      	ldr	r3, [pc, #244]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a3c      	ldr	r2, [pc, #240]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f30:	f7ff fbf8 	bl	8000724 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f38:	f7ff fbf4 	bl	8000724 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e232      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f4a:	4b34      	ldr	r3, [pc, #208]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f56:	4b31      	ldr	r3, [pc, #196]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	061b      	lsls	r3, r3, #24
 8000f64:	492d      	ldr	r1, [pc, #180]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f66:	4313      	orrs	r3, r2
 8000f68:	604b      	str	r3, [r1, #4]
 8000f6a:	e01a      	b.n	8000fa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a2a      	ldr	r2, [pc, #168]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f78:	f7ff fbd4 	bl	8000724 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f80:	f7ff fbd0 	bl	8000724 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e20e      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f92:	4b22      	ldr	r3, [pc, #136]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f0      	bne.n	8000f80 <HAL_RCC_OscConfig+0x1e0>
 8000f9e:	e000      	b.n	8000fa2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fa0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d041      	beq.n	8001032 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d01c      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fbc:	4a17      	ldr	r2, [pc, #92]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fc6:	f7ff fbad 	bl	8000724 <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fce:	f7ff fba9 	bl	8000724 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e1e7      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0ef      	beq.n	8000fce <HAL_RCC_OscConfig+0x22e>
 8000fee:	e020      	b.n	8001032 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ff6:	4a09      	ldr	r2, [pc, #36]	@ (800101c <HAL_RCC_OscConfig+0x27c>)
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001000:	f7ff fb90 	bl	8000724 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001006:	e00d      	b.n	8001024 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001008:	f7ff fb8c 	bl	8000724 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d906      	bls.n	8001024 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e1ca      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000
 8001020:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001024:	4b8c      	ldr	r3, [pc, #560]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001026:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1ea      	bne.n	8001008 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 80a6 	beq.w	800118c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001044:	4b84      	ldr	r3, [pc, #528]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <HAL_RCC_OscConfig+0x2b4>
 8001050:	2301      	movs	r3, #1
 8001052:	e000      	b.n	8001056 <HAL_RCC_OscConfig+0x2b6>
 8001054:	2300      	movs	r3, #0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00d      	beq.n	8001076 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	4b7f      	ldr	r3, [pc, #508]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105e:	4a7e      	ldr	r2, [pc, #504]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001064:	6593      	str	r3, [r2, #88]	@ 0x58
 8001066:	4b7c      	ldr	r3, [pc, #496]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001072:	2301      	movs	r3, #1
 8001074:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001076:	4b79      	ldr	r3, [pc, #484]	@ (800125c <HAL_RCC_OscConfig+0x4bc>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800107e:	2b00      	cmp	r3, #0
 8001080:	d118      	bne.n	80010b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001082:	4b76      	ldr	r3, [pc, #472]	@ (800125c <HAL_RCC_OscConfig+0x4bc>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a75      	ldr	r2, [pc, #468]	@ (800125c <HAL_RCC_OscConfig+0x4bc>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800108e:	f7ff fb49 	bl	8000724 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001096:	f7ff fb45 	bl	8000724 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e183      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010a8:	4b6c      	ldr	r3, [pc, #432]	@ (800125c <HAL_RCC_OscConfig+0x4bc>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d108      	bne.n	80010ce <HAL_RCC_OscConfig+0x32e>
 80010bc:	4b66      	ldr	r3, [pc, #408]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010c2:	4a65      	ldr	r2, [pc, #404]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80010cc:	e024      	b.n	8001118 <HAL_RCC_OscConfig+0x378>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	d110      	bne.n	80010f8 <HAL_RCC_OscConfig+0x358>
 80010d6:	4b60      	ldr	r3, [pc, #384]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010dc:	4a5e      	ldr	r2, [pc, #376]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80010e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010ec:	4a5a      	ldr	r2, [pc, #360]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80010f6:	e00f      	b.n	8001118 <HAL_RCC_OscConfig+0x378>
 80010f8:	4b57      	ldr	r3, [pc, #348]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80010fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010fe:	4a56      	ldr	r2, [pc, #344]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001100:	f023 0301 	bic.w	r3, r3, #1
 8001104:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001108:	4b53      	ldr	r3, [pc, #332]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 800110a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800110e:	4a52      	ldr	r2, [pc, #328]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001110:	f023 0304 	bic.w	r3, r3, #4
 8001114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d016      	beq.n	800114e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001120:	f7ff fb00 	bl	8000724 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001126:	e00a      	b.n	800113e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001128:	f7ff fafc 	bl	8000724 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001136:	4293      	cmp	r3, r2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e138      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800113e:	4b46      	ldr	r3, [pc, #280]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0ed      	beq.n	8001128 <HAL_RCC_OscConfig+0x388>
 800114c:	e015      	b.n	800117a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800114e:	f7ff fae9 	bl	8000724 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001154:	e00a      	b.n	800116c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001156:	f7ff fae5 	bl	8000724 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001164:	4293      	cmp	r3, r2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e121      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800116c:	4b3a      	ldr	r3, [pc, #232]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 800116e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1ed      	bne.n	8001156 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800117a:	7ffb      	ldrb	r3, [r7, #31]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d105      	bne.n	800118c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001180:	4b35      	ldr	r3, [pc, #212]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001184:	4a34      	ldr	r2, [pc, #208]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001186:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800118a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0320 	and.w	r3, r3, #32
 8001194:	2b00      	cmp	r3, #0
 8001196:	d03c      	beq.n	8001212 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d01c      	beq.n	80011da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80011a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b0:	f7ff fab8 	bl	8000724 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011b8:	f7ff fab4 	bl	8000724 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e0f2      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011ca:	4b23      	ldr	r3, [pc, #140]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80011cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0ef      	beq.n	80011b8 <HAL_RCC_OscConfig+0x418>
 80011d8:	e01b      	b.n	8001212 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80011da:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80011dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 80011e2:	f023 0301 	bic.w	r3, r3, #1
 80011e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ea:	f7ff fa9b 	bl	8000724 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011f2:	f7ff fa97 	bl	8000724 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e0d5      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001206:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1ef      	bne.n	80011f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 80c9 	beq.w	80013ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800121c:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b0c      	cmp	r3, #12
 8001226:	f000 8083 	beq.w	8001330 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d15e      	bne.n	80012f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001232:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a08      	ldr	r2, [pc, #32]	@ (8001258 <HAL_RCC_OscConfig+0x4b8>)
 8001238:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800123c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123e:	f7ff fa71 	bl	8000724 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001244:	e00c      	b.n	8001260 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001246:	f7ff fa6d 	bl	8000724 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d905      	bls.n	8001260 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e0ab      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
 8001258:	40021000 	.word	0x40021000
 800125c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001260:	4b55      	ldr	r3, [pc, #340]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1ec      	bne.n	8001246 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800126c:	4b52      	ldr	r3, [pc, #328]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	4b52      	ldr	r3, [pc, #328]	@ (80013bc <HAL_RCC_OscConfig+0x61c>)
 8001272:	4013      	ands	r3, r2
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6a11      	ldr	r1, [r2, #32]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800127c:	3a01      	subs	r2, #1
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	4311      	orrs	r1, r2
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001286:	0212      	lsls	r2, r2, #8
 8001288:	4311      	orrs	r1, r2
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800128e:	0852      	lsrs	r2, r2, #1
 8001290:	3a01      	subs	r2, #1
 8001292:	0552      	lsls	r2, r2, #21
 8001294:	4311      	orrs	r1, r2
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800129a:	0852      	lsrs	r2, r2, #1
 800129c:	3a01      	subs	r2, #1
 800129e:	0652      	lsls	r2, r2, #25
 80012a0:	4311      	orrs	r1, r2
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80012a6:	06d2      	lsls	r2, r2, #27
 80012a8:	430a      	orrs	r2, r1
 80012aa:	4943      	ldr	r1, [pc, #268]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012b0:	4b41      	ldr	r3, [pc, #260]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a40      	ldr	r2, [pc, #256]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012bc:	4b3e      	ldr	r3, [pc, #248]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	4a3d      	ldr	r2, [pc, #244]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fa2c 	bl	8000724 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d0:	f7ff fa28 	bl	8000724 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e066      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012e2:	4b35      	ldr	r3, [pc, #212]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x530>
 80012ee:	e05e      	b.n	80013ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f0:	4b31      	ldr	r3, [pc, #196]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a30      	ldr	r2, [pc, #192]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 80012f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7ff fa12 	bl	8000724 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001304:	f7ff fa0e 	bl	8000724 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e04c      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001316:	4b28      	ldr	r3, [pc, #160]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001322:	4b25      	ldr	r3, [pc, #148]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	4924      	ldr	r1, [pc, #144]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 8001328:	4b25      	ldr	r3, [pc, #148]	@ (80013c0 <HAL_RCC_OscConfig+0x620>)
 800132a:	4013      	ands	r3, r2
 800132c:	60cb      	str	r3, [r1, #12]
 800132e:	e03e      	b.n	80013ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e039      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800133c:	4b1e      	ldr	r3, [pc, #120]	@ (80013b8 <HAL_RCC_OscConfig+0x618>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f003 0203 	and.w	r2, r3, #3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	429a      	cmp	r2, r3
 800134e:	d12c      	bne.n	80013aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135a:	3b01      	subs	r3, #1
 800135c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135e:	429a      	cmp	r2, r3
 8001360:	d123      	bne.n	80013aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800136c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800136e:	429a      	cmp	r2, r3
 8001370:	d11b      	bne.n	80013aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800137c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800137e:	429a      	cmp	r2, r3
 8001380:	d113      	bne.n	80013aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138c:	085b      	lsrs	r3, r3, #1
 800138e:	3b01      	subs	r3, #1
 8001390:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001392:	429a      	cmp	r2, r3
 8001394:	d109      	bne.n	80013aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013a0:	085b      	lsrs	r3, r3, #1
 80013a2:	3b01      	subs	r3, #1
 80013a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d001      	beq.n	80013ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40021000 	.word	0x40021000
 80013bc:	019f800c 	.word	0x019f800c
 80013c0:	feeefffc 	.word	0xfeeefffc

080013c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e11e      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013dc:	4b91      	ldr	r3, [pc, #580]	@ (8001624 <HAL_RCC_ClockConfig+0x260>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d910      	bls.n	800140c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ea:	4b8e      	ldr	r3, [pc, #568]	@ (8001624 <HAL_RCC_ClockConfig+0x260>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 020f 	bic.w	r2, r3, #15
 80013f2:	498c      	ldr	r1, [pc, #560]	@ (8001624 <HAL_RCC_ClockConfig+0x260>)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fa:	4b8a      	ldr	r3, [pc, #552]	@ (8001624 <HAL_RCC_ClockConfig+0x260>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e106      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b00      	cmp	r3, #0
 8001416:	d073      	beq.n	8001500 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b03      	cmp	r3, #3
 800141e:	d129      	bne.n	8001474 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001420:	4b81      	ldr	r3, [pc, #516]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e0f4      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001430:	f000 f9ac 	bl	800178c <RCC_GetSysClockFreqFromPLLSource>
 8001434:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4a7c      	ldr	r2, [pc, #496]	@ (800162c <HAL_RCC_ClockConfig+0x268>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d93f      	bls.n	80014be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800143e:	4b7a      	ldr	r3, [pc, #488]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d009      	beq.n	800145e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001452:	2b00      	cmp	r3, #0
 8001454:	d033      	beq.n	80014be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800145a:	2b00      	cmp	r3, #0
 800145c:	d12f      	bne.n	80014be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800145e:	4b72      	ldr	r3, [pc, #456]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001466:	4a70      	ldr	r2, [pc, #448]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800146c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800146e:	2380      	movs	r3, #128	@ 0x80
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	e024      	b.n	80014be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d107      	bne.n	800148c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800147c:	4b6a      	ldr	r3, [pc, #424]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d109      	bne.n	800149c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0c6      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800148c:	4b66      	ldr	r3, [pc, #408]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0be      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800149c:	f000 f914 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4a61      	ldr	r2, [pc, #388]	@ (800162c <HAL_RCC_ClockConfig+0x268>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d909      	bls.n	80014be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80014aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014b2:	4a5d      	ldr	r2, [pc, #372]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 80014b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80014ba:	2380      	movs	r3, #128	@ 0x80
 80014bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014be:	4b5a      	ldr	r3, [pc, #360]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f023 0203 	bic.w	r2, r3, #3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	4957      	ldr	r1, [pc, #348]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014d0:	f7ff f928 	bl	8000724 <HAL_GetTick>
 80014d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d6:	e00a      	b.n	80014ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d8:	f7ff f924 	bl	8000724 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e095      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 020c 	and.w	r2, r3, #12
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d1eb      	bne.n	80014d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d023      	beq.n	8001554 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001518:	4b43      	ldr	r3, [pc, #268]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	4a42      	ldr	r2, [pc, #264]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 800151e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001522:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	2b00      	cmp	r3, #0
 800152e:	d007      	beq.n	8001540 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001530:	4b3d      	ldr	r3, [pc, #244]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001538:	4a3b      	ldr	r2, [pc, #236]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 800153a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800153e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001540:	4b39      	ldr	r3, [pc, #228]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	4936      	ldr	r1, [pc, #216]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 800154e:	4313      	orrs	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
 8001552:	e008      	b.n	8001566 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2b80      	cmp	r3, #128	@ 0x80
 8001558:	d105      	bne.n	8001566 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800155a:	4b33      	ldr	r3, [pc, #204]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	4a32      	ldr	r2, [pc, #200]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 8001560:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001564:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001566:	4b2f      	ldr	r3, [pc, #188]	@ (8001624 <HAL_RCC_ClockConfig+0x260>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d21d      	bcs.n	80015b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001574:	4b2b      	ldr	r3, [pc, #172]	@ (8001624 <HAL_RCC_ClockConfig+0x260>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f023 020f 	bic.w	r2, r3, #15
 800157c:	4929      	ldr	r1, [pc, #164]	@ (8001624 <HAL_RCC_ClockConfig+0x260>)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	4313      	orrs	r3, r2
 8001582:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001584:	f7ff f8ce 	bl	8000724 <HAL_GetTick>
 8001588:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	e00a      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158c:	f7ff f8ca 	bl	8000724 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800159a:	4293      	cmp	r3, r2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e03b      	b.n	800161a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b20      	ldr	r3, [pc, #128]	@ (8001624 <HAL_RCC_ClockConfig+0x260>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d1ed      	bne.n	800158c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	4917      	ldr	r1, [pc, #92]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d009      	beq.n	80015ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015da:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	490f      	ldr	r1, [pc, #60]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015ee:	f000 f86b 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 80015f2:	4602      	mov	r2, r0
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <HAL_RCC_ClockConfig+0x264>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	490c      	ldr	r1, [pc, #48]	@ (8001630 <HAL_RCC_ClockConfig+0x26c>)
 8001600:	5ccb      	ldrb	r3, [r1, r3]
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	fa22 f303 	lsr.w	r3, r2, r3
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <HAL_RCC_ClockConfig+0x270>)
 800160c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800160e:	4b0a      	ldr	r3, [pc, #40]	@ (8001638 <HAL_RCC_ClockConfig+0x274>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff f83a 	bl	800068c <HAL_InitTick>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40022000 	.word	0x40022000
 8001628:	40021000 	.word	0x40021000
 800162c:	04c4b400 	.word	0x04c4b400
 8001630:	08001f94 	.word	0x08001f94
 8001634:	20000000 	.word	0x20000000
 8001638:	20000004 	.word	0x20000004

0800163c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	@ 0x30
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	0c1b      	lsrs	r3, r3, #16
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8001668:	029b      	lsls	r3, r3, #10
 800166a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	0c1b      	lsrs	r3, r3, #16
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8001676:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <HAL_RCC_MCOConfig+0x88>)
 8001678:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800167a:	2101      	movs	r1, #1
 800167c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	4910      	ldr	r1, [pc, #64]	@ (80016c4 <HAL_RCC_MCOConfig+0x88>)
 8001684:	4313      	orrs	r3, r2
 8001686:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	b29b      	uxth	r3, r3
 800168c:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	0d1b      	lsrs	r3, r3, #20
 8001692:	b2db      	uxtb	r3, r3
 8001694:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	4619      	mov	r1, r3
 800169c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800169e:	f7ff f931 	bl	8000904 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 80016a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d109      	bne.n	80016bc <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 80016a8:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <HAL_RCC_MCOConfig+0x88>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	430b      	orrs	r3, r1
 80016b6:	4903      	ldr	r1, [pc, #12]	@ (80016c4 <HAL_RCC_MCOConfig+0x88>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	608b      	str	r3, [r1, #8]
  }
}
 80016bc:	bf00      	nop
 80016be:	3730      	adds	r7, #48	@ 0x30
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40021000 	.word	0x40021000

080016c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80016ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d102      	bne.n	80016e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016da:	4b2a      	ldr	r3, [pc, #168]	@ (8001784 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	e047      	b.n	8001770 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80016e0:	4b27      	ldr	r3, [pc, #156]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d102      	bne.n	80016f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016ec:	4b26      	ldr	r3, [pc, #152]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	e03e      	b.n	8001770 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80016f2:	4b23      	ldr	r3, [pc, #140]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b0c      	cmp	r3, #12
 80016fc:	d136      	bne.n	800176c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016fe:	4b20      	ldr	r3, [pc, #128]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001708:	4b1d      	ldr	r3, [pc, #116]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xb8>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	3301      	adds	r3, #1
 8001714:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d10c      	bne.n	8001736 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800171c:	4a1a      	ldr	r2, [pc, #104]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xc0>)
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	fbb2 f3f3 	udiv	r3, r2, r3
 8001724:	4a16      	ldr	r2, [pc, #88]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001726:	68d2      	ldr	r2, [r2, #12]
 8001728:	0a12      	lsrs	r2, r2, #8
 800172a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800172e:	fb02 f303 	mul.w	r3, r2, r3
 8001732:	617b      	str	r3, [r7, #20]
      break;
 8001734:	e00c      	b.n	8001750 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001736:	4a13      	ldr	r2, [pc, #76]	@ (8001784 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	fbb2 f3f3 	udiv	r3, r2, r3
 800173e:	4a10      	ldr	r2, [pc, #64]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001740:	68d2      	ldr	r2, [r2, #12]
 8001742:	0a12      	lsrs	r2, r2, #8
 8001744:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001748:	fb02 f303 	mul.w	r3, r2, r3
 800174c:	617b      	str	r3, [r7, #20]
      break;
 800174e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001750:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0e5b      	lsrs	r3, r3, #25
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	3301      	adds	r3, #1
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	fbb2 f3f3 	udiv	r3, r2, r3
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	e001      	b.n	8001770 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001770:	693b      	ldr	r3, [r7, #16]
}
 8001772:	4618      	mov	r0, r3
 8001774:	371c      	adds	r7, #28
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000
 8001784:	00f42400 	.word	0x00f42400
 8001788:	017d7840 	.word	0x017d7840

0800178c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800178c:	b480      	push	{r7}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001792:	4b1e      	ldr	r3, [pc, #120]	@ (800180c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800179c:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3301      	adds	r3, #1
 80017a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d10c      	bne.n	80017ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017b0:	4a17      	ldr	r2, [pc, #92]	@ (8001810 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b8:	4a14      	ldr	r2, [pc, #80]	@ (800180c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017ba:	68d2      	ldr	r2, [r2, #12]
 80017bc:	0a12      	lsrs	r2, r2, #8
 80017be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017c2:	fb02 f303 	mul.w	r3, r2, r3
 80017c6:	617b      	str	r3, [r7, #20]
    break;
 80017c8:	e00c      	b.n	80017e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017ca:	4a12      	ldr	r2, [pc, #72]	@ (8001814 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	4a0e      	ldr	r2, [pc, #56]	@ (800180c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017d4:	68d2      	ldr	r2, [r2, #12]
 80017d6:	0a12      	lsrs	r2, r2, #8
 80017d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017dc:	fb02 f303 	mul.w	r3, r2, r3
 80017e0:	617b      	str	r3, [r7, #20]
    break;
 80017e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017e4:	4b09      	ldr	r3, [pc, #36]	@ (800180c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0e5b      	lsrs	r3, r3, #25
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	3301      	adds	r3, #1
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80017fe:	687b      	ldr	r3, [r7, #4]
}
 8001800:	4618      	mov	r0, r3
 8001802:	371c      	adds	r7, #28
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40021000 	.word	0x40021000
 8001810:	017d7840 	.word	0x017d7840
 8001814:	00f42400 	.word	0x00f42400

08001818 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e09d      	b.n	8001966 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182e:	2b00      	cmp	r3, #0
 8001830:	d108      	bne.n	8001844 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800183a:	d009      	beq.n	8001850 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
 8001842:	e005      	b.n	8001850 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d106      	bne.n	8001870 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7fe fe36 	bl	80004dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2202      	movs	r2, #2
 8001874:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001886:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001890:	d902      	bls.n	8001898 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	e002      	b.n	800189e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001898:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800189c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80018a6:	d007      	beq.n	80018b8 <HAL_SPI_Init+0xa0>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80018b0:	d002      	beq.n	80018b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018f0:	431a      	orrs	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018fa:	ea42 0103 	orr.w	r1, r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001902:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	0c1b      	lsrs	r3, r3, #16
 8001914:	f003 0204 	and.w	r2, r3, #4
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001934:	ea42 0103 	orr.w	r1, r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	69da      	ldr	r2, [r3, #28]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001954:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b088      	sub	sp, #32
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	4613      	mov	r3, r2
 800197c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800197e:	f7fe fed1 	bl	8000724 <HAL_GetTick>
 8001982:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001984:	88fb      	ldrh	r3, [r7, #6]
 8001986:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b01      	cmp	r3, #1
 8001992:	d001      	beq.n	8001998 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001994:	2302      	movs	r3, #2
 8001996:	e15c      	b.n	8001c52 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <HAL_SPI_Transmit+0x36>
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e154      	b.n	8001c52 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_SPI_Transmit+0x48>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e14d      	b.n	8001c52 <HAL_SPI_Transmit+0x2e4>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2203      	movs	r2, #3
 80019c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	88fa      	ldrh	r2, [r7, #6]
 80019d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	88fa      	ldrh	r2, [r7, #6]
 80019dc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a08:	d10f      	bne.n	8001a2a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a34:	2b40      	cmp	r3, #64	@ 0x40
 8001a36:	d007      	beq.n	8001a48 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001a50:	d952      	bls.n	8001af8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d002      	beq.n	8001a60 <HAL_SPI_Transmit+0xf2>
 8001a5a:	8b7b      	ldrh	r3, [r7, #26]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d145      	bne.n	8001aec <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a64:	881a      	ldrh	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a70:	1c9a      	adds	r2, r3, #2
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a84:	e032      	b.n	8001aec <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d112      	bne.n	8001aba <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a98:	881a      	ldrh	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aa4:	1c9a      	adds	r2, r3, #2
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001ab8:	e018      	b.n	8001aec <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001aba:	f7fe fe33 	bl	8000724 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d803      	bhi.n	8001ad2 <HAL_SPI_Transmit+0x164>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad0:	d102      	bne.n	8001ad8 <HAL_SPI_Transmit+0x16a>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e0b2      	b.n	8001c52 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1c7      	bne.n	8001a86 <HAL_SPI_Transmit+0x118>
 8001af6:	e083      	b.n	8001c00 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <HAL_SPI_Transmit+0x198>
 8001b00:	8b7b      	ldrh	r3, [r7, #26]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d177      	bne.n	8001bf6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d912      	bls.n	8001b36 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b14:	881a      	ldrh	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b20:	1c9a      	adds	r2, r3, #2
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	3b02      	subs	r3, #2
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001b34:	e05f      	b.n	8001bf6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	330c      	adds	r3, #12
 8001b40:	7812      	ldrb	r2, [r2, #0]
 8001b42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001b5c:	e04b      	b.n	8001bf6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d12b      	bne.n	8001bc4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d912      	bls.n	8001b9c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b7a:	881a      	ldrh	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b86:	1c9a      	adds	r2, r3, #2
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	3b02      	subs	r3, #2
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001b9a:	e02c      	b.n	8001bf6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	330c      	adds	r3, #12
 8001ba6:	7812      	ldrb	r2, [r2, #0]
 8001ba8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001bc2:	e018      	b.n	8001bf6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bc4:	f7fe fdae 	bl	8000724 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d803      	bhi.n	8001bdc <HAL_SPI_Transmit+0x26e>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bda:	d102      	bne.n	8001be2 <HAL_SPI_Transmit+0x274>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d109      	bne.n	8001bf6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e02d      	b.n	8001c52 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1ae      	bne.n	8001b5e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c00:	69fa      	ldr	r2, [r7, #28]
 8001c02:	6839      	ldr	r1, [r7, #0]
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 f947 	bl	8001e98 <SPI_EndRxTxTransaction>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2220      	movs	r2, #32
 8001c14:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10a      	bne.n	8001c34 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8001c50:	2300      	movs	r3, #0
  }
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3720      	adds	r7, #32
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001c6c:	f7fe fd5a 	bl	8000724 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	4413      	add	r3, r2
 8001c7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001c7c:	f7fe fd52 	bl	8000724 <HAL_GetTick>
 8001c80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c82:	4b39      	ldr	r3, [pc, #228]	@ (8001d68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	015b      	lsls	r3, r3, #5
 8001c88:	0d1b      	lsrs	r3, r3, #20
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	fb02 f303 	mul.w	r3, r2, r3
 8001c90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c92:	e054      	b.n	8001d3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9a:	d050      	beq.n	8001d3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001c9c:	f7fe fd42 	bl	8000724 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d902      	bls.n	8001cb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d13d      	bne.n	8001d2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001cc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001cca:	d111      	bne.n	8001cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cd4:	d004      	beq.n	8001ce0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cde:	d107      	bne.n	8001cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cf8:	d10f      	bne.n	8001d1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e017      	b.n	8001d5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4013      	ands	r3, r2
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	bf0c      	ite	eq
 8001d4e:	2301      	moveq	r3, #1
 8001d50:	2300      	movne	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d19b      	bne.n	8001c94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3720      	adds	r7, #32
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000000 	.word	0x20000000

08001d6c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	@ 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001d7e:	f7fe fcd1 	bl	8000724 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d86:	1a9b      	subs	r3, r3, r2
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8001d8e:	f7fe fcc9 	bl	8000724 <HAL_GetTick>
 8001d92:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	330c      	adds	r3, #12
 8001d9a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001d9c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e94 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	00da      	lsls	r2, r3, #3
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	0d1b      	lsrs	r3, r3, #20
 8001dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dae:	fb02 f303 	mul.w	r3, r2, r3
 8001db2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001db4:	e060      	b.n	8001e78 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8001dbc:	d107      	bne.n	8001dce <SPI_WaitFifoStateUntilTimeout+0x62>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d104      	bne.n	8001dce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001dcc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd4:	d050      	beq.n	8001e78 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001dd6:	f7fe fca5 	bl	8000724 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d902      	bls.n	8001dec <SPI_WaitFifoStateUntilTimeout+0x80>
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d13d      	bne.n	8001e68 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001dfa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e04:	d111      	bne.n	8001e2a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e0e:	d004      	beq.n	8001e1a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e18:	d107      	bne.n	8001e2a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e28:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e32:	d10f      	bne.n	8001e54 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e52:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e010      	b.n	8001e8a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	4013      	ands	r3, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d196      	bne.n	8001db6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3728      	adds	r7, #40	@ 0x28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000000 	.word	0x20000000

08001e98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f7ff ff5b 	bl	8001d6c <SPI_WaitFifoStateUntilTimeout>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d007      	beq.n	8001ecc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec0:	f043 0220 	orr.w	r2, r3, #32
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e027      	b.n	8001f1c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2180      	movs	r1, #128	@ 0x80
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f7ff fec0 	bl	8001c5c <SPI_WaitFlagStateUntilTimeout>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d007      	beq.n	8001ef2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee6:	f043 0220 	orr.w	r2, r3, #32
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e014      	b.n	8001f1c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f7ff ff34 	bl	8001d6c <SPI_WaitFifoStateUntilTimeout>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f0e:	f043 0220 	orr.w	r2, r3, #32
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e000      	b.n	8001f1c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <memset>:
 8001f24:	4402      	add	r2, r0
 8001f26:	4603      	mov	r3, r0
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d100      	bne.n	8001f2e <memset+0xa>
 8001f2c:	4770      	bx	lr
 8001f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8001f32:	e7f9      	b.n	8001f28 <memset+0x4>

08001f34 <__libc_init_array>:
 8001f34:	b570      	push	{r4, r5, r6, lr}
 8001f36:	4d0d      	ldr	r5, [pc, #52]	@ (8001f6c <__libc_init_array+0x38>)
 8001f38:	4c0d      	ldr	r4, [pc, #52]	@ (8001f70 <__libc_init_array+0x3c>)
 8001f3a:	1b64      	subs	r4, r4, r5
 8001f3c:	10a4      	asrs	r4, r4, #2
 8001f3e:	2600      	movs	r6, #0
 8001f40:	42a6      	cmp	r6, r4
 8001f42:	d109      	bne.n	8001f58 <__libc_init_array+0x24>
 8001f44:	4d0b      	ldr	r5, [pc, #44]	@ (8001f74 <__libc_init_array+0x40>)
 8001f46:	4c0c      	ldr	r4, [pc, #48]	@ (8001f78 <__libc_init_array+0x44>)
 8001f48:	f000 f818 	bl	8001f7c <_init>
 8001f4c:	1b64      	subs	r4, r4, r5
 8001f4e:	10a4      	asrs	r4, r4, #2
 8001f50:	2600      	movs	r6, #0
 8001f52:	42a6      	cmp	r6, r4
 8001f54:	d105      	bne.n	8001f62 <__libc_init_array+0x2e>
 8001f56:	bd70      	pop	{r4, r5, r6, pc}
 8001f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f5c:	4798      	blx	r3
 8001f5e:	3601      	adds	r6, #1
 8001f60:	e7ee      	b.n	8001f40 <__libc_init_array+0xc>
 8001f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f66:	4798      	blx	r3
 8001f68:	3601      	adds	r6, #1
 8001f6a:	e7f2      	b.n	8001f52 <__libc_init_array+0x1e>
 8001f6c:	08001fa4 	.word	0x08001fa4
 8001f70:	08001fa4 	.word	0x08001fa4
 8001f74:	08001fa4 	.word	0x08001fa4
 8001f78:	08001fa8 	.word	0x08001fa8

08001f7c <_init>:
 8001f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7e:	bf00      	nop
 8001f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f82:	bc08      	pop	{r3}
 8001f84:	469e      	mov	lr, r3
 8001f86:	4770      	bx	lr

08001f88 <_fini>:
 8001f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8a:	bf00      	nop
 8001f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f8e:	bc08      	pop	{r3}
 8001f90:	469e      	mov	lr, r3
 8001f92:	4770      	bx	lr
