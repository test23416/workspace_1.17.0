
Keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d28  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001f00  08001f00  00002f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f10  08001f10  00003020  2**0
                  CONTENTS
  4 .ARM          00000000  08001f10  08001f10  00003020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f10  08001f10  00003020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f10  08001f10  00002f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001f14  08001f14  00002f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08001f18  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000020  08001f38  00003020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08001f38  000030dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a80  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011c2  00000000  00000000  00007ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000600  00000000  00000000  00008c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000467  00000000  00000000  00009298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002323c  00000000  00000000  000096ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006106  00000000  00000000  0002c93b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000defae  00000000  00000000  00032a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001119ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001668  00000000  00000000  00111a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011309c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001ee8 	.word	0x08001ee8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08001ee8 	.word	0x08001ee8

08000218 <set_segment_direct>:
		0x40,0x00
};
int previous_numbers[]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
int counter_numbers[]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};    //Debouncing

void set_segment_direct(uint8_t segs){
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, segs & (1<<0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f003 0301 	and.w	r3, r3, #1
 8000228:	b2db      	uxtb	r3, r3
 800022a:	461a      	mov	r2, r3
 800022c:	2101      	movs	r1, #1
 800022e:	482a      	ldr	r0, [pc, #168]	@ (80002d8 <set_segment_direct+0xc0>)
 8000230:	f001 f86c 	bl	800130c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, segs & (1<<1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	105b      	asrs	r3, r3, #1
 8000238:	b2db      	uxtb	r3, r3
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	b2db      	uxtb	r3, r3
 8000240:	461a      	mov	r2, r3
 8000242:	2102      	movs	r1, #2
 8000244:	4824      	ldr	r0, [pc, #144]	@ (80002d8 <set_segment_direct+0xc0>)
 8000246:	f001 f861 	bl	800130c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, segs & (1<<2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	109b      	asrs	r3, r3, #2
 800024e:	b2db      	uxtb	r3, r3
 8000250:	f003 0301 	and.w	r3, r3, #1
 8000254:	b2db      	uxtb	r3, r3
 8000256:	461a      	mov	r2, r3
 8000258:	2104      	movs	r1, #4
 800025a:	481f      	ldr	r0, [pc, #124]	@ (80002d8 <set_segment_direct+0xc0>)
 800025c:	f001 f856 	bl	800130c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, segs & (1<<3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	10db      	asrs	r3, r3, #3
 8000264:	b2db      	uxtb	r3, r3
 8000266:	f003 0301 	and.w	r3, r3, #1
 800026a:	b2db      	uxtb	r3, r3
 800026c:	461a      	mov	r2, r3
 800026e:	2108      	movs	r1, #8
 8000270:	4819      	ldr	r0, [pc, #100]	@ (80002d8 <set_segment_direct+0xc0>)
 8000272:	f001 f84b 	bl	800130c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, segs & (1<<4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	111b      	asrs	r3, r3, #4
 800027a:	b2db      	uxtb	r3, r3
 800027c:	f003 0301 	and.w	r3, r3, #1
 8000280:	b2db      	uxtb	r3, r3
 8000282:	461a      	mov	r2, r3
 8000284:	2110      	movs	r1, #16
 8000286:	4814      	ldr	r0, [pc, #80]	@ (80002d8 <set_segment_direct+0xc0>)
 8000288:	f001 f840 	bl	800130c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, segs & (1<<5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	115b      	asrs	r3, r3, #5
 8000290:	b2db      	uxtb	r3, r3
 8000292:	f003 0301 	and.w	r3, r3, #1
 8000296:	b2db      	uxtb	r3, r3
 8000298:	461a      	mov	r2, r3
 800029a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800029e:	480e      	ldr	r0, [pc, #56]	@ (80002d8 <set_segment_direct+0xc0>)
 80002a0:	f001 f834 	bl	800130c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, segs & (1<<6) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	119b      	asrs	r3, r3, #6
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	461a      	mov	r2, r3
 80002b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002b6:	4808      	ldr	r0, [pc, #32]	@ (80002d8 <set_segment_direct+0xc0>)
 80002b8:	f001 f828 	bl	800130c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, segs & (1<<7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	09db      	lsrs	r3, r3, #7
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	461a      	mov	r2, r3
 80002c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002c8:	4803      	ldr	r0, [pc, #12]	@ (80002d8 <set_segment_direct+0xc0>)
 80002ca:	f001 f81f 	bl	800130c <HAL_GPIO_WritePin>
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	48001000 	.word	0x48001000

080002dc <display>:
void display(int number) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	if(number>=18)return;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b11      	cmp	r3, #17
 80002e8:	dc07      	bgt.n	80002fa <display+0x1e>
	set_segment_direct(code[number]);
 80002ea:	4a06      	ldr	r2, [pc, #24]	@ (8000304 <display+0x28>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4413      	add	r3, r2
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff90 	bl	8000218 <set_segment_direct>
 80002f8:	e000      	b.n	80002fc <display+0x20>
	if(number>=18)return;
 80002fa:	bf00      	nop
}
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	20000000 	.word	0x20000000

08000308 <set_digit>:
void set_digit(int8_t which)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DIG0_GPIO_Port, DIG0_Pin, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000318:	481f      	ldr	r0, [pc, #124]	@ (8000398 <set_digit+0x90>)
 800031a:	f000 fff7 	bl	800130c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIG1_GPIO_Port, DIG1_Pin, GPIO_PIN_RESET);
 800031e:	2200      	movs	r2, #0
 8000320:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000324:	481c      	ldr	r0, [pc, #112]	@ (8000398 <set_digit+0x90>)
 8000326:	f000 fff1 	bl	800130c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIG2_GPIO_Port, DIG2_Pin, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	2101      	movs	r1, #1
 800032e:	481a      	ldr	r0, [pc, #104]	@ (8000398 <set_digit+0x90>)
 8000330:	f000 ffec 	bl	800130c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIG3_GPIO_Port, DIG3_Pin, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	2102      	movs	r1, #2
 8000338:	4817      	ldr	r0, [pc, #92]	@ (8000398 <set_digit+0x90>)
 800033a:	f000 ffe7 	bl	800130c <HAL_GPIO_WritePin>
  switch (which)
 800033e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000342:	2b03      	cmp	r3, #3
 8000344:	d824      	bhi.n	8000390 <set_digit+0x88>
 8000346:	a201      	add	r2, pc, #4	@ (adr r2, 800034c <set_digit+0x44>)
 8000348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800034c:	0800035d 	.word	0x0800035d
 8000350:	0800036b 	.word	0x0800036b
 8000354:	08000379 	.word	0x08000379
 8000358:	08000385 	.word	0x08000385
  {
  case 0:HAL_GPIO_WritePin(DIG0_GPIO_Port, DIG0_Pin, GPIO_PIN_SET);break;
 800035c:	2201      	movs	r2, #1
 800035e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000362:	480d      	ldr	r0, [pc, #52]	@ (8000398 <set_digit+0x90>)
 8000364:	f000 ffd2 	bl	800130c <HAL_GPIO_WritePin>
 8000368:	e012      	b.n	8000390 <set_digit+0x88>
  case 1:HAL_GPIO_WritePin(DIG1_GPIO_Port, DIG1_Pin, GPIO_PIN_SET);break;
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000370:	4809      	ldr	r0, [pc, #36]	@ (8000398 <set_digit+0x90>)
 8000372:	f000 ffcb 	bl	800130c <HAL_GPIO_WritePin>
 8000376:	e00b      	b.n	8000390 <set_digit+0x88>
  case 2:HAL_GPIO_WritePin(DIG2_GPIO_Port, DIG2_Pin, GPIO_PIN_SET);break;
 8000378:	2201      	movs	r2, #1
 800037a:	2101      	movs	r1, #1
 800037c:	4806      	ldr	r0, [pc, #24]	@ (8000398 <set_digit+0x90>)
 800037e:	f000 ffc5 	bl	800130c <HAL_GPIO_WritePin>
 8000382:	e005      	b.n	8000390 <set_digit+0x88>
  case 3:HAL_GPIO_WritePin(DIG3_GPIO_Port, DIG3_Pin, GPIO_PIN_SET);break;
 8000384:	2201      	movs	r2, #1
 8000386:	2102      	movs	r1, #2
 8000388:	4803      	ldr	r0, [pc, #12]	@ (8000398 <set_digit+0x90>)
 800038a:	f000 ffbf 	bl	800130c <HAL_GPIO_WritePin>
 800038e:	bf00      	nop
  }
}
 8000390:	bf00      	nop
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	48000c00 	.word	0x48000c00

0800039c <set_keyboard_row>:
void set_keyboard_row(int8_t which)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2101      	movs	r1, #1
 80003aa:	4825      	ldr	r0, [pc, #148]	@ (8000440 <set_keyboard_row+0xa4>)
 80003ac:	f000 ffae 	bl	800130c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2102      	movs	r1, #2
 80003b4:	4822      	ldr	r0, [pc, #136]	@ (8000440 <set_keyboard_row+0xa4>)
 80003b6:	f000 ffa9 	bl	800130c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2104      	movs	r1, #4
 80003be:	4820      	ldr	r0, [pc, #128]	@ (8000440 <set_keyboard_row+0xa4>)
 80003c0:	f000 ffa4 	bl	800130c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2108      	movs	r1, #8
 80003c8:	481d      	ldr	r0, [pc, #116]	@ (8000440 <set_keyboard_row+0xa4>)
 80003ca:	f000 ff9f 	bl	800130c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2110      	movs	r1, #16
 80003d2:	481b      	ldr	r0, [pc, #108]	@ (8000440 <set_keyboard_row+0xa4>)
 80003d4:	f000 ff9a 	bl	800130c <HAL_GPIO_WritePin>
  switch (which)
 80003d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003dc:	2b04      	cmp	r3, #4
 80003de:	d82b      	bhi.n	8000438 <set_keyboard_row+0x9c>
 80003e0:	a201      	add	r2, pc, #4	@ (adr r2, 80003e8 <set_keyboard_row+0x4c>)
 80003e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e6:	bf00      	nop
 80003e8:	080003fd 	.word	0x080003fd
 80003ec:	08000409 	.word	0x08000409
 80003f0:	08000415 	.word	0x08000415
 80003f4:	08000421 	.word	0x08000421
 80003f8:	0800042d 	.word	0x0800042d
  {
  case 0:HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);break;
 80003fc:	2201      	movs	r2, #1
 80003fe:	2101      	movs	r1, #1
 8000400:	480f      	ldr	r0, [pc, #60]	@ (8000440 <set_keyboard_row+0xa4>)
 8000402:	f000 ff83 	bl	800130c <HAL_GPIO_WritePin>
 8000406:	e017      	b.n	8000438 <set_keyboard_row+0x9c>
  case 1:HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);break;
 8000408:	2201      	movs	r2, #1
 800040a:	2102      	movs	r1, #2
 800040c:	480c      	ldr	r0, [pc, #48]	@ (8000440 <set_keyboard_row+0xa4>)
 800040e:	f000 ff7d 	bl	800130c <HAL_GPIO_WritePin>
 8000412:	e011      	b.n	8000438 <set_keyboard_row+0x9c>
  case 2:HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);break;
 8000414:	2201      	movs	r2, #1
 8000416:	2104      	movs	r1, #4
 8000418:	4809      	ldr	r0, [pc, #36]	@ (8000440 <set_keyboard_row+0xa4>)
 800041a:	f000 ff77 	bl	800130c <HAL_GPIO_WritePin>
 800041e:	e00b      	b.n	8000438 <set_keyboard_row+0x9c>
  case 3:HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);break;
 8000420:	2201      	movs	r2, #1
 8000422:	2108      	movs	r1, #8
 8000424:	4806      	ldr	r0, [pc, #24]	@ (8000440 <set_keyboard_row+0xa4>)
 8000426:	f000 ff71 	bl	800130c <HAL_GPIO_WritePin>
 800042a:	e005      	b.n	8000438 <set_keyboard_row+0x9c>
  case 4:HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);break;
 800042c:	2201      	movs	r2, #1
 800042e:	2110      	movs	r1, #16
 8000430:	4803      	ldr	r0, [pc, #12]	@ (8000440 <set_keyboard_row+0xa4>)
 8000432:	f000 ff6b 	bl	800130c <HAL_GPIO_WritePin>
 8000436:	bf00      	nop
  }
}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	48001000 	.word	0x48001000

08000444 <ReadKeyboard>:
int ReadKeyboard(){
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
	for(int row=0 ;row<5;row++){
 800044a:	2300      	movs	r3, #0
 800044c:	61fb      	str	r3, [r7, #28]
 800044e:	e09b      	b.n	8000588 <ReadKeyboard+0x144>
		set_keyboard_row(row);
 8000450:	69fb      	ldr	r3, [r7, #28]
 8000452:	b25b      	sxtb	r3, r3
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff ffa1 	bl	800039c <set_keyboard_row>
  	int a = HAL_GPIO_ReadPin(KC0_GPIO_Port, KC0_Pin);
 800045a:	2108      	movs	r1, #8
 800045c:	485f      	ldr	r0, [pc, #380]	@ (80005dc <ReadKeyboard+0x198>)
 800045e:	f000 ff3d 	bl	80012dc <HAL_GPIO_ReadPin>
 8000462:	4603      	mov	r3, r0
 8000464:	617b      	str	r3, [r7, #20]
  	int b = HAL_GPIO_ReadPin(KC1_GPIO_Port, KC1_Pin);
 8000466:	2140      	movs	r1, #64	@ 0x40
 8000468:	485c      	ldr	r0, [pc, #368]	@ (80005dc <ReadKeyboard+0x198>)
 800046a:	f000 ff37 	bl	80012dc <HAL_GPIO_ReadPin>
 800046e:	4603      	mov	r3, r0
 8000470:	613b      	str	r3, [r7, #16]
  	int c = HAL_GPIO_ReadPin(KC2_GPIO_Port, KC2_Pin);
 8000472:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000476:	485a      	ldr	r0, [pc, #360]	@ (80005e0 <ReadKeyboard+0x19c>)
 8000478:	f000 ff30 	bl	80012dc <HAL_GPIO_ReadPin>
 800047c:	4603      	mov	r3, r0
 800047e:	60fb      	str	r3, [r7, #12]
  	int aa = row*3+1;
 8000480:	69fa      	ldr	r2, [r7, #28]
 8000482:	4613      	mov	r3, r2
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	4413      	add	r3, r2
 8000488:	3301      	adds	r3, #1
 800048a:	60bb      	str	r3, [r7, #8]
  	int bb = row*3+2;
 800048c:	69fa      	ldr	r2, [r7, #28]
 800048e:	4613      	mov	r3, r2
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	4413      	add	r3, r2
 8000494:	3302      	adds	r3, #2
 8000496:	607b      	str	r3, [r7, #4]
  	int cc = row*3+3;
 8000498:	69fb      	ldr	r3, [r7, #28]
 800049a:	1c5a      	adds	r2, r3, #1
 800049c:	4613      	mov	r3, r2
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	4413      	add	r3, r2
 80004a2:	603b      	str	r3, [r7, #0]

  	if(a != previous_numbers[aa]){
 80004a4:	4a4f      	ldr	r2, [pc, #316]	@ (80005e4 <ReadKeyboard+0x1a0>)
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ac:	697a      	ldr	r2, [r7, #20]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	d018      	beq.n	80004e4 <ReadKeyboard+0xa0>
  		counter_numbers[aa]+=1;
 80004b2:	4a4d      	ldr	r2, [pc, #308]	@ (80005e8 <ReadKeyboard+0x1a4>)
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ba:	1c5a      	adds	r2, r3, #1
 80004bc:	494a      	ldr	r1, [pc, #296]	@ (80005e8 <ReadKeyboard+0x1a4>)
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		if(counter_numbers[aa] == 10){
 80004c4:	4a48      	ldr	r2, [pc, #288]	@ (80005e8 <ReadKeyboard+0x1a4>)
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004cc:	2b0a      	cmp	r3, #10
 80004ce:	d10e      	bne.n	80004ee <ReadKeyboard+0xaa>
  			previous_numbers[aa] = a;
 80004d0:	4944      	ldr	r1, [pc, #272]	@ (80005e4 <ReadKeyboard+0x1a0>)
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	697a      	ldr	r2, [r7, #20]
 80004d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  				if(a)return aa;
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d006      	beq.n	80004ee <ReadKeyboard+0xaa>
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	e077      	b.n	80005d4 <ReadKeyboard+0x190>
  		}
  	}else counter_numbers[aa]=0;
 80004e4:	4a40      	ldr	r2, [pc, #256]	@ (80005e8 <ReadKeyboard+0x1a4>)
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	2100      	movs	r1, #0
 80004ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

  	if(b != previous_numbers[bb]){
 80004ee:	4a3d      	ldr	r2, [pc, #244]	@ (80005e4 <ReadKeyboard+0x1a0>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f6:	693a      	ldr	r2, [r7, #16]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d018      	beq.n	800052e <ReadKeyboard+0xea>
  		counter_numbers[bb]+=1;
 80004fc:	4a3a      	ldr	r2, [pc, #232]	@ (80005e8 <ReadKeyboard+0x1a4>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000504:	1c5a      	adds	r2, r3, #1
 8000506:	4938      	ldr	r1, [pc, #224]	@ (80005e8 <ReadKeyboard+0x1a4>)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		if(counter_numbers[bb] == 10){
 800050e:	4a36      	ldr	r2, [pc, #216]	@ (80005e8 <ReadKeyboard+0x1a4>)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000516:	2b0a      	cmp	r3, #10
 8000518:	d10e      	bne.n	8000538 <ReadKeyboard+0xf4>
  			previous_numbers[bb] = b;
 800051a:	4932      	ldr	r1, [pc, #200]	@ (80005e4 <ReadKeyboard+0x1a0>)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	693a      	ldr	r2, [r7, #16]
 8000520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  				if(b)return bb;
 8000524:	693b      	ldr	r3, [r7, #16]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d006      	beq.n	8000538 <ReadKeyboard+0xf4>
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	e052      	b.n	80005d4 <ReadKeyboard+0x190>
  		}
  	}else counter_numbers[bb]=0;
 800052e:	4a2e      	ldr	r2, [pc, #184]	@ (80005e8 <ReadKeyboard+0x1a4>)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2100      	movs	r1, #0
 8000534:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

  	if(c != previous_numbers[cc]){
 8000538:	4a2a      	ldr	r2, [pc, #168]	@ (80005e4 <ReadKeyboard+0x1a0>)
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	429a      	cmp	r2, r3
 8000544:	d018      	beq.n	8000578 <ReadKeyboard+0x134>
  		counter_numbers[cc]+=1;
 8000546:	4a28      	ldr	r2, [pc, #160]	@ (80005e8 <ReadKeyboard+0x1a4>)
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800054e:	1c5a      	adds	r2, r3, #1
 8000550:	4925      	ldr	r1, [pc, #148]	@ (80005e8 <ReadKeyboard+0x1a4>)
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  		if(counter_numbers[cc] == 10){
 8000558:	4a23      	ldr	r2, [pc, #140]	@ (80005e8 <ReadKeyboard+0x1a4>)
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000560:	2b0a      	cmp	r3, #10
 8000562:	d10e      	bne.n	8000582 <ReadKeyboard+0x13e>
  			previous_numbers[cc] = c;
 8000564:	491f      	ldr	r1, [pc, #124]	@ (80005e4 <ReadKeyboard+0x1a0>)
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	68fa      	ldr	r2, [r7, #12]
 800056a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  				if(c)return cc;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d006      	beq.n	8000582 <ReadKeyboard+0x13e>
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	e02d      	b.n	80005d4 <ReadKeyboard+0x190>
  		}
  	}else counter_numbers[cc]=0;
 8000578:	4a1b      	ldr	r2, [pc, #108]	@ (80005e8 <ReadKeyboard+0x1a4>)
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	2100      	movs	r1, #0
 800057e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int row=0 ;row<5;row++){
 8000582:	69fb      	ldr	r3, [r7, #28]
 8000584:	3301      	adds	r3, #1
 8000586:	61fb      	str	r3, [r7, #28]
 8000588:	69fb      	ldr	r3, [r7, #28]
 800058a:	2b04      	cmp	r3, #4
 800058c:	f77f af60 	ble.w	8000450 <ReadKeyboard+0xc>
	}
	// 16th button pullup mode
	int temp = HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin);
 8000590:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000594:	4815      	ldr	r0, [pc, #84]	@ (80005ec <ReadKeyboard+0x1a8>)
 8000596:	f000 fea1 	bl	80012dc <HAL_GPIO_ReadPin>
 800059a:	4603      	mov	r3, r0
 800059c:	61bb      	str	r3, [r7, #24]
	if(temp != previous_numbers[16]){
 800059e:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <ReadKeyboard+0x1a0>)
 80005a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a2:	69ba      	ldr	r2, [r7, #24]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d010      	beq.n	80005ca <ReadKeyboard+0x186>
		counter_numbers[16]+=1;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <ReadKeyboard+0x1a4>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	3301      	adds	r3, #1
 80005ae:	4a0e      	ldr	r2, [pc, #56]	@ (80005e8 <ReadKeyboard+0x1a4>)
 80005b0:	6413      	str	r3, [r2, #64]	@ 0x40
		if(counter_numbers[16]==10){
 80005b2:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <ReadKeyboard+0x1a4>)
 80005b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b6:	2b0a      	cmp	r3, #10
 80005b8:	d10a      	bne.n	80005d0 <ReadKeyboard+0x18c>
			previous_numbers[16] = temp;
 80005ba:	4a0a      	ldr	r2, [pc, #40]	@ (80005e4 <ReadKeyboard+0x1a0>)
 80005bc:	69bb      	ldr	r3, [r7, #24]
 80005be:	6413      	str	r3, [r2, #64]	@ 0x40
			if(!temp)return 16;
 80005c0:	69bb      	ldr	r3, [r7, #24]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d104      	bne.n	80005d0 <ReadKeyboard+0x18c>
 80005c6:	2310      	movs	r3, #16
 80005c8:	e004      	b.n	80005d4 <ReadKeyboard+0x190>
		}
	}else counter_numbers[16] = 0;
 80005ca:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <ReadKeyboard+0x1a4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	641a      	str	r2, [r3, #64]	@ 0x40

	return -1;
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	48000c00 	.word	0x48000c00
 80005e0:	48000400 	.word	0x48000400
 80005e4:	2000003c 	.word	0x2000003c
 80005e8:	20000080 	.word	0x20000080
 80005ec:	48000800 	.word	0x48000800

080005f0 <rezero>:

void rezero(uint8_t *numbers){
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	numbers[0]=0;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	numbers[1]=17;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	3301      	adds	r3, #1
 8000602:	2211      	movs	r2, #17
 8000604:	701a      	strb	r2, [r3, #0]
	numbers[2]=17;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	3302      	adds	r3, #2
 800060a:	2211      	movs	r2, #17
 800060c:	701a      	strb	r2, [r3, #0]
	numbers[3]=17;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	3303      	adds	r3, #3
 8000612:	2211      	movs	r2, #17
 8000614:	701a      	strb	r2, [r3, #0]
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <num_to_array>:
void num_to_array(int num, uint8_t *numbers){
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
	if(!num)rezero(numbers);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d102      	bne.n	800063a <num_to_array+0x16>
 8000634:	6838      	ldr	r0, [r7, #0]
 8000636:	f7ff ffdb 	bl	80005f0 <rezero>
	int count = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
	while(num){
 800063e:	e01b      	b.n	8000678 <num_to_array+0x54>
		numbers[count] = num %10;
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <num_to_array+0x7c>)
 8000644:	fb83 1302 	smull	r1, r3, r3, r2
 8000648:	1099      	asrs	r1, r3, #2
 800064a:	17d3      	asrs	r3, r2, #31
 800064c:	1ac9      	subs	r1, r1, r3
 800064e:	460b      	mov	r3, r1
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	440b      	add	r3, r1
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	1ad1      	subs	r1, r2, r3
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	683a      	ldr	r2, [r7, #0]
 800065c:	4413      	add	r3, r2
 800065e:	b2ca      	uxtb	r2, r1
 8000660:	701a      	strb	r2, [r3, #0]
		num = num /10;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a0e      	ldr	r2, [pc, #56]	@ (80006a0 <num_to_array+0x7c>)
 8000666:	fb82 1203 	smull	r1, r2, r2, r3
 800066a:	1092      	asrs	r2, r2, #2
 800066c:	17db      	asrs	r3, r3, #31
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	607b      	str	r3, [r7, #4]
		count++;
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
	while(num){
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d1e0      	bne.n	8000640 <num_to_array+0x1c>
	}
	for(count;count<=3;count++){
 800067e:	e007      	b.n	8000690 <num_to_array+0x6c>
		numbers[count]=17;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	4413      	add	r3, r2
 8000686:	2211      	movs	r2, #17
 8000688:	701a      	strb	r2, [r3, #0]
	for(count;count<=3;count++){
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	3301      	adds	r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	2b03      	cmp	r3, #3
 8000694:	ddf4      	ble.n	8000680 <num_to_array+0x5c>
	}
}
 8000696:	bf00      	nop
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	66666667 	.word	0x66666667

080006a4 <power>:
int power(int n){
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	int res = 1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
	while(n){
 80006b0:	e008      	b.n	80006c4 <power+0x20>
		res*=10;
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	4613      	mov	r3, r2
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4413      	add	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	60fb      	str	r3, [r7, #12]
		n--;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	3b01      	subs	r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
	while(n){
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d1f3      	bne.n	80006b2 <power+0xe>
	}
	return res;
 80006ca:	68fb      	ldr	r3, [r7, #12]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <array_to_num>:
int array_to_num(uint8_t *numbers){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	int i = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
	int result = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
	while(numbers[i]!=17 && i<4){
 80006e8:	e00f      	b.n	800070a <array_to_num+0x32>
		result += power(i)*numbers[i];
 80006ea:	68f8      	ldr	r0, [r7, #12]
 80006ec:	f7ff ffda 	bl	80006a4 <power>
 80006f0:	4601      	mov	r1, r0
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	4413      	add	r3, r2
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	fb01 f303 	mul.w	r3, r1, r3
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	4413      	add	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]
		i++;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	3301      	adds	r3, #1
 8000708:	60fb      	str	r3, [r7, #12]
	while(numbers[i]!=17 && i<4){
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	4413      	add	r3, r2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b11      	cmp	r3, #17
 8000714:	d002      	beq.n	800071c <array_to_num+0x44>
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2b03      	cmp	r3, #3
 800071a:	dde6      	ble.n	80006ea <array_to_num+0x12>
	}
	return result;
 800071c:	68bb      	ldr	r3, [r7, #8]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <init_all>:
int oper = 0;
int result = 0;
bool is_start = true;
bool can_calculate = false;

void init_all(){
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
	operand_1 = 0;
 800072c:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <init_all+0x34>)
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
	operand_2 = 0;
 8000732:	4b0b      	ldr	r3, [pc, #44]	@ (8000760 <init_all+0x38>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
	oper=0;
 8000738:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <init_all+0x3c>)
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
	result = 0;
 800073e:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <init_all+0x40>)
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
	is_start = true;
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <init_all+0x44>)
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
	can_calculate = false;
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <init_all+0x48>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	200000c4 	.word	0x200000c4
 8000760:	200000c8 	.word	0x200000c8
 8000764:	200000cc 	.word	0x200000cc
 8000768:	200000d0 	.word	0x200000d0
 800076c:	20000012 	.word	0x20000012
 8000770:	200000d4 	.word	0x200000d4

08000774 <display_4seg>:
void display_4seg(int period, int delay, uint8_t *numbers){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
	set_digit(-1);
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	f7ff fdc0 	bl	8000308 <set_digit>
	display(numbers[period]);
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fda3 	bl	80002dc <display>
	set_digit(period);
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	b25b      	sxtb	r3, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fdb4 	bl	8000308 <set_digit>
	HAL_Delay(delay);
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fb12 	bl	8000dcc <HAL_Delay>
}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b6:	f000 fa98 	bl	8000cea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ba:	f000 f91b 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007be:	f000 f959 	bl	8000a74 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  int delay =0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  int period = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]

  uint8_t numbers[]={0,17,17,17};
 80007ca:	4b83      	ldr	r3, [pc, #524]	@ (80009d8 <main+0x228>)
 80007cc:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	if(period < 4){
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	2b03      	cmp	r3, #3
 80007d2:	dc06      	bgt.n	80007e2 <main+0x32>
  		display_4seg(period, delay, numbers);
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	461a      	mov	r2, r3
 80007d8:	68f9      	ldr	r1, [r7, #12]
 80007da:	6978      	ldr	r0, [r7, #20]
 80007dc:	f7ff ffca 	bl	8000774 <display_4seg>
 80007e0:	e0ef      	b.n	80009c2 <main+0x212>
  	}
  	else{
  	set_digit(-1);
 80007e2:	f04f 30ff 	mov.w	r0, #4294967295
 80007e6:	f7ff fd8f 	bl	8000308 <set_digit>
  	int read = ReadKeyboard();
 80007ea:	f7ff fe2b 	bl	8000444 <ReadKeyboard>
 80007ee:	60b8      	str	r0, [r7, #8]
  	if(read != -1){
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f6:	f000 80e4 	beq.w	80009c2 <main+0x212>

  		if((1<=read && read<=9 )|| read ==11){
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	dd02      	ble.n	8000806 <main+0x56>
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	2b09      	cmp	r3, #9
 8000804:	dd02      	ble.n	800080c <main+0x5c>
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	2b0b      	cmp	r3, #11
 800080a:	d137      	bne.n	800087c <main+0xcc>
				if(numbers[3]!=17){HAL_Delay(499);rezero(numbers);init_all();}
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	2b11      	cmp	r3, #17
 8000810:	d00a      	beq.n	8000828 <main+0x78>
 8000812:	f240 10f3 	movw	r0, #499	@ 0x1f3
 8000816:	f000 fad9 	bl	8000dcc <HAL_Delay>
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fee7 	bl	80005f0 <rezero>
 8000822:	f7ff ff81 	bl	8000728 <init_all>
 8000826:	e0cb      	b.n	80009c0 <main+0x210>
				else{
					for(int i = 2;i>=0;i--){
 8000828:	2302      	movs	r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	e00c      	b.n	8000848 <main+0x98>
						numbers[i+1]=numbers[i];
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	3301      	adds	r3, #1
 8000832:	1d39      	adds	r1, r7, #4
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	440a      	add	r2, r1
 8000838:	7812      	ldrb	r2, [r2, #0]
 800083a:	3318      	adds	r3, #24
 800083c:	443b      	add	r3, r7
 800083e:	f803 2c14 	strb.w	r2, [r3, #-20]
					for(int i = 2;i>=0;i--){
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	3b01      	subs	r3, #1
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	2b00      	cmp	r3, #0
 800084c:	daef      	bge.n	800082e <main+0x7e>
					}
					numbers[0] = (read == 11) ? 0 : read;
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	2b0b      	cmp	r3, #11
 8000852:	d002      	beq.n	800085a <main+0xaa>
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	e000      	b.n	800085c <main+0xac>
 800085a:	2300      	movs	r3, #0
 800085c:	713b      	strb	r3, [r7, #4]
					if(is_start){
 800085e:	4b5f      	ldr	r3, [pc, #380]	@ (80009dc <main+0x22c>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	f000 80ac 	beq.w	80009c0 <main+0x210>
						numbers[1]=17;
 8000868:	2311      	movs	r3, #17
 800086a:	717b      	strb	r3, [r7, #5]
						if(read!=11)is_start = false;
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	2b0b      	cmp	r3, #11
 8000870:	f000 80a6 	beq.w	80009c0 <main+0x210>
 8000874:	4b59      	ldr	r3, [pc, #356]	@ (80009dc <main+0x22c>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
				if(numbers[3]!=17){HAL_Delay(499);rezero(numbers);init_all();}
 800087a:	e0a1      	b.n	80009c0 <main+0x210>
					}
				}
  		}

  		else if(read == 10){
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	2b0a      	cmp	r3, #10
 8000880:	d106      	bne.n	8000890 <main+0xe0>
  			rezero(numbers);
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff feb3 	bl	80005f0 <rezero>
  			init_all();
 800088a:	f7ff ff4d 	bl	8000728 <init_all>
 800088e:	e098      	b.n	80009c2 <main+0x212>
  		}

  		else if(read == 12 && can_calculate){
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	2b0c      	cmp	r3, #12
 8000894:	d179      	bne.n	800098a <main+0x1da>
 8000896:	4b52      	ldr	r3, [pc, #328]	@ (80009e0 <main+0x230>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d075      	beq.n	800098a <main+0x1da>
  			operand_2 = array_to_num(numbers);
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff19 	bl	80006d8 <array_to_num>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a4e      	ldr	r2, [pc, #312]	@ (80009e4 <main+0x234>)
 80008aa:	6013      	str	r3, [r2, #0]
  			switch(oper){
 80008ac:	4b4e      	ldr	r3, [pc, #312]	@ (80009e8 <main+0x238>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	3b0d      	subs	r3, #13
 80008b2:	2b03      	cmp	r3, #3
 80008b4:	d82c      	bhi.n	8000910 <main+0x160>
 80008b6:	a201      	add	r2, pc, #4	@ (adr r2, 80008bc <main+0x10c>)
 80008b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008bc:	080008cd 	.word	0x080008cd
 80008c0:	080008dd 	.word	0x080008dd
 80008c4:	080008ed 	.word	0x080008ed
 80008c8:	080008ff 	.word	0x080008ff
  				case 13 :result = operand_1 + operand_2;break;
 80008cc:	4b47      	ldr	r3, [pc, #284]	@ (80009ec <main+0x23c>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b44      	ldr	r3, [pc, #272]	@ (80009e4 <main+0x234>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a46      	ldr	r2, [pc, #280]	@ (80009f0 <main+0x240>)
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	e019      	b.n	8000910 <main+0x160>
  				case 14 :result = operand_1 - operand_2;break;
 80008dc:	4b43      	ldr	r3, [pc, #268]	@ (80009ec <main+0x23c>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b40      	ldr	r3, [pc, #256]	@ (80009e4 <main+0x234>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	4a42      	ldr	r2, [pc, #264]	@ (80009f0 <main+0x240>)
 80008e8:	6013      	str	r3, [r2, #0]
 80008ea:	e011      	b.n	8000910 <main+0x160>
  				case 15 :result = operand_1 * operand_2;break;
 80008ec:	4b3f      	ldr	r3, [pc, #252]	@ (80009ec <main+0x23c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a3c      	ldr	r2, [pc, #240]	@ (80009e4 <main+0x234>)
 80008f2:	6812      	ldr	r2, [r2, #0]
 80008f4:	fb02 f303 	mul.w	r3, r2, r3
 80008f8:	4a3d      	ldr	r2, [pc, #244]	@ (80009f0 <main+0x240>)
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	e008      	b.n	8000910 <main+0x160>
  				case 16 :result = operand_1 / operand_2;break;
 80008fe:	4b3b      	ldr	r3, [pc, #236]	@ (80009ec <main+0x23c>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	4b38      	ldr	r3, [pc, #224]	@ (80009e4 <main+0x234>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	fb92 f3f3 	sdiv	r3, r2, r3
 800090a:	4a39      	ldr	r2, [pc, #228]	@ (80009f0 <main+0x240>)
 800090c:	6013      	str	r3, [r2, #0]
 800090e:	bf00      	nop
  			}
  			if(0<result && result<10000){
 8000910:	4b37      	ldr	r3, [pc, #220]	@ (80009f0 <main+0x240>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	dd0d      	ble.n	8000934 <main+0x184>
 8000918:	4b35      	ldr	r3, [pc, #212]	@ (80009f0 <main+0x240>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000920:	4293      	cmp	r3, r2
 8000922:	dc07      	bgt.n	8000934 <main+0x184>
  				num_to_array(result, numbers);
 8000924:	4b32      	ldr	r3, [pc, #200]	@ (80009f0 <main+0x240>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	1d3a      	adds	r2, r7, #4
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fe79 	bl	8000624 <num_to_array>
 8000932:	e027      	b.n	8000984 <main+0x1d4>
  			}
  			else if(result <0 && result >=-999){
 8000934:	4b2e      	ldr	r3, [pc, #184]	@ (80009f0 <main+0x240>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	da1f      	bge.n	800097c <main+0x1cc>
 800093c:	4b2c      	ldr	r3, [pc, #176]	@ (80009f0 <main+0x240>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8000944:	dd1a      	ble.n	800097c <main+0x1cc>
  				num_to_array(-result, numbers);
 8000946:	4b2a      	ldr	r3, [pc, #168]	@ (80009f0 <main+0x240>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	425b      	negs	r3, r3
 800094c:	1d3a      	adds	r2, r7, #4
 800094e:	4611      	mov	r1, r2
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fe67 	bl	8000624 <num_to_array>
  				if(result<-99)numbers[3]=16;
 8000956:	4b26      	ldr	r3, [pc, #152]	@ (80009f0 <main+0x240>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 800095e:	da02      	bge.n	8000966 <main+0x1b6>
 8000960:	2310      	movs	r3, #16
 8000962:	71fb      	strb	r3, [r7, #7]
 8000964:	e00e      	b.n	8000984 <main+0x1d4>
  				else if(result<-9)numbers[2]=16;
 8000966:	4b22      	ldr	r3, [pc, #136]	@ (80009f0 <main+0x240>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f113 0f09 	cmn.w	r3, #9
 800096e:	da02      	bge.n	8000976 <main+0x1c6>
 8000970:	2310      	movs	r3, #16
 8000972:	71bb      	strb	r3, [r7, #6]
  				if(result<-99)numbers[3]=16;
 8000974:	e006      	b.n	8000984 <main+0x1d4>
  				else numbers[1]=16;
 8000976:	2310      	movs	r3, #16
 8000978:	717b      	strb	r3, [r7, #5]
  				if(result<-99)numbers[3]=16;
 800097a:	e003      	b.n	8000984 <main+0x1d4>
  			}
  			else{rezero(numbers);}
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fe36 	bl	80005f0 <rezero>
  				init_all();
 8000984:	f7ff fed0 	bl	8000728 <init_all>
 8000988:	e01b      	b.n	80009c2 <main+0x212>
  		}

  		else if(13<=read && read<=16){
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	2b0c      	cmp	r3, #12
 800098e:	dd18      	ble.n	80009c2 <main+0x212>
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	2b10      	cmp	r3, #16
 8000994:	dc15      	bgt.n	80009c2 <main+0x212>
  			oper = read;
 8000996:	4a14      	ldr	r2, [pc, #80]	@ (80009e8 <main+0x238>)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	6013      	str	r3, [r2, #0]
  			operand_1 = array_to_num(numbers);
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fe9a 	bl	80006d8 <array_to_num>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4a11      	ldr	r2, [pc, #68]	@ (80009ec <main+0x23c>)
 80009a8:	6013      	str	r3, [r2, #0]
  			can_calculate = true;
 80009aa:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <main+0x230>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]
  			rezero(numbers);
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fe1c 	bl	80005f0 <rezero>
  			is_start = true;
 80009b8:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <main+0x22c>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]
 80009be:	e000      	b.n	80009c2 <main+0x212>
				if(numbers[3]!=17){HAL_Delay(499);rezero(numbers);init_all();}
 80009c0:	bf00      	nop
  		}

  	}
  	}
  	++period;
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	3301      	adds	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
  	if(period == 5)period = 0;
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	2b05      	cmp	r3, #5
 80009cc:	f47f aeff 	bne.w	80007ce <main+0x1e>
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
  	if(period < 4){
 80009d4:	e6fb      	b.n	80007ce <main+0x1e>
 80009d6:	bf00      	nop
 80009d8:	11111100 	.word	0x11111100
 80009dc:	20000012 	.word	0x20000012
 80009e0:	200000d4 	.word	0x200000d4
 80009e4:	200000c8 	.word	0x200000c8
 80009e8:	200000cc 	.word	0x200000cc
 80009ec:	200000c4 	.word	0x200000c4
 80009f0:	200000d0 	.word	0x200000d0

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b094      	sub	sp, #80	@ 0x50
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 0318 	add.w	r3, r7, #24
 80009fe:	2238      	movs	r2, #56	@ 0x38
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 fa44 	bl	8001e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a16:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a1a:	f000 fc8f 	bl	800133c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a28:	2340      	movs	r3, #64	@ 0x40
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a30:	f107 0318 	add.w	r3, r7, #24
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fd35 	bl	80014a4 <HAL_RCC_OscConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a40:	f000 f8be 	bl	8000bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a44:	230f      	movs	r3, #15
 8000a46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f001 f833 	bl	8001ac8 <HAL_RCC_ClockConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a68:	f000 f8aa 	bl	8000bc0 <Error_Handler>
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3750      	adds	r7, #80	@ 0x50
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a8a:	4b48      	ldr	r3, [pc, #288]	@ (8000bac <MX_GPIO_Init+0x138>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8e:	4a47      	ldr	r2, [pc, #284]	@ (8000bac <MX_GPIO_Init+0x138>)
 8000a90:	f043 0310 	orr.w	r3, r3, #16
 8000a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a96:	4b45      	ldr	r3, [pc, #276]	@ (8000bac <MX_GPIO_Init+0x138>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9a:	f003 0310 	and.w	r3, r3, #16
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	4b42      	ldr	r3, [pc, #264]	@ (8000bac <MX_GPIO_Init+0x138>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa6:	4a41      	ldr	r2, [pc, #260]	@ (8000bac <MX_GPIO_Init+0x138>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aae:	4b3f      	ldr	r3, [pc, #252]	@ (8000bac <MX_GPIO_Init+0x138>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aba:	4b3c      	ldr	r3, [pc, #240]	@ (8000bac <MX_GPIO_Init+0x138>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abe:	4a3b      	ldr	r2, [pc, #236]	@ (8000bac <MX_GPIO_Init+0x138>)
 8000ac0:	f043 0308 	orr.w	r3, r3, #8
 8000ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac6:	4b39      	ldr	r3, [pc, #228]	@ (8000bac <MX_GPIO_Init+0x138>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aca:	f003 0308 	and.w	r3, r3, #8
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b36      	ldr	r3, [pc, #216]	@ (8000bac <MX_GPIO_Init+0x138>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad6:	4a35      	ldr	r2, [pc, #212]	@ (8000bac <MX_GPIO_Init+0x138>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ade:	4b33      	ldr	r3, [pc, #204]	@ (8000bac <MX_GPIO_Init+0x138>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	4b30      	ldr	r3, [pc, #192]	@ (8000bac <MX_GPIO_Init+0x138>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aee:	4a2f      	ldr	r2, [pc, #188]	@ (8000bac <MX_GPIO_Init+0x138>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af6:	4b2d      	ldr	r3, [pc, #180]	@ (8000bac <MX_GPIO_Init+0x138>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
 8000b02:	2200      	movs	r2, #0
 8000b04:	f240 711f 	movw	r1, #1823	@ 0x71f
 8000b08:	4829      	ldr	r0, [pc, #164]	@ (8000bb0 <MX_GPIO_Init+0x13c>)
 8000b0a:	f000 fbff 	bl	800130c <HAL_GPIO_WritePin>
                          |SEG6_Pin|SEG7_Pin|SEG0_Pin|SEG1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIG0_Pin|DIG1_Pin|DIG2_Pin|DIG3_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f24c 0103 	movw	r1, #49155	@ 0xc003
 8000b14:	4827      	ldr	r0, [pc, #156]	@ (8000bb4 <MX_GPIO_Init+0x140>)
 8000b16:	f000 fbf9 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin SEG7_Pin SEG0_Pin SEG1_Pin */
  GPIO_InitStruct.Pin = SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
 8000b1a:	f240 731f 	movw	r3, #1823	@ 0x71f
 8000b1e:	617b      	str	r3, [r7, #20]
                          |SEG6_Pin|SEG7_Pin|SEG0_Pin|SEG1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	481f      	ldr	r0, [pc, #124]	@ (8000bb0 <MX_GPIO_Init+0x13c>)
 8000b34:	f000 fa50 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW3_Pin */
  GPIO_InitStruct.Pin = SW3_Pin;
 8000b38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	481a      	ldr	r0, [pc, #104]	@ (8000bb8 <MX_GPIO_Init+0x144>)
 8000b4e:	f000 fa43 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG0_Pin DIG1_Pin DIG2_Pin DIG3_Pin */
  GPIO_InitStruct.Pin = DIG0_Pin|DIG1_Pin|DIG2_Pin|DIG3_Pin;
 8000b52:	f24c 0303 	movw	r3, #49155	@ 0xc003
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4812      	ldr	r0, [pc, #72]	@ (8000bb4 <MX_GPIO_Init+0x140>)
 8000b6c:	f000 fa34 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC1_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC1_Pin;
 8000b70:	2348      	movs	r3, #72	@ 0x48
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <MX_GPIO_Init+0x140>)
 8000b84:	f000 fa28 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : KC2_Pin */
  GPIO_InitStruct.Pin = KC2_Pin;
 8000b88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KC2_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4807      	ldr	r0, [pc, #28]	@ (8000bbc <MX_GPIO_Init+0x148>)
 8000b9e:	f000 fa1b 	bl	8000fd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	@ 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	48001000 	.word	0x48001000
 8000bb4:	48000c00 	.word	0x48000c00
 8000bb8:	48000800 	.word	0x48000800
 8000bbc:	48000400 	.word	0x48000400

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <Error_Handler+0x8>

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bde:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <HAL_MspInit+0x44>)
 8000be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bee:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c02:	f000 fc3f 	bl	8001484 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <NMI_Handler+0x4>

08000c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6a:	f000 f891 	bl	8000d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c98:	480d      	ldr	r0, [pc, #52]	@ (8000cd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c9c:	f7ff ffea 	bl	8000c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca0:	480c      	ldr	r0, [pc, #48]	@ (8000cd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ca2:	490d      	ldr	r1, [pc, #52]	@ (8000cd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cdc <LoopForever+0xe>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce4 <LoopForever+0x16>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f001 f8eb 	bl	8001ea0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cca:	f7ff fd71 	bl	80007b0 <main>

08000cce <LoopForever>:

LoopForever:
    b LoopForever
 8000cce:	e7fe      	b.n	8000cce <LoopForever>
  ldr   r0, =_estack
 8000cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000cdc:	08001f18 	.word	0x08001f18
  ldr r2, =_sbss
 8000ce0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000ce4:	200000dc 	.word	0x200000dc

08000ce8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC1_2_IRQHandler>

08000cea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f93d 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cfa:	200f      	movs	r0, #15
 8000cfc:	f000 f80e 	bl	8000d1c <HAL_InitTick>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d002      	beq.n	8000d0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	71fb      	strb	r3, [r7, #7]
 8000d0a:	e001      	b.n	8000d10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d0c:	f7ff ff5e 	bl	8000bcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d10:	79fb      	ldrb	r3, [r7, #7]

}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d28:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <HAL_InitTick+0x68>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d022      	beq.n	8000d76 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d30:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <HAL_InitTick+0x6c>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <HAL_InitTick+0x68>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f93a 	bl	8000fbe <HAL_SYSTICK_Config>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d10f      	bne.n	8000d70 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b0f      	cmp	r3, #15
 8000d54:	d809      	bhi.n	8000d6a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d56:	2200      	movs	r2, #0
 8000d58:	6879      	ldr	r1, [r7, #4]
 8000d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5e:	f000 f914 	bl	8000f8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d62:	4a0a      	ldr	r2, [pc, #40]	@ (8000d8c <HAL_InitTick+0x70>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	e007      	b.n	8000d7a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	73fb      	strb	r3, [r7, #15]
 8000d6e:	e004      	b.n	8000d7a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	e001      	b.n	8000d7a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2000001c 	.word	0x2000001c
 8000d88:	20000014 	.word	0x20000014
 8000d8c:	20000018 	.word	0x20000018

08000d90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d94:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <HAL_IncTick+0x1c>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <HAL_IncTick+0x20>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a03      	ldr	r2, [pc, #12]	@ (8000dac <HAL_IncTick+0x1c>)
 8000da0:	6013      	str	r3, [r2, #0]
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	200000d8 	.word	0x200000d8
 8000db0:	2000001c 	.word	0x2000001c

08000db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return uwTick;
 8000db8:	4b03      	ldr	r3, [pc, #12]	@ (8000dc8 <HAL_GetTick+0x14>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	200000d8 	.word	0x200000d8

08000dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd4:	f7ff ffee 	bl	8000db4 <HAL_GetTick>
 8000dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de4:	d004      	beq.n	8000df0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de6:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <HAL_Delay+0x40>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	4413      	add	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000df0:	bf00      	nop
 8000df2:	f7ff ffdf 	bl	8000db4 <HAL_GetTick>
 8000df6:	4602      	mov	r2, r0
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d8f7      	bhi.n	8000df2 <HAL_Delay+0x26>
  {
  }
}
 8000e02:	bf00      	nop
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000001c 	.word	0x2000001c

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	@ (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	@ (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	@ (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	@ 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	@ 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f40:	d301      	bcc.n	8000f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00f      	b.n	8000f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f46:	4a0a      	ldr	r2, [pc, #40]	@ (8000f70 <SysTick_Config+0x40>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4e:	210f      	movs	r1, #15
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f7ff ff8e 	bl	8000e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f58:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <SysTick_Config+0x40>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5e:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <SysTick_Config+0x40>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff47 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f98:	f7ff ff5e 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000f9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff ff90 	bl	8000ec8 <NVIC_EncodePriority>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff5f 	bl	8000e74 <__NVIC_SetPriority>
}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ffb2 	bl	8000f30 <SysTick_Config>
 8000fcc:	4603      	mov	r3, r0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fe6:	e15a      	b.n	800129e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	2101      	movs	r1, #1
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 814c 	beq.w	8001298 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b01      	cmp	r3, #1
 800100a:	d005      	beq.n	8001018 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001014:	2b02      	cmp	r3, #2
 8001016:	d130      	bne.n	800107a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800104e:	2201      	movs	r2, #1
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	091b      	lsrs	r3, r3, #4
 8001064:	f003 0201 	and.w	r2, r3, #1
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	2b03      	cmp	r3, #3
 8001084:	d017      	beq.n	80010b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2203      	movs	r2, #3
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d123      	bne.n	800110a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	08da      	lsrs	r2, r3, #3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3208      	adds	r2, #8
 80010ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	220f      	movs	r2, #15
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	691a      	ldr	r2, [r3, #16]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	08da      	lsrs	r2, r3, #3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3208      	adds	r2, #8
 8001104:	6939      	ldr	r1, [r7, #16]
 8001106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	2203      	movs	r2, #3
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0203 	and.w	r2, r3, #3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 80a6 	beq.w	8001298 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114c:	4b5b      	ldr	r3, [pc, #364]	@ (80012bc <HAL_GPIO_Init+0x2e4>)
 800114e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001150:	4a5a      	ldr	r2, [pc, #360]	@ (80012bc <HAL_GPIO_Init+0x2e4>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	6613      	str	r3, [r2, #96]	@ 0x60
 8001158:	4b58      	ldr	r3, [pc, #352]	@ (80012bc <HAL_GPIO_Init+0x2e4>)
 800115a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001164:	4a56      	ldr	r2, [pc, #344]	@ (80012c0 <HAL_GPIO_Init+0x2e8>)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	089b      	lsrs	r3, r3, #2
 800116a:	3302      	adds	r3, #2
 800116c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	220f      	movs	r2, #15
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800118e:	d01f      	beq.n	80011d0 <HAL_GPIO_Init+0x1f8>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a4c      	ldr	r2, [pc, #304]	@ (80012c4 <HAL_GPIO_Init+0x2ec>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d019      	beq.n	80011cc <HAL_GPIO_Init+0x1f4>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a4b      	ldr	r2, [pc, #300]	@ (80012c8 <HAL_GPIO_Init+0x2f0>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d013      	beq.n	80011c8 <HAL_GPIO_Init+0x1f0>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a4a      	ldr	r2, [pc, #296]	@ (80012cc <HAL_GPIO_Init+0x2f4>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d00d      	beq.n	80011c4 <HAL_GPIO_Init+0x1ec>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a49      	ldr	r2, [pc, #292]	@ (80012d0 <HAL_GPIO_Init+0x2f8>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d007      	beq.n	80011c0 <HAL_GPIO_Init+0x1e8>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a48      	ldr	r2, [pc, #288]	@ (80012d4 <HAL_GPIO_Init+0x2fc>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d101      	bne.n	80011bc <HAL_GPIO_Init+0x1e4>
 80011b8:	2305      	movs	r3, #5
 80011ba:	e00a      	b.n	80011d2 <HAL_GPIO_Init+0x1fa>
 80011bc:	2306      	movs	r3, #6
 80011be:	e008      	b.n	80011d2 <HAL_GPIO_Init+0x1fa>
 80011c0:	2304      	movs	r3, #4
 80011c2:	e006      	b.n	80011d2 <HAL_GPIO_Init+0x1fa>
 80011c4:	2303      	movs	r3, #3
 80011c6:	e004      	b.n	80011d2 <HAL_GPIO_Init+0x1fa>
 80011c8:	2302      	movs	r3, #2
 80011ca:	e002      	b.n	80011d2 <HAL_GPIO_Init+0x1fa>
 80011cc:	2301      	movs	r3, #1
 80011ce:	e000      	b.n	80011d2 <HAL_GPIO_Init+0x1fa>
 80011d0:	2300      	movs	r3, #0
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	f002 0203 	and.w	r2, r2, #3
 80011d8:	0092      	lsls	r2, r2, #2
 80011da:	4093      	lsls	r3, r2
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e2:	4937      	ldr	r1, [pc, #220]	@ (80012c0 <HAL_GPIO_Init+0x2e8>)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3302      	adds	r3, #2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011f0:	4b39      	ldr	r3, [pc, #228]	@ (80012d8 <HAL_GPIO_Init+0x300>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001214:	4a30      	ldr	r2, [pc, #192]	@ (80012d8 <HAL_GPIO_Init+0x300>)
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800121a:	4b2f      	ldr	r3, [pc, #188]	@ (80012d8 <HAL_GPIO_Init+0x300>)
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800123e:	4a26      	ldr	r2, [pc, #152]	@ (80012d8 <HAL_GPIO_Init+0x300>)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001244:	4b24      	ldr	r3, [pc, #144]	@ (80012d8 <HAL_GPIO_Init+0x300>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001268:	4a1b      	ldr	r2, [pc, #108]	@ (80012d8 <HAL_GPIO_Init+0x300>)
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800126e:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <HAL_GPIO_Init+0x300>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	43db      	mvns	r3, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001292:	4a11      	ldr	r2, [pc, #68]	@ (80012d8 <HAL_GPIO_Init+0x300>)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	3301      	adds	r3, #1
 800129c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	fa22 f303 	lsr.w	r3, r2, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f47f ae9d 	bne.w	8000fe8 <HAL_GPIO_Init+0x10>
  }
}
 80012ae:	bf00      	nop
 80012b0:	bf00      	nop
 80012b2:	371c      	adds	r7, #28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40010000 	.word	0x40010000
 80012c4:	48000400 	.word	0x48000400
 80012c8:	48000800 	.word	0x48000800
 80012cc:	48000c00 	.word	0x48000c00
 80012d0:	48001000 	.word	0x48001000
 80012d4:	48001400 	.word	0x48001400
 80012d8:	40010400 	.word	0x40010400

080012dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691a      	ldr	r2, [r3, #16]
 80012ec:	887b      	ldrh	r3, [r7, #2]
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012f4:	2301      	movs	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	e001      	b.n	80012fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001328:	e002      	b.n	8001330 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800132a:	887a      	ldrh	r2, [r7, #2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d141      	bne.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800134a:	4b4b      	ldr	r3, [pc, #300]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001356:	d131      	bne.n	80013bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001358:	4b47      	ldr	r3, [pc, #284]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800135e:	4a46      	ldr	r2, [pc, #280]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001360:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001364:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001368:	4b43      	ldr	r3, [pc, #268]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001370:	4a41      	ldr	r2, [pc, #260]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001372:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001376:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001378:	4b40      	ldr	r3, [pc, #256]	@ (800147c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2232      	movs	r2, #50	@ 0x32
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	4a3f      	ldr	r2, [pc, #252]	@ (8001480 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001384:	fba2 2303 	umull	r2, r3, r2, r3
 8001388:	0c9b      	lsrs	r3, r3, #18
 800138a:	3301      	adds	r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800138e:	e002      	b.n	8001396 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3b01      	subs	r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001396:	4b38      	ldr	r3, [pc, #224]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800139e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013a2:	d102      	bne.n	80013aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f2      	bne.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013aa:	4b33      	ldr	r3, [pc, #204]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013b6:	d158      	bne.n	800146a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e057      	b.n	800146c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013cc:	e04d      	b.n	800146a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013d4:	d141      	bne.n	800145a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013d6:	4b28      	ldr	r3, [pc, #160]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013e2:	d131      	bne.n	8001448 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013e4:	4b24      	ldr	r3, [pc, #144]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013ea:	4a23      	ldr	r2, [pc, #140]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f4:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001402:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001404:	4b1d      	ldr	r3, [pc, #116]	@ (800147c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2232      	movs	r2, #50	@ 0x32
 800140a:	fb02 f303 	mul.w	r3, r2, r3
 800140e:	4a1c      	ldr	r2, [pc, #112]	@ (8001480 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	0c9b      	lsrs	r3, r3, #18
 8001416:	3301      	adds	r3, #1
 8001418:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800141a:	e002      	b.n	8001422 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3b01      	subs	r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001422:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800142a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800142e:	d102      	bne.n	8001436 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f2      	bne.n	800141c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001436:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800143e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001442:	d112      	bne.n	800146a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e011      	b.n	800146c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001448:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800144e:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001454:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001458:	e007      	b.n	800146a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800145a:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001462:	4a05      	ldr	r2, [pc, #20]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001464:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001468:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	40007000 	.word	0x40007000
 800147c:	20000014 	.word	0x20000014
 8001480:	431bde83 	.word	0x431bde83

08001484 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4a04      	ldr	r2, [pc, #16]	@ (80014a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800148e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001492:	6093      	str	r3, [r2, #8]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40007000 	.word	0x40007000

080014a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e2fe      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d075      	beq.n	80015ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c2:	4b97      	ldr	r3, [pc, #604]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014cc:	4b94      	ldr	r3, [pc, #592]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2b0c      	cmp	r3, #12
 80014da:	d102      	bne.n	80014e2 <HAL_RCC_OscConfig+0x3e>
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d002      	beq.n	80014e8 <HAL_RCC_OscConfig+0x44>
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d10b      	bne.n	8001500 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	4b8d      	ldr	r3, [pc, #564]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d05b      	beq.n	80015ac <HAL_RCC_OscConfig+0x108>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d157      	bne.n	80015ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e2d9      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001508:	d106      	bne.n	8001518 <HAL_RCC_OscConfig+0x74>
 800150a:	4b85      	ldr	r3, [pc, #532]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a84      	ldr	r2, [pc, #528]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e01d      	b.n	8001554 <HAL_RCC_OscConfig+0xb0>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x98>
 8001522:	4b7f      	ldr	r3, [pc, #508]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a7e      	ldr	r2, [pc, #504]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001528:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b7c      	ldr	r3, [pc, #496]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a7b      	ldr	r2, [pc, #492]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e00b      	b.n	8001554 <HAL_RCC_OscConfig+0xb0>
 800153c:	4b78      	ldr	r3, [pc, #480]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a77      	ldr	r2, [pc, #476]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001542:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b75      	ldr	r3, [pc, #468]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a74      	ldr	r2, [pc, #464]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 800154e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d013      	beq.n	8001584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155c:	f7ff fc2a 	bl	8000db4 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001564:	f7ff fc26 	bl	8000db4 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b64      	cmp	r3, #100	@ 0x64
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e29e      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001576:	4b6a      	ldr	r3, [pc, #424]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0xc0>
 8001582:	e014      	b.n	80015ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff fc16 	bl	8000db4 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fc12 	bl	8000db4 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	@ 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e28a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800159e:	4b60      	ldr	r3, [pc, #384]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0xe8>
 80015aa:	e000      	b.n	80015ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d075      	beq.n	80016a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ba:	4b59      	ldr	r3, [pc, #356]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c4:	4b56      	ldr	r3, [pc, #344]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b0c      	cmp	r3, #12
 80015d2:	d102      	bne.n	80015da <HAL_RCC_OscConfig+0x136>
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d002      	beq.n	80015e0 <HAL_RCC_OscConfig+0x13c>
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d11f      	bne.n	8001620 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_OscConfig+0x154>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e25d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f8:	4b49      	ldr	r3, [pc, #292]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	061b      	lsls	r3, r3, #24
 8001606:	4946      	ldr	r1, [pc, #280]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800160c:	4b45      	ldr	r3, [pc, #276]	@ (8001724 <HAL_RCC_OscConfig+0x280>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fb83 	bl	8000d1c <HAL_InitTick>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d043      	beq.n	80016a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e249      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d023      	beq.n	8001670 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001628:	4b3d      	ldr	r3, [pc, #244]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a3c      	ldr	r2, [pc, #240]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 800162e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fbbe 	bl	8000db4 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163c:	f7ff fbba 	bl	8000db4 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e232      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800164e:	4b34      	ldr	r3, [pc, #208]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165a:	4b31      	ldr	r3, [pc, #196]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	061b      	lsls	r3, r3, #24
 8001668:	492d      	ldr	r1, [pc, #180]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 800166a:	4313      	orrs	r3, r2
 800166c:	604b      	str	r3, [r1, #4]
 800166e:	e01a      	b.n	80016a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001670:	4b2b      	ldr	r3, [pc, #172]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a2a      	ldr	r2, [pc, #168]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001676:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800167a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fb9a 	bl	8000db4 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001684:	f7ff fb96 	bl	8000db4 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e20e      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001696:	4b22      	ldr	r3, [pc, #136]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x1e0>
 80016a2:	e000      	b.n	80016a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d041      	beq.n	8001736 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d01c      	beq.n	80016f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ba:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80016bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c0:	4a17      	ldr	r2, [pc, #92]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ca:	f7ff fb73 	bl	8000db4 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d2:	f7ff fb6f 	bl	8000db4 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e1e7      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80016e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0ef      	beq.n	80016d2 <HAL_RCC_OscConfig+0x22e>
 80016f2:	e020      	b.n	8001736 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80016f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016fa:	4a09      	ldr	r2, [pc, #36]	@ (8001720 <HAL_RCC_OscConfig+0x27c>)
 80016fc:	f023 0301 	bic.w	r3, r3, #1
 8001700:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001704:	f7ff fb56 	bl	8000db4 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800170a:	e00d      	b.n	8001728 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170c:	f7ff fb52 	bl	8000db4 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d906      	bls.n	8001728 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e1ca      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000
 8001724:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001728:	4b8c      	ldr	r3, [pc, #560]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 800172a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1ea      	bne.n	800170c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 80a6 	beq.w	8001890 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001748:	4b84      	ldr	r3, [pc, #528]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_OscConfig+0x2b4>
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <HAL_RCC_OscConfig+0x2b6>
 8001758:	2300      	movs	r3, #0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00d      	beq.n	800177a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b7f      	ldr	r3, [pc, #508]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 8001760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001762:	4a7e      	ldr	r2, [pc, #504]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001768:	6593      	str	r3, [r2, #88]	@ 0x58
 800176a:	4b7c      	ldr	r3, [pc, #496]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001776:	2301      	movs	r3, #1
 8001778:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800177a:	4b79      	ldr	r3, [pc, #484]	@ (8001960 <HAL_RCC_OscConfig+0x4bc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001782:	2b00      	cmp	r3, #0
 8001784:	d118      	bne.n	80017b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001786:	4b76      	ldr	r3, [pc, #472]	@ (8001960 <HAL_RCC_OscConfig+0x4bc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a75      	ldr	r2, [pc, #468]	@ (8001960 <HAL_RCC_OscConfig+0x4bc>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001792:	f7ff fb0f 	bl	8000db4 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179a:	f7ff fb0b 	bl	8000db4 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e183      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ac:	4b6c      	ldr	r3, [pc, #432]	@ (8001960 <HAL_RCC_OscConfig+0x4bc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d108      	bne.n	80017d2 <HAL_RCC_OscConfig+0x32e>
 80017c0:	4b66      	ldr	r3, [pc, #408]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c6:	4a65      	ldr	r2, [pc, #404]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017d0:	e024      	b.n	800181c <HAL_RCC_OscConfig+0x378>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b05      	cmp	r3, #5
 80017d8:	d110      	bne.n	80017fc <HAL_RCC_OscConfig+0x358>
 80017da:	4b60      	ldr	r3, [pc, #384]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80017dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017e0:	4a5e      	ldr	r2, [pc, #376]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017ea:	4b5c      	ldr	r3, [pc, #368]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80017ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f0:	4a5a      	ldr	r2, [pc, #360]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017fa:	e00f      	b.n	800181c <HAL_RCC_OscConfig+0x378>
 80017fc:	4b57      	ldr	r3, [pc, #348]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80017fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001802:	4a56      	ldr	r2, [pc, #344]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800180c:	4b53      	ldr	r3, [pc, #332]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001812:	4a52      	ldr	r2, [pc, #328]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 8001814:	f023 0304 	bic.w	r3, r3, #4
 8001818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d016      	beq.n	8001852 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff fac6 	bl	8000db4 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800182a:	e00a      	b.n	8001842 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7ff fac2 	bl	8000db4 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e138      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001842:	4b46      	ldr	r3, [pc, #280]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 8001844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0ed      	beq.n	800182c <HAL_RCC_OscConfig+0x388>
 8001850:	e015      	b.n	800187e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff faaf 	bl	8000db4 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001858:	e00a      	b.n	8001870 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff faab 	bl	8000db4 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001868:	4293      	cmp	r3, r2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e121      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001870:	4b3a      	ldr	r3, [pc, #232]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 8001872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1ed      	bne.n	800185a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800187e:	7ffb      	ldrb	r3, [r7, #31]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d105      	bne.n	8001890 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001884:	4b35      	ldr	r3, [pc, #212]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001888:	4a34      	ldr	r2, [pc, #208]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 800188a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800188e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0320 	and.w	r3, r3, #32
 8001898:	2b00      	cmp	r3, #0
 800189a:	d03c      	beq.n	8001916 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d01c      	beq.n	80018de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018a4:	4b2d      	ldr	r3, [pc, #180]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80018a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018aa:	4a2c      	ldr	r2, [pc, #176]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b4:	f7ff fa7e 	bl	8000db4 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018bc:	f7ff fa7a 	bl	8000db4 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e0f2      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ce:	4b23      	ldr	r3, [pc, #140]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80018d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ef      	beq.n	80018bc <HAL_RCC_OscConfig+0x418>
 80018dc:	e01b      	b.n	8001916 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018de:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80018e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018e4:	4a1d      	ldr	r2, [pc, #116]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ee:	f7ff fa61 	bl	8000db4 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018f6:	f7ff fa5d 	bl	8000db4 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e0d5      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001908:	4b14      	ldr	r3, [pc, #80]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 800190a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1ef      	bne.n	80018f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80c9 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001920:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b0c      	cmp	r3, #12
 800192a:	f000 8083 	beq.w	8001a34 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d15e      	bne.n	80019f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b09      	ldr	r3, [pc, #36]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a08      	ldr	r2, [pc, #32]	@ (800195c <HAL_RCC_OscConfig+0x4b8>)
 800193c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff fa37 	bl	8000db4 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001948:	e00c      	b.n	8001964 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194a:	f7ff fa33 	bl	8000db4 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d905      	bls.n	8001964 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e0ab      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
 800195c:	40021000 	.word	0x40021000
 8001960:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001964:	4b55      	ldr	r3, [pc, #340]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1ec      	bne.n	800194a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001970:	4b52      	ldr	r3, [pc, #328]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	4b52      	ldr	r3, [pc, #328]	@ (8001ac0 <HAL_RCC_OscConfig+0x61c>)
 8001976:	4013      	ands	r3, r2
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6a11      	ldr	r1, [r2, #32]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001980:	3a01      	subs	r2, #1
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	4311      	orrs	r1, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800198a:	0212      	lsls	r2, r2, #8
 800198c:	4311      	orrs	r1, r2
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001992:	0852      	lsrs	r2, r2, #1
 8001994:	3a01      	subs	r2, #1
 8001996:	0552      	lsls	r2, r2, #21
 8001998:	4311      	orrs	r1, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800199e:	0852      	lsrs	r2, r2, #1
 80019a0:	3a01      	subs	r2, #1
 80019a2:	0652      	lsls	r2, r2, #25
 80019a4:	4311      	orrs	r1, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80019aa:	06d2      	lsls	r2, r2, #27
 80019ac:	430a      	orrs	r2, r1
 80019ae:	4943      	ldr	r1, [pc, #268]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b4:	4b41      	ldr	r3, [pc, #260]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a40      	ldr	r2, [pc, #256]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 80019ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019c0:	4b3e      	ldr	r3, [pc, #248]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4a3d      	ldr	r2, [pc, #244]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 80019c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff f9f2 	bl	8000db4 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff f9ee 	bl	8000db4 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e066      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e6:	4b35      	ldr	r3, [pc, #212]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x530>
 80019f2:	e05e      	b.n	8001ab2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f4:	4b31      	ldr	r3, [pc, #196]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a30      	ldr	r2, [pc, #192]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 80019fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff f9d8 	bl	8000db4 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a08:	f7ff f9d4 	bl	8000db4 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e04c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a1a:	4b28      	ldr	r3, [pc, #160]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a26:	4b25      	ldr	r3, [pc, #148]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	4924      	ldr	r1, [pc, #144]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 8001a2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <HAL_RCC_OscConfig+0x620>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	60cb      	str	r3, [r1, #12]
 8001a32:	e03e      	b.n	8001ab2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e039      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001a40:	4b1e      	ldr	r3, [pc, #120]	@ (8001abc <HAL_RCC_OscConfig+0x618>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f003 0203 	and.w	r2, r3, #3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d12c      	bne.n	8001aae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d123      	bne.n	8001aae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d11b      	bne.n	8001aae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d113      	bne.n	8001aae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a90:	085b      	lsrs	r3, r3, #1
 8001a92:	3b01      	subs	r3, #1
 8001a94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d109      	bne.n	8001aae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aa4:	085b      	lsrs	r3, r3, #1
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d001      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	019f800c 	.word	0x019f800c
 8001ac4:	feeefffc 	.word	0xfeeefffc

08001ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e11e      	b.n	8001d1e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b91      	ldr	r3, [pc, #580]	@ (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d910      	bls.n	8001b10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b8e      	ldr	r3, [pc, #568]	@ (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 020f 	bic.w	r2, r3, #15
 8001af6:	498c      	ldr	r1, [pc, #560]	@ (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afe:	4b8a      	ldr	r3, [pc, #552]	@ (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e106      	b.n	8001d1e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d073      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d129      	bne.n	8001b78 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b24:	4b81      	ldr	r3, [pc, #516]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0f4      	b.n	8001d1e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b34:	f000 f966 	bl	8001e04 <RCC_GetSysClockFreqFromPLLSource>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4a7c      	ldr	r2, [pc, #496]	@ (8001d30 <HAL_RCC_ClockConfig+0x268>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d93f      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b42:	4b7a      	ldr	r3, [pc, #488]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d033      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d12f      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b62:	4b72      	ldr	r3, [pc, #456]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b6a:	4a70      	ldr	r2, [pc, #448]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b70:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b72:	2380      	movs	r3, #128	@ 0x80
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	e024      	b.n	8001bc2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d107      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b80:	4b6a      	ldr	r3, [pc, #424]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d109      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0c6      	b.n	8001d1e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b90:	4b66      	ldr	r3, [pc, #408]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0be      	b.n	8001d1e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ba0:	f000 f8ce 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8001ba4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4a61      	ldr	r2, [pc, #388]	@ (8001d30 <HAL_RCC_ClockConfig+0x268>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d909      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bae:	4b5f      	ldr	r3, [pc, #380]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bb6:	4a5d      	ldr	r2, [pc, #372]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bbc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001bbe:	2380      	movs	r3, #128	@ 0x80
 8001bc0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bc2:	4b5a      	ldr	r3, [pc, #360]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f023 0203 	bic.w	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	4957      	ldr	r1, [pc, #348]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bd4:	f7ff f8ee 	bl	8000db4 <HAL_GetTick>
 8001bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bdc:	f7ff f8ea 	bl	8000db4 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e095      	b.n	8001d1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	4b4e      	ldr	r3, [pc, #312]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 020c 	and.w	r2, r3, #12
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d1eb      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d023      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c1c:	4b43      	ldr	r3, [pc, #268]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	4a42      	ldr	r2, [pc, #264]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001c22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c26:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d007      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c34:	4b3d      	ldr	r3, [pc, #244]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001c3c:	4a3b      	ldr	r2, [pc, #236]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001c3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c44:	4b39      	ldr	r3, [pc, #228]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4936      	ldr	r1, [pc, #216]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	608b      	str	r3, [r1, #8]
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2b80      	cmp	r3, #128	@ 0x80
 8001c5c:	d105      	bne.n	8001c6a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c5e:	4b33      	ldr	r3, [pc, #204]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	4a32      	ldr	r2, [pc, #200]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001c64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c68:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d21d      	bcs.n	8001cb4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c78:	4b2b      	ldr	r3, [pc, #172]	@ (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 020f 	bic.w	r2, r3, #15
 8001c80:	4929      	ldr	r1, [pc, #164]	@ (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c88:	f7ff f894 	bl	8000db4 <HAL_GetTick>
 8001c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c90:	f7ff f890 	bl	8000db4 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e03b      	b.n	8001d1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b20      	ldr	r3, [pc, #128]	@ (8001d28 <HAL_RCC_ClockConfig+0x260>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d1ed      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4917      	ldr	r1, [pc, #92]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d009      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cde:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	490f      	ldr	r1, [pc, #60]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cf2:	f000 f825 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <HAL_RCC_ClockConfig+0x264>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	490c      	ldr	r1, [pc, #48]	@ (8001d34 <HAL_RCC_ClockConfig+0x26c>)
 8001d04:	5ccb      	ldrb	r3, [r1, r3]
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d38 <HAL_RCC_ClockConfig+0x270>)
 8001d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d12:	4b0a      	ldr	r3, [pc, #40]	@ (8001d3c <HAL_RCC_ClockConfig+0x274>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f800 	bl	8000d1c <HAL_InitTick>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40022000 	.word	0x40022000
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	04c4b400 	.word	0x04c4b400
 8001d34:	08001f00 	.word	0x08001f00
 8001d38:	20000014 	.word	0x20000014
 8001d3c:	20000018 	.word	0x20000018

08001d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d46:	4b2c      	ldr	r3, [pc, #176]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d102      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d52:	4b2a      	ldr	r3, [pc, #168]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	e047      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d58:	4b27      	ldr	r3, [pc, #156]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d102      	bne.n	8001d6a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d64:	4b26      	ldr	r3, [pc, #152]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	e03e      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d6a:	4b23      	ldr	r3, [pc, #140]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d136      	bne.n	8001de4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d76:	4b20      	ldr	r3, [pc, #128]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d80:	4b1d      	ldr	r3, [pc, #116]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d10c      	bne.n	8001dae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d94:	4a1a      	ldr	r2, [pc, #104]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	4a16      	ldr	r2, [pc, #88]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d9e:	68d2      	ldr	r2, [r2, #12]
 8001da0:	0a12      	lsrs	r2, r2, #8
 8001da2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	617b      	str	r3, [r7, #20]
      break;
 8001dac:	e00c      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dae:	4a13      	ldr	r2, [pc, #76]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4a10      	ldr	r2, [pc, #64]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001db8:	68d2      	ldr	r2, [r2, #12]
 8001dba:	0a12      	lsrs	r2, r2, #8
 8001dbc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	617b      	str	r3, [r7, #20]
      break;
 8001dc6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0e5b      	lsrs	r3, r3, #25
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	e001      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001de8:	693b      	ldr	r3, [r7, #16]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	371c      	adds	r7, #28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	00f42400 	.word	0x00f42400
 8001e00:	007a1200 	.word	0x007a1200

08001e04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e14:	4b1b      	ldr	r3, [pc, #108]	@ (8001e84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	3301      	adds	r3, #1
 8001e20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d10c      	bne.n	8001e42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e28:	4a17      	ldr	r2, [pc, #92]	@ (8001e88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	4a14      	ldr	r2, [pc, #80]	@ (8001e84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e32:	68d2      	ldr	r2, [r2, #12]
 8001e34:	0a12      	lsrs	r2, r2, #8
 8001e36:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	617b      	str	r3, [r7, #20]
    break;
 8001e40:	e00c      	b.n	8001e5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e42:	4a12      	ldr	r2, [pc, #72]	@ (8001e8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001e84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e4c:	68d2      	ldr	r2, [r2, #12]
 8001e4e:	0a12      	lsrs	r2, r2, #8
 8001e50:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e54:	fb02 f303 	mul.w	r3, r2, r3
 8001e58:	617b      	str	r3, [r7, #20]
    break;
 8001e5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e5c:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	0e5b      	lsrs	r3, r3, #25
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	3301      	adds	r3, #1
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e76:	687b      	ldr	r3, [r7, #4]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	371c      	adds	r7, #28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40021000 	.word	0x40021000
 8001e88:	007a1200 	.word	0x007a1200
 8001e8c:	00f42400 	.word	0x00f42400

08001e90 <memset>:
 8001e90:	4402      	add	r2, r0
 8001e92:	4603      	mov	r3, r0
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d100      	bne.n	8001e9a <memset+0xa>
 8001e98:	4770      	bx	lr
 8001e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e9e:	e7f9      	b.n	8001e94 <memset+0x4>

08001ea0 <__libc_init_array>:
 8001ea0:	b570      	push	{r4, r5, r6, lr}
 8001ea2:	4d0d      	ldr	r5, [pc, #52]	@ (8001ed8 <__libc_init_array+0x38>)
 8001ea4:	4c0d      	ldr	r4, [pc, #52]	@ (8001edc <__libc_init_array+0x3c>)
 8001ea6:	1b64      	subs	r4, r4, r5
 8001ea8:	10a4      	asrs	r4, r4, #2
 8001eaa:	2600      	movs	r6, #0
 8001eac:	42a6      	cmp	r6, r4
 8001eae:	d109      	bne.n	8001ec4 <__libc_init_array+0x24>
 8001eb0:	4d0b      	ldr	r5, [pc, #44]	@ (8001ee0 <__libc_init_array+0x40>)
 8001eb2:	4c0c      	ldr	r4, [pc, #48]	@ (8001ee4 <__libc_init_array+0x44>)
 8001eb4:	f000 f818 	bl	8001ee8 <_init>
 8001eb8:	1b64      	subs	r4, r4, r5
 8001eba:	10a4      	asrs	r4, r4, #2
 8001ebc:	2600      	movs	r6, #0
 8001ebe:	42a6      	cmp	r6, r4
 8001ec0:	d105      	bne.n	8001ece <__libc_init_array+0x2e>
 8001ec2:	bd70      	pop	{r4, r5, r6, pc}
 8001ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ec8:	4798      	blx	r3
 8001eca:	3601      	adds	r6, #1
 8001ecc:	e7ee      	b.n	8001eac <__libc_init_array+0xc>
 8001ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ed2:	4798      	blx	r3
 8001ed4:	3601      	adds	r6, #1
 8001ed6:	e7f2      	b.n	8001ebe <__libc_init_array+0x1e>
 8001ed8:	08001f10 	.word	0x08001f10
 8001edc:	08001f10 	.word	0x08001f10
 8001ee0:	08001f10 	.word	0x08001f10
 8001ee4:	08001f14 	.word	0x08001f14

08001ee8 <_init>:
 8001ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eea:	bf00      	nop
 8001eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eee:	bc08      	pop	{r3}
 8001ef0:	469e      	mov	lr, r3
 8001ef2:	4770      	bx	lr

08001ef4 <_fini>:
 8001ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef6:	bf00      	nop
 8001ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001efa:	bc08      	pop	{r3}
 8001efc:	469e      	mov	lr, r3
 8001efe:	4770      	bx	lr
